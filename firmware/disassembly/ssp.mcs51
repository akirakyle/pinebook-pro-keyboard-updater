
;-------------------------------------------------------------------------------
;	Internal RAM layout
;-------------------------------------------------------------------------------

0x00: |0|0|0|0|0|0|0|0|I|d|d|d|d|d|d|d|
0x10: |d|d|d|d|d|d| | |I|d|d|d|d|d|d|d|
0x20: |d|d|d|d|d|d|B|d| | | | | | | | |
0x30: | | | | | | | | | | | | | | | | |
0x40: | | | | | | | | | | | | | | | | |
0x50: | | | | | | | | | | | | | | | | |
0x60: | | | | | | | | | | | | | | | | |
0x70: | | | | | | | | | | | | | | | | |
0x80: | | | | | | | | | | | | | | | | |
0x90: | | | | | | | | | | | | | | | | |
0xA0: | | | | | | | | | | | | | | | | |
0xB0: | | | | | | | | | | | | | | | | |
0xC0: | | | | | | | | | | | | | | | | |
0xD0: | | | | | | | | | | | | | | | | |
0xE0: | | | | | | | | | | | | | | | | |
0xF0: | | | | | | | | | | | | | | | | |

0-3:Register Banks, B:Bits, d:Data, I:iRAM, S:Stack

;-------------------------------------------------------------------------------
;	Public labels
;-------------------------------------------------------------------------------

0x3800:	System_init					(calls:   0, jumps:   1)
0x384E:	load_akira_to_0x20				(calls:   2, jumps:   0)
0x3861:	load_0x37FF_to_0x27				(calls:   2, jumps:   0)
0x3A1D:	usb_start?					(calls:   3, jumps:   0)
0x3A30:	zero_everything					(calls:   3, jumps:   0)
0x3A64:	usb_ep0_send1					(calls:   1, jumps:   0)
0x3B53:	usb_ep0_recv1					(calls:   2, jumps:   0)
0x3B61:	Function_000					(calls:   1, jumps:   0)
0x3B98:	usb_ep0_send2					(calls:   1, jumps:   0)
0x3BAD:	Function_001					(calls:   1, jumps:   0)
0x3BE5:	Function_002					(calls:   1, jumps:   0)
0x3BF1:	Function_003					(calls:   3, jumps:   0)
0x3BFB:	Function_004					(calls:   3, jumps:   0)
0x3C00:	Function_005					(calls:   2, jumps:   0)
0x3C0D:	Function_006					(calls:   1, jumps:   0)
0x3C2A:	Function_007					(calls:   1, jumps:   2)
0x3C37:	Function_008					(calls:   7, jumps:   0)
0x3CCC:	Function_009					(calls:   1, jumps:   0)
0x3D19:	Function_010					(calls:   1, jumps:   0)
0x3D30:	Function_011					(calls:   1, jumps:   1)
0x3D3C:	SSP_start					(calls:   1, jumps:   2)
0x3DA8:	Function_012					(calls:   2, jumps:   0)
0x3DAE:	Function_013					(calls:   2, jumps:   0)
0x3DBE:	Function_014					(calls:   3, jumps:   1)
0x3DC4:	Function_015					(calls:   3, jumps:   0)
0x3E8D:	Function_016					(calls:   4, jumps:   0)
0x3EC5:	Function_017					(calls:   3, jumps:   0)
0x3F00:	Function_018					(not used)

;-------------------------------------------------------------------------------
;	SFR registers
;-------------------------------------------------------------------------------

0x80:	P0						(used   1 times)
0x81:	SP						(used   5 times)
0x82:	DPL						(used   6 times)
0x83:	DPH						(used   5 times)
0x87:	PCON						(not used)
0x8E:	SUSLO						(not used)
0x90:	P1						(used   1 times)
0x93:	CLRWDT						(used  10 times)
0x94:	PREWDT						(used   2 times)
0x95:	WKT_CON						(used   1 times)
0x96:	MODE_FG						(used   3 times)
0x9A:	P0CON						(used   1 times)
0x9B:	P1CON						(used   1 times)
0x9C:	P2CON						(used   1 times)
0x9D:	P3CON						(used   1 times)
0x9E:	P4CON						(used   5 times)
0xA0:	P2						(used   1 times)
0xA2:	P0WK						(not used)
0xA3:	P1WK						(not used)
0xA4:	P2WK						(not used)
0xA5:	P3WK						(not used)
0xA6:	P4WK						(not used)
0xA8:	IE						(used   1 times)
0xA9:	IE2						(used   1 times)
0xAD:	P3SEL						(not used)
0xAF:	PRCON						(not used)
0xB0:	P3						(used   1 times)
0xB3:	IB_CON1						(used   3 times)
0xB4:	IB_CON2						(used   2 times)
0xB5:	IB_CON3						(used   2 times)
0xB6:	IB_CON4						(used   2 times)
0xB7:	IB_CON5						(used   2 times)
0xB8:	IP						(used   1 times)
0xB9:	IP2						(used   1 times)
0xBE:	IB_OFFSET					(used   7 times)
0xBF:	IB_DATA						(used   6 times)
0xC0:	P4						(used  11 times)
0xC8:	TCSTU						(not used)
0xC9:	TCCON						(not used)
0xCA:	TCSCALE						(not used)
0xCB:	TCAP0R						(not used)
0xCC:	TCAP0F						(not used)
0xD0:	PSW						(used   3 times)
0xD2:	BT0						(not used)
0xD3:	BT1						(not used)
0xD4:	BTCON						(not used)
0xDA:	IF						(used   1 times)
0xDB:	IF2						(used   7 times)
0xDC:	IRQEN						(used   1 times)
0xDD:	IRQEN2						(used   1 times)
0xDE:	IRQFG						(used   1 times)
0xDF:	IRQFG2						(used   1 times)
0xE0:	ACC						(used   1 times)
0xE2:	TXDAT1						(not used)
0xE3:	TXCNT1						(not used)
0xE4:	TXFLG1						(not used)
0xE5:	TXDAT2						(not used)
0xE6:	TXCNT2						(not used)
0xE7:	TXFLG2						(not used)
0xE9:	CRWCON						(used   1 times)
0xEA:	TXDAT0						(used   3 times)
0xEB:	TXCNT0						(used   1 times)
0xEC:	TXFLG0						(used   3 times)
0xED:	RXDAT0						(used   1 times)
0xEE:	RXCNT0						(used   2 times)
0xEF:	RXFLG0						(used  18 times)
0xF0:	B						(used   3 times)
0xF2:	DADDR						(used   2 times)
0xF3:	DFC						(used   7 times)
0xF7:	XPAGE						(used   9 times)

;-------------------------------------------------------------------------------
;	Special function bits
;-------------------------------------------------------------------------------

0x80:	P0_0						(not used)
0x81:	P0_1						(not used)
0x82:	P0_2						(not used)
0x83:	P0_3						(not used)
0x84:	P0_4						(not used)
0x85:	P0_5						(not used)
0x86:	P0_6						(not used)
0x87:	P0_7						(not used)
0x90:	P1_0						(not used)
0x91:	P1_1						(not used)
0x92:	P1_2						(not used)
0x93:	P1_3						(not used)
0x94:	P1_4						(not used)
0x95:	P1_5						(not used)
0x96:	P1_6						(not used)
0x97:	P1_7						(not used)
0xA0:	P2_0						(not used)
0xA1:	P2_1						(not used)
0xA2:	P2_2						(not used)
0xA3:	P2_3						(not used)
0xA4:	P2_4						(not used)
0xA5:	P2_5						(not used)
0xA6:	P2_6						(not used)
0xA7:	P2_7						(not used)
0xA8:	EEXT0						(not used)
0xA9:	ET0						(not used)
0xAB:	ET1						(not used)
0xAC:	ETC0						(not used)
0xAF:	EA						(used   3 times)
0xB0:	P3_0						(not used)
0xB1:	P3_1						(not used)
0xB2:	P3_2						(not used)
0xB3:	P3_3						(not used)
0xB4:	P3_4						(not used)
0xB5:	P3_5						(not used)
0xB6:	P3_6						(not used)
0xB7:	P3_7						(not used)
0xB8:	PEXT0						(not used)
0xB9:	PT0						(not used)
0xBB:	PT1						(not used)
0xBC:	PTC0						(not used)
0xC0:	P4_0						(not used)
0xC1:	P4_1						(not used)
0xC2:	P4_2						(not used)
0xC3:	P4_3						(not used)
0xC4:	P4_4						(not used)
0xC5:	P4_5						(used  14 times)
0xC6:	P4_6						(used  10 times)
0xC7:	P4_7						(not used)
0xC8:	TC0R_FULL					(not used)
0xC9:	TC0F_FULL					(not used)
0xCC:	TC0_OVL						(not used)
0xD0:	P						(not used)
0xD2:	OV						(not used)
0xD3:	RS0						(not used)
0xD4:	RS1						(not used)
0xD5:	F0						(not used)
0xD6:	AC						(not used)
0xD7:	CY						(not used)
0xE0:	ACC_0						(used   1 times)
0xE1:	ACC_1						(used   2 times)
0xE2:	ACC_2						(used   2 times)
0xE3:	ACC_3						(used   1 times)
0xE4:	ACC_4						(used   4 times)
0xE5:	ACC_5						(used   2 times)
0xE6:	ACC_6						(not used)
0xE7:	ACC_7						(used   4 times)

;-------------------------------------------------------------------------------
;	Overlayable register banks
;-------------------------------------------------------------------------------

0x00:	REG_BANK_0

;-------------------------------------------------------------------------------
;	Internal RAM data
;-------------------------------------------------------------------------------

0x09:	variable_0x09					(used   8 times)
0x0A:	variable_0x0A					(used   6 times)
0x0B:	variable_0x0B					(used   9 times)
0x0C:	variable_0x0C					(used   4 times)
0x0D:	variable_0x0D					(used   4 times)
0x0E:	variable_0x0E					(used   3 times)
0x0F:	variable_0x0F					(used   2 times)
0x10:	variable_0x10					(used   6 times)
0x11:	variable_0x11					(used   2 times)
0x12:	variable_0x12					(used  10 times)
0x13:	variable_0x13					(used   8 times)
0x14:	variable_0x14					(used   2 times)
0x15:	variable_0x15					(used   2 times)
0x19:	variable_0x19					(used   1 times)
0x1A:	variable_0x1A					(used   1 times)
0x1B:	variable_0x1B					(used   1 times)
0x1C:	variable_0x1C					(used   3 times)
0x1D:	variable_0x1D					(used   4 times)
0x1E:	variable_0x1E					(used   4 times)
0x1F:	variable_0x1F					(used   4 times)
0x20:	variable_0x20					(used   2 times)
0x21:	variable_0x21					(used   1 times)
0x22:	variable_0x22					(used   2 times)
0x23:	variable_0x23					(used   1 times)
0x24:	variable_0x24					(used   2 times)
0x25:	variable_0x25					(used   3 times)
0x26:	variable_0x26					(used   2 times)
0x27:	variable_0x27					(used   4 times)

;-------------------------------------------------------------------------------
;	bit data
;-------------------------------------------------------------------------------

0x30:	bit_0x30					(used   4 times)
0x31:	bit_0x31					(used   3 times)
0x33:	bit_0x33					(used   3 times)
0x34:	bit_0x34					(used   2 times)
0x37:	bit_0x37					(used   2 times)

;-------------------------------------------------------------------------------
;	Indirectly addressable internal RAM data
;-------------------------------------------------------------------------------

0x06:	iram_0x06					(used   1 times)
0x08:	iram_0x08					(used   5 times)
0x18:	iram_0x18					(used   3 times)

;-------------------------------------------------------------------------------

0x0000: 02 38 00	ljmp	System_init				; Jumps (forward) hither: 0x3800

0x0003: -- -- --
  ....  -- -- --
0x37FA: -- -- --

Label_000:

0x37FB: 02 11 A3	ljmp	0x11A3					; Jumps (backward) hither: 0x11A3

Label_001:

0x37FE: 00		nop

Label_002:

0x37FF: 00		nop

;-------------------------------------------------------------------------------

System_init:

0x3800: 75 F0 A5	mov	B, #0xA5				; B = 0xA5
0x3803: C2 AF		clr	EA					; EA = L
0x3805: 75 93 55	mov	CLRWDT, #0x55				; CLRWDT = 0x55 {'U'}
0x3808: E5 96		mov	A, MODE_FG				; ACC = MODE_FG
0x380A: 20 E1 62	jb	ACC_1, Label_008			; If (ACC_1 == H) then jumps (forward) hither: 0x386F

0x380D: 30 E2 28	jnb	ACC_2, Label_005			; If (ACC_2 == L) then jumps (forward) hither: 0x3838

0x3810: E5 20		mov	A, 0x20					; ACC = [0x20]
0x3812: B4 41 23	cjne	A, #0x41, Label_005			; If (ACC != 0x41 {'A'}) then jumps (forward) hither: 0x3838

0x3815: B5 24 20	cjne	A, 0x24, Label_005			; If (ACC != [0x24]) then jumps (forward) hither: 0x3838

0x3818: E5 21		mov	A, 0x21					; ACC = [0x21]
0x381A: B4 4B 1B	cjne	A, #0x4B, Label_005			; If (ACC != 0x4B {'K'}) then jumps (forward) hither: 0x3838

0x381D: E5 22		mov	A, 0x22					; ACC = [0x22]
0x381F: B4 49 16	cjne	A, #0x49, Label_005			; If (ACC != 0x49 {'I'}) then jumps (forward) hither: 0x3838

0x3822: E5 23		mov	A, 0x23					; ACC = [0x23]
0x3824: B4 52 11	cjne	A, #0x52, Label_005			; If (ACC != 0x52 {'R'}) then jumps (forward) hither: 0x3838

Label_003:

0x3827: 01 D5		ajmp	Label_020				; Jumps (forward) hither: 0x38D5 (PC += 2, PC(10-0) = 0x00D5)

Label_004:

0x3829: 75 9E 60	mov	P4CON, #0x60				; P4CON = 0x60 {'`'}
0x382C: 75 C0 7F	mov	P4, #0x7F				; P4 = 0x7F {'^?'}
0x382F: 90 37 FE	mov	DPTR, #0x37FE				; DPTR = 0x37FE
0x3832: E4		clr	A					; ACC = 0
0x3833: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x3834: 64 5A		xrl	A, #0x5A				; ACC ^= 0x5A {'Z'}
0x3836: 60 EF		jz	Label_003				; If (ACC == 0) then jumps (backward) hither: 0x3827

Label_005:

0x3838: 90 37 FB	mov	DPTR, #0x37FB				; DPTR = 0x37FB
0x383B: E4		clr	A					; ACC = 0
0x383C: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x383D: B4 02 E7	cjne	A, #0x02, Label_003			; If (ACC != 0x02) then jumps (backward) hither: 0x3827

0x3840: E4		clr	A					; ACC = 0
0x3841: F5 F0		mov	B, A					; B = ACC
0x3843: 90 00 00	mov	DPTR, #0x0000				; DPTR = 0x0000
0x3846: 75 81 07	mov	SP, #0x07				; SP = 0x07 {'\a'}
0x3849: F5 D0		mov	PSW, A					; PSW = ACC
0x384B: 02 37 FB	ljmp	Label_000				; Jumps (backward) hither: 0x37FB

;-------------------------------------------------------------------------------

load_akira_to_0x20:

0x384E: 90 3F BA	mov	DPTR, #0x3FBA				; DPTR = 0x3FBA
0x3851: 78 20		mov	R0, #0x20				; R0 = 0x20 {' '}
0x3853: 79 06		mov	R1, #0x06				; R1 = 0x06
0x3855: E5 F0		mov	A, B					; ACC = B

Label_006:

0x3857: B4 A5 FD	cjne	A, #0xA5, Label_006			; If (ACC != 0xA5) then jumps hither: 0x3857

Label_007:

0x385A: E4		clr	A					; ACC = 0
0x385B: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x385C: F6		mov	@R0, A					; [R0] = ACC
0x385D: 08		inc	R0					; ++R0
0x385E: A3		inc	DPTR					; ++DPTR
0x385F: D9 F9		djnz	R1, Label_007				; If (--R1 != 0) then jumps (backward) hither: 0x385A

;-------------------------------------------------------------------------------

load_0x37FF_to_0x27:

0x3861: E4		clr	A					; ACC = 0
0x3862: F5 1D		mov	R5<#3>, A				; R5<#3> = ACC
0x3864: F5 1E		mov	R6<#3>, A				; R6<#3> = ACC
0x3866: F5 1F		mov	R7<#3>, A				; R7<#3> = ACC
0x3868: 90 37 FF	mov	DPTR, #0x37FF				; DPTR = 0x37FF
0x386B: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x386C: F5 27		mov	0x27, A					; [0x27] = ACC
0x386E: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_008:

0x386F: 11 4E		acall	load_akira_to_0x20			; Calls (backward) this: 0x384E (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x004E)
0x3871: 74 14		mov	A, #0x14				; ACC = 0x14

Label_009:

0x3873: 20 C5 B3	jb	P4_5, Label_004				; If (P4_5 == H) then jumps (backward) hither: 0x3829

0x3876: 30 C6 B0	jnb	P4_6, Label_004				; If (P4_6 == L) then jumps (backward) hither: 0x3829

0x3879: 14		dec	A					; --ACC
0x387A: 70 F7		jnz	Label_009				; If (ACC != 0) then jumps (backward) hither: 0x3873

0x387C: F5 9E		mov	P4CON, A				; P4CON = ACC
0x387E: F8		mov	R0, A					; R0 = ACC
0x387F: 74 14		mov	A, #0x14				; ACC = 0x14

Label_010:

0x3881: 75 C0 DF	mov	P4, #0xDF				; P4 = 0xDF

Label_011:

0x3884: D8 FE		djnz	R0, Label_011				; If (--R0 != 0) then jumps hither: 0x3884 (waiting loop)

0x3886: 30 C6 A0	jnb	P4_6, Label_004				; If (P4_6 == L) then jumps (backward) hither: 0x3829

0x3889: 75 C0 BF	mov	P4, #0xBF				; P4 = 0xBF

Label_012:

0x388C: D8 FE		djnz	R0, Label_012				; If (--R0 != 0) then jumps hither: 0x388C (waiting loop)

0x388E: 20 C5 98	jb	P4_5, Label_004				; If (P4_5 == H) then jumps (backward) hither: 0x3829

0x3891: 75 C0 FF	mov	P4, #0xFF				; P4 = 0xFF

Label_013:

0x3894: D8 FE		djnz	R0, Label_013				; If (--R0 != 0) then jumps hither: 0x3894 (waiting loop)

0x3896: 30 C5 90	jnb	P4_5, Label_004				; If (P4_5 == L) then jumps (backward) hither: 0x3829

0x3899: B4 0A 02	cjne	A, #0x0A, Label_014			; If (ACC != 0x0A {'\n'}) then jumps (forward) hither: 0x389E

0x389C: F5 1D		mov	R5<#3>, A				; R5<#3> = ACC

Label_014:

0x389E: B4 11 03	cjne	A, #0x11, Label_015			; If (ACC != 0x11) then jumps (forward) hither: 0x38A4

0x38A1: 75 1E 09	mov	R6<#3>, #0x09				; R6<#3> = 0x09 {'\t'}

Label_015:

0x38A4: B4 06 02	cjne	A, #0x06, Label_016			; If (ACC != 0x06) then jumps (forward) hither: 0x38A9

0x38A7: F5 1F		mov	R7<#3>, A				; R7<#3> = ACC

Label_016:

0x38A9: 75 93 55	mov	CLRWDT, #0x55				; CLRWDT = 0x55 {'U'}
0x38AC: D5 E0 D2	djnz	ACC, Label_010				; If (--ACC != 0) then jumps (backward) hither: 0x3881

Label_017:

0x38AF: D8 FE		djnz	R0, Label_017				; If (--R0 != 0) then jumps hither: 0x38AF (waiting loop)

0x38B1: 20 C5 05	jb	P4_5, Label_018				; If (P4_5 == H) then jumps (forward) hither: 0x38B9

0x38B4: 20 C6 02	jb	P4_6, Label_018				; If (P4_6 == H) then jumps (forward) hither: 0x38B9

0x38B7: 21 A6		ajmp	Label_042				; Jumps (forward) hither: 0x39A6 (PC += 2, PC(10-0) = 0x01A6)

Label_018:

0x38B9: 75 81 27	mov	SP, #0x27				; SP = 0x27 {'''}
0x38BC: 75 C0 9F	mov	P4, #0x9F				; P4 = 0x9F
0x38BF: 75 12 05	mov	R2<#2>, #0x05				; R2<#2> = 0x05
0x38C2: 7D 37		mov	R5, #0x37				; R5 = 0x37 {'7'}
0x38C4: 7C FE		mov	R4, #0xFE				; R4 = 0xFE
0x38C6: 74 5A		mov	A, #0x5A				; ACC = 0x5A {'Z'}
0x38C8: B1 BE		acall	Function_014				; Calls (forward) this: 0x3DBE (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x05BE)

Label_019:

0x38CA: C2 C5		clr	P4_5					; P4_5 = L
0x38CC: D1 C5		acall	Function_017				; Calls (forward) this: 0x3EC5 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x06C5)
0x38CE: D2 C5		setb	P4_5					; P4_5 = H
0x38D0: D1 C5		acall	Function_017				; Calls (forward) this: 0x3EC5 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x06C5)
0x38D2: 30 C5 F5	jnb	P4_5, Label_019				; If (P4_5 == L) then jumps (backward) hither: 0x38CA

Label_020:

0x38D5: 75 93 55	mov	CLRWDT, #0x55				; CLRWDT = 0x55 {'U'}
0x38D8: 75 81 27	mov	SP, #0x27				; SP = 0x27 {'''}
0x38DB: E4		clr	A					; ACC = 0
0x38DC: F5 D0		mov	PSW, A					; PSW = ACC
0x38DE: 75 9E 60	mov	P4CON, #0x60				; P4CON = 0x60 {'`'}
0x38E1: 75 C0 7F	mov	P4, #0x7F				; P4 = 0x7F {'^?'}
0x38E4: E5 96		mov	A, MODE_FG				; ACC = MODE_FG
0x38E6: 54 0A		anl	A, #0x0A				; ACC &= 0x0A {'\n'}
0x38E8: 60 0A		jz	Label_022				; If (ACC == 0) then jumps (forward) hither: 0x38F4

Label_021:

0x38EA: 75 F3 01	mov	DFC, #0x01				; DFC = 0x01
0x38ED: 11 4E		acall	load_akira_to_0x20			; Calls (backward) this: 0x384E (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x004E)
0x38EF: D1 CF		acall	Label_178				; Calls (forward) this: 0x3ECF (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x06CF)
0x38F1: 75 F3 C2	mov	DFC, #0xC2				; DFC = 0xC2

Label_022:

0x38F4: 51 30		acall	zero_everything				; Calls (forward) this: 0x3A30 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0230)
0x38F6: 75 F3 CA	mov	DFC, #0xCA				; DFC = 0xCA
0x38F9: 75 94 03	mov	PREWDT, #0x03				; PREWDT = 0x03

Label_023:

0x38FC: E5 20		mov	A, 0x20					; ACC = [0x20]

Label_024:

0x38FE: B4 41 FD	cjne	A, #0x41, Label_024			; If (ACC != 0x41 {'A'}) then jumps hither: 0x38FE

0x3901: 65 24		xrl	A, 0x24					; ACC |= [0x24]

Label_025:

0x3903: 70 FE		jnz	Label_025				; If (ACC != 0) then jumps hither: 0x3903

Label_026:

0x3905: 20 AF FD	jb	EA, Label_026				; If (EA == H) then jumps hither: 0x3905 (waiting loop)

0x3908: 75 93 55	mov	CLRWDT, #0x55				; CLRWDT = 0x55 {'U'}
0x390B: E5 DB		mov	A, IF2					; ACC = IF2
0x390D: 30 E0 3B	jnb	ACC_0, Label_031			; If (ACC_0 == L) then jumps (forward) hither: 0x394B

0x3910: 53 DB FE	anl	IF2, #0xFE				; IF2 &= 0xFE

Label_027:

0x3913: E5 EF		mov	A, RXFLG0				; ACC = RXFLG0
0x3915: 54 18		anl	A, #0x18				; ACC &= 0x18
0x3917: 70 1C		jnz	Label_028				; If (ACC != 0) then jumps (forward) hither: 0x3935

0x3919: 71 53		acall	usb_ep0_recv1				; Calls (forward) this: 0x3B53 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0353)
0x391B: BB 08 20	cjne	R3, #0x08, Label_029			; If (R3 != 0x08 {'\b'}) then jumps (forward) hither: 0x393E

0x391E: 43 EF 04	orl	RXFLG0, #0x04				; RXFLG0 |= 0x04
0x3921: 53 EF FE	anl	RXFLG0, #0xFE				; RXFLG0 &= 0xFE
0x3924: E5 EF		mov	A, RXFLG0				; ACC = RXFLG0
0x3926: 20 E4 15	jb	ACC_4, Label_029			; If (ACC_4 == H) then jumps (forward) hither: 0x393E

0x3929: 71 E5		acall	Function_002				; Calls (forward) this: 0x3BE5 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x03E5)
0x392B: 51 64		acall	usb_ep0_send1				; Calls (forward) this: 0x3A64 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0264)
0x392D: 20 33 0E	jb	0x33, Label_029				; If ([0x33] == H) then jumps (forward) hither: 0x393E

0x3930: 53 EF FB	anl	RXFLG0, #0xFB				; RXFLG0 &= 0xFB
0x3933: 01 FC		ajmp	Label_023				; Jumps (backward) hither: 0x38FC (PC += 2, PC(10-0) = 0x00FC)

Label_028:

0x3935: 20 E4 0E	jb	ACC_4, Label_030			; If (ACC_4 == H) then jumps (forward) hither: 0x3946

0x3938: 43 EF 04	orl	RXFLG0, #0x04				; RXFLG0 |= 0x04
0x393B: 53 EF FE	anl	RXFLG0, #0xFE				; RXFLG0 &= 0xFE

Label_029:

0x393E: 43 EC 02	orl	TXFLG0, #0x02				; TXFLG0 |= 0x02
0x3941: 43 EF 02	orl	RXFLG0, #0x02				; RXFLG0 |= 0x02
0x3944: 71 F1		acall	Function_003				; Calls (forward) this: 0x3BF1 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x03F1)

Label_030:

0x3946: 53 EF FB	anl	RXFLG0, #0xFB				; RXFLG0 &= 0xFB
0x3949: 01 FC		ajmp	Label_023				; Jumps (backward) hither: 0x38FC (PC += 2, PC(10-0) = 0x00FC)

Label_031:

0x394B: 30 E1 05	jnb	ACC_1, Label_032			; If (ACC_1 == L) then jumps (forward) hither: 0x3953

0x394E: 53 DB FD	anl	IF2, #0xFD				; IF2 &= 0xFD
0x3951: 21 13		ajmp	Label_027				; Jumps (backward) hither: 0x3913 (PC += 2, PC(10-0) = 0x0113)

Label_032:

0x3953: 30 E3 1F	jnb	ACC_3, Label_036			; If (ACC_3 == L) then jumps (forward) hither: 0x3975

0x3956: 53 DB F7	anl	IF2, #0xF7				; IF2 &= 0xF7
0x3959: 53 EF FB	anl	RXFLG0, #0xFB				; RXFLG0 &= 0xFB
0x395C: 20 30 04	jb	0x30, Label_033				; If ([0x30] == H) then jumps (forward) hither: 0x3963

0x395F: 71 61		acall	Function_000				; Calls (forward) this: 0x3B61 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0361)
0x3961: 21 70		ajmp	Label_035				; Jumps (forward) hither: 0x3970 (PC += 2, PC(10-0) = 0x0170)

Label_033:

0x3963: E5 10		mov	A, R0<#2>				; ACC = R0<#2>
0x3965: B4 01 06	cjne	A, #0x01, Label_034			; If (ACC != 0x01) then jumps (forward) hither: 0x396E

0x3968: E5 0A		mov	A, R2<#1>				; ACC = R2<#1>
0x396A: F5 F2		mov	DADDR, A				; DADDR = ACC
0x396C: 60 00		jz	Label_034				; If (ACC == 0) then jumps (forward) hither: 0x396E

Label_034:

0x396E: 71 F1		acall	Function_003				; Calls (forward) this: 0x3BF1 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x03F1)

Label_035:

0x3970: 53 EF FB	anl	RXFLG0, #0xFB				; RXFLG0 &= 0xFB
0x3973: 01 FC		ajmp	Label_023				; Jumps (backward) hither: 0x38FC (PC += 2, PC(10-0) = 0x00FC)

Label_036:

0x3975: 30 E4 2C	jnb	ACC_4, Label_041			; If (ACC_4 == L) then jumps (forward) hither: 0x39A4

0x3978: 53 DB EF	anl	IF2, #0xEF				; IF2 &= 0xEF
0x397B: E5 EF		mov	A, RXFLG0				; ACC = RXFLG0
0x397D: 20 E4 14	jb	ACC_4, Label_039			; If (ACC_4 == H) then jumps (forward) hither: 0x3994

0x3980: 43 EF 04	orl	RXFLG0, #0x04				; RXFLG0 |= 0x04
0x3983: 20 31 04	jb	0x31, Label_037				; If ([0x31] == H) then jumps (forward) hither: 0x398A

0x3986: E5 EE		mov	A, RXCNT0				; ACC = RXCNT0
0x3988: 70 0E		jnz	Label_040				; If (ACC != 0) then jumps (forward) hither: 0x3998

Label_037:

0x398A: 53 EF FE	anl	RXFLG0, #0xFE				; RXFLG0 &= 0xFE
0x398D: 71 F1		acall	Function_003				; Calls (forward) this: 0x3BF1 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x03F1)

Label_038:

0x398F: 53 EF FB	anl	RXFLG0, #0xFB				; RXFLG0 &= 0xFB
0x3992: 01 FC		ajmp	Label_023				; Jumps (backward) hither: 0x38FC (PC += 2, PC(10-0) = 0x00FC)

Label_039:

0x3994: D2 33		setb	0x33					; [0x33] = H
0x3996: 21 3E		ajmp	Label_029				; Jumps (backward) hither: 0x393E (PC += 2, PC(10-0) = 0x013E)

Label_040:

0x3998: 71 53		acall	usb_ep0_recv1				; Calls (forward) this: 0x3B53 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0353)
0x399A: 43 EF 04	orl	RXFLG0, #0x04				; RXFLG0 |= 0x04
0x399D: 53 EF FE	anl	RXFLG0, #0xFE				; RXFLG0 &= 0xFE
0x39A0: 71 AD		acall	Function_001				; Calls (forward) this: 0x3BAD (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x03AD)
0x39A2: 21 8F		ajmp	Label_038				; Jumps (backward) hither: 0x398F (PC += 2, PC(10-0) = 0x018F)

Label_041:

0x39A4: 01 FC		ajmp	Label_023				; Jumps (backward) hither: 0x38FC (PC += 2, PC(10-0) = 0x00FC)

Label_042:

0x39A6: C2 C6		clr	P4_6					; P4_6 = L
0x39A8: 75 94 03	mov	PREWDT, #0x03				; PREWDT = 0x03
0x39AB: 75 81 27	mov	SP, #0x27				; SP = 0x27 {'''}
0x39AE: 51 30		acall	zero_everything				; Calls (forward) this: 0x3A30 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0230)
0x39B0: 75 12 05	mov	R2<#2>, #0x05				; R2<#2> = 0x05

Label_043:

0x39B3: 75 C0 FF	mov	P4, #0xFF				; P4 = 0xFF

Label_044:

0x39B6: 75 93 55	mov	CLRWDT, #0x55				; CLRWDT = 0x55 {'U'}
0x39B9: 20 C5 FA	jb	P4_5, Label_044				; If (P4_5 == H) then jumps (backward) hither: 0x39B6

0x39BC: 30 C6 07	jnb	P4_6, Label_046				; If (P4_6 == L) then jumps (forward) hither: 0x39C6

0x39BF: C2 C6		clr	P4_6					; P4_6 = L

Label_045:

0x39C1: 20 C5 EF	jb	P4_5, Label_043				; If (P4_5 == H) then jumps (backward) hither: 0x39B3

0x39C4: 21 C1		ajmp	Label_045				; Jumps (backward) hither: 0x39C1 (PC += 2, PC(10-0) = 0x01C1)

Label_046:

0x39C6: 74 02		mov	A, #0x02				; ACC = 0x02
0x39C8: 51 22		acall	Label_056				; Calls (forward) this: 0x3A22 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0222)
0x39CA: B4 33 10	cjne	A, #0x33, Label_047			; If (ACC != 0x33 {'3'}) then jumps (forward) hither: 0x39DD

0x39CD: 51 1D		acall	usb_start?				; Calls (forward) this: 0x3A1D (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x021D)
0x39CF: FC		mov	R4, A					; R4 = ACC
0x39D0: 51 1D		acall	usb_start?				; Calls (forward) this: 0x3A1D (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x021D)
0x39D2: FD		mov	R5, A					; R5 = ACC
0x39D3: BD 5A DD	cjne	R5, #0x5A, Label_043			; If (R5 != 0x5A {'Z'}) then jumps (backward) hither: 0x39B3

0x39D6: EC		mov	A, R4					; ACC = R4
0x39D7: 70 DA		jnz	Label_043				; If (ACC != 0) then jumps (backward) hither: 0x39B3

0x39D9: F1 1B		acall	Label_185				; Calls (forward) this: 0x3F1B (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x071B)
0x39DB: 21 B3		ajmp	Label_043				; Jumps (backward) hither: 0x39B3 (PC += 2, PC(10-0) = 0x01B3)

Label_047:

0x39DD: B4 55 16	cjne	A, #0x55, Label_050			; If (ACC != 0x55 {'U'}) then jumps (forward) hither: 0x39F6

0x39E0: 79 08		mov	R1, #0x08				; R1 = 0x08 {'\b'}
0x39E2: 7A 08		mov	R2, #0x08				; R2 = 0x08 {'\b'}

Label_048:

0x39E4: 51 1D		acall	usb_start?				; Calls (forward) this: 0x3A1D (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x021D)
0x39E6: F7		mov	@R1, A					; [R1] = ACC
0x39E7: 09		inc	R1					; ++R1
0x39E8: DA FA		djnz	R2, Label_048				; If (--R2 != 0) then jumps (backward) hither: 0x39E4

0x39EA: 79 08		mov	R1, #0x08				; R1 = 0x08 {'\b'}
0x39EC: 7A 08		mov	R2, #0x08				; R2 = 0x08 {'\b'}

Label_049:

0x39EE: E7		mov	A, @R1					; ACC = [R1]
0x39EF: B1 C4		acall	Function_015				; Calls (forward) this: 0x3DC4 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x05C4)
0x39F1: 09		inc	R1					; ++R1
0x39F2: DA FA		djnz	R2, Label_049				; If (--R2 != 0) then jumps (backward) hither: 0x39EE

0x39F4: 21 B3		ajmp	Label_043				; Jumps (backward) hither: 0x39B3 (PC += 2, PC(10-0) = 0x01B3)

Label_050:

0x39F6: B4 66 FD	cjne	A, #0x66, Label_050			; If (ACC != 0x66 {'f'}) then jumps hither: 0x39F6

0x39F9: 91 37		acall	Function_008				; Calls (forward) this: 0x3C37 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0437)

Label_051:

0x39FB: 70 FE		jnz	Label_051				; If (ACC != 0) then jumps hither: 0x39FB

0x39FD: 7A 08		mov	R2, #0x08				; R2 = 0x08 {'\b'}

Label_052:

0x39FF: D1 8D		acall	Function_016				; Calls (forward) this: 0x3E8D (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x068D)
0x3A01: 75 93 55	mov	CLRWDT, #0x55				; CLRWDT = 0x55 {'U'}
0x3A04: D3		setb	C					; CY = H
0x3A05: 75 C0 FF	mov	P4, #0xFF				; P4 = 0xFF

Label_053:

0x3A08: 30 C5 FD	jnb	P4_5, Label_053				; If (P4_5 == L) then jumps hither: 0x3A08 (waiting loop)

Label_054:

0x3A0B: 20 C5 FD	jb	P4_5, Label_054				; If (P4_5 == H) then jumps hither: 0x3A0B (waiting loop)

0x3A0E: 33		rlc	A					; ACC[76543210] = ACC[6543210C], CY = ACC[7]
0x3A0F: 92 C6		mov	P4_6, C					; P4_6 = CY
0x3A11: C3		clr	C					; CY = L
0x3A12: 70 F4		jnz	Label_053				; If (ACC != 0) then jumps (backward) hither: 0x3A08

Label_055:

0x3A14: 30 C5 FD	jnb	P4_5, Label_055				; If (P4_5 == L) then jumps hither: 0x3A14 (waiting loop)

0x3A17: C2 C6		clr	P4_6					; P4_6 = L
0x3A19: DA E4		djnz	R2, Label_052				; If (--R2 != 0) then jumps (backward) hither: 0x39FF

0x3A1B: 21 B3		ajmp	Label_043				; Jumps (backward) hither: 0x39B3 (PC += 2, PC(10-0) = 0x01B3)

;-------------------------------------------------------------------------------

usb_start?:

0x3A1D: 75 C0 FF	mov	P4, #0xFF				; P4 = 0xFF
0x3A20: 74 01		mov	A, #0x01				; ACC = 0x01

Label_056:

0x3A22: 30 C5 FD	jnb	P4_5, Label_056				; If (P4_5 == L) then jumps hither: 0x3A22 (waiting loop)

Label_057:

0x3A25: 20 C5 FD	jb	P4_5, Label_057				; If (P4_5 == H) then jumps hither: 0x3A25 (waiting loop)

0x3A28: A2 C6		mov	C, P4_6					; CY = P4_6
0x3A2A: 33		rlc	A					; ACC[76543210] = ACC[6543210C], CY = ACC[7]
0x3A2B: 50 F5		jnc	Label_056				; If (CY == L) then jumps (backward) hither: 0x3A22

0x3A2D: C2 C6		clr	P4_6					; P4_6 = L
0x3A2F: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

zero_everything:

0x3A30: E4		clr	A					; ACC = 0
0x3A31: F5 96		mov	MODE_FG, A				; MODE_FG = ACC
0x3A33: F5 F2		mov	DADDR, A				; DADDR = ACC
0x3A35: F5 26		mov	0x26, A					; [0x26] = ACC
0x3A37: 78 18		mov	R0, #0x18				; R0 = 0x18

Label_058:

0x3A39: F6		mov	@R0, A					; [R0] = ACC
0x3A3A: D8 FD		djnz	R0, Label_058				; If (--R0 != 0) then jumps (backward) hither: 0x3A39

0x3A3C: F5 A8		mov	IE, A					; IE = ACC
0x3A3E: F5 A9		mov	IE2, A					; IE2 = ACC
0x3A40: F5 DC		mov	IRQEN, A				; IRQEN = ACC
0x3A42: F5 DD		mov	IRQEN2, A				; IRQEN2 = ACC
0x3A44: F5 B8		mov	IP, A					; IP = ACC
0x3A46: F5 B9		mov	IP2, A					; IP2 = ACC
0x3A48: F5 DA		mov	IF, A					; IF = ACC
0x3A4A: F5 DB		mov	IF2, A					; IF2 = ACC
0x3A4C: F5 DE		mov	IRQFG, A				; IRQFG = ACC
0x3A4E: F5 DF		mov	IRQFG2, A				; IRQFG2 = ACC
0x3A50: F5 95		mov	WKT_CON, A				; WKT_CON = ACC
0x3A52: F5 9A		mov	P0CON, A				; P0CON = ACC
0x3A54: F5 9B		mov	P1CON, A				; P1CON = ACC
0x3A56: F5 9C		mov	P2CON, A				; P2CON = ACC
0x3A58: F5 9D		mov	P3CON, A				; P3CON = ACC
0x3A5A: 14		dec	A					; --ACC
0x3A5B: F5 80		mov	P0, A					; P0 = ACC
0x3A5D: F5 90		mov	P1, A					; P1 = ACC
0x3A5F: F5 A0		mov	P2, A					; P2 = ACC
0x3A61: F5 B0		mov	P3, A					; P3 = ACC
0x3A63: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

usb_ep0_send1:

0x3A64: 7B 00		mov	R3, #0x00				; R3 = 0x00 {'\0'}
0x3A66: E5 08		mov	A, R0<#1>				; ACC = R0<#1>
0x3A68: 70 12		jnz	Label_060				; If (ACC != 0) then jumps (forward) hither: 0x3A7C

0x3A6A: D2 30		setb	0x30					; [0x30] = H
0x3A6C: E5 09		mov	A, R1<#1>				; ACC = R1<#1>
0x3A6E: B4 05 04	cjne	A, #0x05, Label_059			; If (ACC != 0x05) then jumps (forward) hither: 0x3A75

0x3A71: 74 01		mov	A, #0x01				; ACC = 0x01
0x3A73: 41 87		ajmp	Label_062				; Jumps (forward) hither: 0x3A87 (PC += 2, PC(10-0) = 0x0287)

Label_059:

0x3A75: B4 09 5D	cjne	A, #0x09, Label_068			; If (ACC != 0x09 {'\t'}) then jumps (forward) hither: 0x3AD5

0x3A78: F5 22		mov	0x22, A					; [0x22] = ACC
0x3A7A: 41 86		ajmp	Label_061				; Jumps (forward) hither: 0x3A86 (PC += 2, PC(10-0) = 0x0286)

Label_060:

0x3A7C: 20 E7 59	jb	ACC_7, Label_069			; If (ACC_7 == H) then jumps (forward) hither: 0x3AD8

0x3A7F: D2 30		setb	0x30					; [0x30] = H
0x3A81: E5 09		mov	A, R1<#1>				; ACC = R1<#1>
0x3A83: B4 0A 09	cjne	A, #0x0A, Label_063			; If (ACC != 0x0A {'\n'}) then jumps (forward) hither: 0x3A8F

Label_061:

0x3A86: E4		clr	A					; ACC = 0

Label_062:

0x3A87: 8B EB		mov	TXCNT0, R3				; TXCNT0 = R3
0x3A89: F5 10		mov	R0<#2>, A				; R0<#2> = ACC
0x3A8B: 43 EC 01	orl	TXFLG0, #0x01				; TXFLG0 |= 0x01
0x3A8E: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_063:

0x3A8F: B4 09 43	cjne	A, #0x09, Label_068			; If (ACC != 0x09 {'\t'}) then jumps (forward) hither: 0x3AD5

0x3A92: E5 08		mov	A, R0<#1>				; ACC = R0<#1>
0x3A94: B4 21 3E	cjne	A, #0x21, Label_068			; If (ACC != 0x21 {'!'}) then jumps (forward) hither: 0x3AD5

0x3A97: E5 0B		mov	A, R3<#1>				; ACC = R3<#1>
0x3A99: B4 02 04	cjne	A, #0x02, Label_064			; If (ACC != 0x02) then jumps (forward) hither: 0x3AA0

0x3A9C: 74 02		mov	A, #0x02				; ACC = 0x02
0x3A9E: 41 87		ajmp	Label_062				; Jumps (backward) hither: 0x3A87 (PC += 2, PC(10-0) = 0x0287)

Label_064:

0x3AA0: B4 03 32	cjne	A, #0x03, Label_068			; If (ACC != 0x03) then jumps (forward) hither: 0x3AD5

0x3AA3: 91 00		acall	Function_005				; Calls (forward) this: 0x3C00 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0400)
0x3AA5: B4 05 0C	cjne	A, #0x05, Label_065			; If (ACC != 0x05) then jumps (forward) hither: 0x3AB4

0x3AA8: BE 06 2A	cjne	R6, #0x06, Label_068			; If (R6 != 0x06) then jumps (forward) hither: 0x3AD5

0x3AAB: BF 00 27	cjne	R7, #0x00, Label_068			; If (R7 != 0x00 {'\0'}) then jumps (forward) hither: 0x3AD5

0x3AAE: 74 04		mov	A, #0x04				; ACC = 0x04
0x3AB0: 7E 04		mov	R6, #0x04				; R6 = 0x04
0x3AB2: 41 87		ajmp	Label_062				; Jumps (backward) hither: 0x3A87 (PC += 2, PC(10-0) = 0x0287)

Label_065:

0x3AB4: B4 06 0C	cjne	A, #0x06, Label_066			; If (ACC != 0x06) then jumps (forward) hither: 0x3AC3

0x3AB7: BE 02 1B	cjne	R6, #0x02, Label_068			; If (R6 != 0x02) then jumps (forward) hither: 0x3AD5

0x3ABA: BF 08 18	cjne	R7, #0x08, Label_068			; If (R7 != 0x08 {'\b'}) then jumps (forward) hither: 0x3AD5

0x3ABD: 74 06		mov	A, #0x06				; ACC = 0x06
0x3ABF: 7E 00		mov	R6, #0x00				; R6 = 0x00 {'\0'}
0x3AC1: 41 87		ajmp	Label_062				; Jumps (backward) hither: 0x3A87 (PC += 2, PC(10-0) = 0x0287)

Label_066:

0x3AC3: B4 41 0F	cjne	A, #0x41, Label_068			; If (ACC != 0x41 {'A'}) then jumps (forward) hither: 0x3AD5

0x3AC6: B5 25 0C	cjne	A, 0x25, Label_068			; If (ACC != [0x25]) then jumps (forward) hither: 0x3AD5

0x3AC9: 91 37		acall	Function_008				; Calls (forward) this: 0x3C37 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0437)
0x3ACB: 60 02		jz	Label_067				; If (ACC == 0) then jumps (forward) hither: 0x3ACF

0x3ACD: 11 61		acall	load_0x37FF_to_0x27			; Calls (backward) this: 0x3861 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0061)

Label_067:

0x3ACF: B1 19		acall	Function_010				; Calls (forward) this: 0x3D19 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0519)
0x3AD1: 74 08		mov	A, #0x08				; ACC = 0x08 {'\b'}
0x3AD3: 41 87		ajmp	Label_062				; Jumps (backward) hither: 0x3A87 (PC += 2, PC(10-0) = 0x0287)

Label_068:

0x3AD5: D2 33		setb	0x33					; [0x33] = H
0x3AD7: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_069:

0x3AD8: D2 31		setb	0x31					; [0x31] = H
0x3ADA: 20 E5 34	jb	ACC_5, Label_073			; If (ACC_5 == H) then jumps (forward) hither: 0x3B11

0x3ADD: E5 09		mov	A, R1<#1>				; ACC = R1<#1>
0x3ADF: B4 06 F3	cjne	A, #0x06, Label_068			; If (ACC != 0x06) then jumps (backward) hither: 0x3AD5

0x3AE2: E5 0B		mov	A, R3<#1>				; ACC = R3<#1>
0x3AE4: 30 E5 02	jnb	ACC_5, Label_070			; If (ACC_5 == L) then jumps (forward) hither: 0x3AE9

0x3AE7: 94 1B		subb	A, #0x1B				; ACC -= 0x1B + CY {'\e'}

Label_070:

0x3AE9: 60 EA		jz	Label_068				; If (ACC == 0) then jumps (backward) hither: 0x3AD5

0x3AEB: B4 08 00	cjne	A, #0x08, Label_071			; If (ACC != 0x08 {'\b'}) then jumps (forward) hither: 0x3AEE

Label_071:

0x3AEE: 50 E5		jnc	Label_068				; If (CY == L) then jumps (backward) hither: 0x3AD5

0x3AF0: 23		rl	A					; ACC[76543210] = ACC[65432107]
0x3AF1: F8		mov	R0, A					; R0 = ACC
0x3AF2: 90 3F AA	mov	DPTR, #0x3FAA				; DPTR = 0x3FAA
0x3AF5: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x3AF6: FC		mov	R4, A					; R4 = ACC
0x3AF7: 7D 3F		mov	R5, #0x3F				; R5 = 0x3F {'?'}
0x3AF9: E8		mov	A, R0					; ACC = R0
0x3AFA: 04		inc	A					; ++ACC
0x3AFB: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x3AFC: FE		mov	R6, A					; R6 = ACC
0x3AFD: 7F 00		mov	R7, #0x00				; R7 = 0x00 {'\0'}
0x3AFF: E5 0F		mov	A, R7<#1>				; ACC = R7<#1>
0x3B01: 70 09		jnz	Label_072				; If (ACC != 0) then jumps (forward) hither: 0x3B0C

0x3B03: C3		clr	C					; CY = L
0x3B04: EE		mov	A, R6					; ACC = R6
0x3B05: 95 0E		subb	A, R6<#1>				; ACC -= R6<#1> + CY
0x3B07: 40 03		jc	Label_072				; If (CY == H) then jumps (forward) hither: 0x3B0C

0x3B09: E5 0E		mov	A, R6<#1>				; ACC = R6<#1>
0x3B0B: FE		mov	R6, A					; R6 = ACC

Label_072:

0x3B0C: 75 12 41	mov	R2<#2>, #0x41				; R2<#2> = 0x41 {'A'}
0x3B0F: 61 92		ajmp	Label_086				; Jumps (forward) hither: 0x3B92 (PC += 2, PC(10-0) = 0x0392)

Label_073:

0x3B11: B4 A1 C1	cjne	A, #0xA1, Label_068			; If (ACC != 0xA1) then jumps (backward) hither: 0x3AD5

0x3B14: D5 09 BE	djnz	R1<#1>, Label_068			; If (--R1<#1> != 0) then jumps (backward) hither: 0x3AD5

0x3B17: E5 0B		mov	A, R3<#1>				; ACC = R3<#1>
0x3B19: B4 03 B9	cjne	A, #0x03, Label_068			; If (ACC != 0x03) then jumps (backward) hither: 0x3AD5

0x3B1C: 91 00		acall	Function_005				; Calls (forward) this: 0x3C00 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0400)
0x3B1E: B4 05 19	cjne	A, #0x05, Label_075			; If (ACC != 0x05) then jumps (forward) hither: 0x3B3A

0x3B21: BE 06 B1	cjne	R6, #0x06, Label_068			; If (R6 != 0x06) then jumps (backward) hither: 0x3AD5

0x3B24: BF 00 AE	cjne	R7, #0x00, Label_068			; If (R7 != 0x00 {'\0'}) then jumps (backward) hither: 0x3AD5

0x3B27: 7A 04		mov	R2, #0x04				; R2 = 0x04

Label_074:

0x3B29: E5 13		mov	A, R3<#2>				; ACC = R3<#2>
0x3B2B: B4 52 A7	cjne	A, #0x52, Label_068			; If (ACC != 0x52 {'R'}) then jumps (backward) hither: 0x3AD5

0x3B2E: 7B 02		mov	R3, #0x02				; R3 = 0x02
0x3B30: 85 12 EA	mov	TXDAT0, R2<#2>				; TXDAT0 = R2<#2>
0x3B33: 75 EA 72	mov	TXDAT0, #0x72				; TXDAT0 = 0x72 {'r'}
0x3B36: 1E		dec	R6					; --R6
0x3B37: 1E		dec	R6					; --R6
0x3B38: 61 85		ajmp	Label_084				; Jumps (forward) hither: 0x3B85 (PC += 2, PC(10-0) = 0x0385)

Label_075:

0x3B3A: B4 06 0A	cjne	A, #0x06, Label_076			; If (ACC != 0x06) then jumps (forward) hither: 0x3B47

0x3B3D: BE 02 95	cjne	R6, #0x02, Label_068			; If (R6 != 0x02) then jumps (backward) hither: 0x3AD5

0x3B40: BF 08 92	cjne	R7, #0x08, Label_068			; If (R7 != 0x08 {'\b'}) then jumps (backward) hither: 0x3AD5

0x3B43: 7A 06		mov	R2, #0x06				; R2 = 0x06
0x3B45: 61 29		ajmp	Label_074				; Jumps (backward) hither: 0x3B29 (PC += 2, PC(10-0) = 0x0329)

Label_076:

0x3B47: B4 41 8B	cjne	A, #0x41, Label_068			; If (ACC != 0x41 {'A'}) then jumps (backward) hither: 0x3AD5

0x3B4A: B5 25 88	cjne	A, 0x25, Label_068			; If (ACC != [0x25]) then jumps (backward) hither: 0x3AD5

0x3B4D: 91 37		acall	Function_008				; Calls (forward) this: 0x3C37 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0437)
0x3B4F: 70 84		jnz	Label_068				; If (ACC != 0) then jumps (backward) hither: 0x3AD5

0x3B51: 61 92		ajmp	Label_086				; Jumps (forward) hither: 0x3B92 (PC += 2, PC(10-0) = 0x0392)

;-------------------------------------------------------------------------------

usb_ep0_recv1:

0x3B53: 78 08		mov	R0, #0x08				; R0 = 0x08 {'\b'}
0x3B55: E5 EE		mov	A, RXCNT0				; ACC = RXCNT0
0x3B57: F9		mov	R1, A					; R1 = ACC
0x3B58: FB		mov	R3, A					; R3 = ACC
0x3B59: 60 05		jz	Label_078				; If (ACC == 0) then jumps (forward) hither: 0x3B60

Label_077:

0x3B5B: A6 ED		mov	@R0, RXDAT0				; [R0] = RXDAT0
0x3B5D: 08		inc	R0					; ++R0
0x3B5E: D9 FB		djnz	R1, Label_077				; If (--R1 != 0) then jumps (backward) hither: 0x3B5B

Label_078:

0x3B60: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_000:

0x3B61: E5 10		mov	A, R0<#2>				; ACC = R0<#2>
0x3B63: 60 10		jz	Label_080				; If (ACC == 0) then jumps (forward) hither: 0x3B75

0x3B65: EF		mov	A, R7					; ACC = R7
0x3B66: 70 08		jnz	Label_079				; If (ACC != 0) then jumps (forward) hither: 0x3B70

0x3B68: EE		mov	A, R6					; ACC = R6
0x3B69: 60 0B		jz	Label_081				; If (ACC == 0) then jumps (forward) hither: 0x3B76

0x3B6B: B4 08 02	cjne	A, #0x08, Label_079			; If (ACC != 0x08 {'\b'}) then jumps (forward) hither: 0x3B70

0x3B6E: D2 34		setb	0x34					; [0x34] = H

Label_079:

0x3B70: E5 10		mov	A, R0<#2>				; ACC = R0<#2>
0x3B72: B4 05 09	cjne	A, #0x05, Label_083			; If (ACC != 0x05) then jumps (forward) hither: 0x3B7E

Label_080:

0x3B75: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_081:

0x3B76: 10 34 01	jbc	0x34, Label_082				; If ([0x34] == H) then [0x34] = L and jumps (forward) hither: 0x3B7A

0x3B79: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_082:

0x3B7A: 7B 00		mov	R3, #0x00				; R3 = 0x00 {'\0'}
0x3B7C: 41 86		ajmp	Label_061				; Jumps (backward) hither: 0x3A86 (PC += 2, PC(10-0) = 0x0286)

Label_083:

0x3B7E: B4 07 0E	cjne	A, #0x07, Label_085			; If (ACC != 0x07 {'\a'}) then jumps (forward) hither: 0x3B8F

0x3B81: 7A 08		mov	R2, #0x08				; R2 = 0x08 {'\b'}
0x3B83: 7B 00		mov	R3, #0x00				; R3 = 0x00 {'\0'}

Label_084:

0x3B85: 71 FB		acall	Function_004				; Calls (forward) this: 0x3BFB (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x03FB)
0x3B87: 71 9E		acall	Label_087				; Calls (forward) this: 0x3B9E (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x039E)
0x3B89: 91 2E		acall	Label_097				; Calls (forward) this: 0x3C2E (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x042E)
0x3B8B: 74 07		mov	A, #0x07				; ACC = 0x07 {'\a'}
0x3B8D: 41 87		ajmp	Label_062				; Jumps (backward) hither: 0x3A87 (PC += 2, PC(10-0) = 0x0287)

Label_085:

0x3B8F: B4 09 E3	cjne	A, #0x09, Label_080			; If (ACC != 0x09 {'\t'}) then jumps (backward) hither: 0x3B75

Label_086:

0x3B92: 71 98		acall	usb_ep0_send2				; Calls (forward) this: 0x3B98 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0398)
0x3B94: 74 09		mov	A, #0x09				; ACC = 0x09 {'\t'}
0x3B96: 41 87		ajmp	Label_062				; Jumps (backward) hither: 0x3A87 (PC += 2, PC(10-0) = 0x0287)

;-------------------------------------------------------------------------------

usb_ep0_send2:

0x3B98: B1 18		acall	Label_123				; Calls (forward) this: 0x3D18 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0518)
0x3B9A: 7A 08		mov	R2, #0x08				; R2 = 0x08 {'\b'}
0x3B9C: 7B 00		mov	R3, #0x00				; R3 = 0x00 {'\0'}

Label_087:

0x3B9E: EE		mov	A, R6					; ACC = R6
0x3B9F: 4F		orl	A, R7					; ACC |= R7
0x3BA0: 60 0A		jz	Label_088				; If (ACC == 0) then jumps (forward) hither: 0x3BAC

0x3BA2: EA		mov	A, R2					; ACC = R2
0x3BA3: 60 07		jz	Label_088				; If (ACC == 0) then jumps (forward) hither: 0x3BAC

0x3BA5: D1 8D		acall	Function_016				; Calls (forward) this: 0x3E8D (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x068D)
0x3BA7: F5 EA		mov	TXDAT0, A				; TXDAT0 = ACC
0x3BA9: 0B		inc	R3					; ++R3
0x3BAA: DA F2		djnz	R2, Label_087				; If (--R2 != 0) then jumps (backward) hither: 0x3B9E

Label_088:

0x3BAC: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_001:

0x3BAD: E5 10		mov	A, R0<#2>				; ACC = R0<#2>
0x3BAF: B4 02 20	cjne	A, #0x02, Label_091			; If (ACC != 0x02) then jumps (forward) hither: 0x3BD2

0x3BB2: E5 09		mov	A, R1<#1>				; ACC = R1<#1>
0x3BB4: F4		cpl	A					; ACC = ~ACC
0x3BB5: 55 11		anl	A, R1<#2>				; ACC &= R1<#2>
0x3BB7: 30 E2 14	jnb	ACC_2, Label_089			; If (ACC_2 == L) then jumps (forward) hither: 0x3BCE

0x3BBA: 53 F3 F7	anl	DFC, #0xF7				; DFC &= 0xF7
0x3BBD: 75 9E 60	mov	P4CON, #0x60				; P4CON = 0x60 {'`'}
0x3BC0: 75 C0 7F	mov	P4, #0x7F				; P4 = 0x7F {'^?'}
0x3BC3: 11 61		acall	load_0x37FF_to_0x27			; Calls (backward) this: 0x3861 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0061)
0x3BC5: 51 30		acall	zero_everything				; Calls (backward) this: 0x3A30 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0230)
0x3BC7: 75 F3 01	mov	DFC, #0x01				; DFC = 0x01
0x3BCA: D1 C5		acall	Function_017				; Calls (forward) this: 0x3EC5 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x06C5)
0x3BCC: 01 38		ajmp	Label_005				; Jumps (backward) hither: 0x3838 (PC += 2, PC(10-0) = 0x0038)

Label_089:

0x3BCE: 85 09 11	mov	R1<#2>, R1<#1>				; R1<#2> = R1<#1>

Label_090:

0x3BD1: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_091:

0x3BD2: B4 04 06	cjne	A, #0x04, Label_092			; If (ACC != 0x04) then jumps (forward) hither: 0x3BDB

0x3BD5: 91 0D		acall	Function_006				; Calls (forward) this: 0x3C0D (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x040D)
0x3BD7: 7B 00		mov	R3, #0x00				; R3 = 0x00 {'\0'}
0x3BD9: 41 86		ajmp	Label_061				; Jumps (backward) hither: 0x3A86 (PC += 2, PC(10-0) = 0x0286)

Label_092:

0x3BDB: B4 06 02	cjne	A, #0x06, Label_093			; If (ACC != 0x06) then jumps (forward) hither: 0x3BE0

0x3BDE: 81 D7		ajmp	Label_115				; Jumps (forward) hither: 0x3CD7 (PC += 2, PC(10-0) = 0x04D7)

Label_093:

0x3BE0: B4 08 EE	cjne	A, #0x08, Label_090			; If (ACC != 0x08 {'\b'}) then jumps (backward) hither: 0x3BD1

0x3BE3: A1 01		ajmp	Label_119				; Jumps (forward) hither: 0x3D01 (PC += 2, PC(10-0) = 0x0501)

;-------------------------------------------------------------------------------

Function_002:

0x3BE5: E4		clr	A					; ACC = 0
0x3BE6: 53 DB 67	anl	IF2, #0x67				; IF2 &= 0x67 {'g'}
0x3BE9: F5 E9		mov	CRWCON, A				; CRWCON = ACC
0x3BEB: 53 EC FD	anl	TXFLG0, #0xFD				; TXFLG0 &= 0xFD
0x3BEE: 53 EF FD	anl	RXFLG0, #0xFD				; RXFLG0 &= 0xFD

;-------------------------------------------------------------------------------

Function_003:

0x3BF1: E4		clr	A					; ACC = 0
0x3BF2: F5 10		mov	R0<#2>, A				; R0<#2> = ACC
0x3BF4: F5 12		mov	R2<#2>, A				; R2<#2> = ACC
0x3BF6: F5 26		mov	0x26, A					; [0x26] = ACC
0x3BF8: D2 37		setb	0x37					; [0x37] = H
0x3BFA: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_004:

0x3BFB: AC 14		mov	R4, R4<#2>				; R4 = R4<#2>
0x3BFD: AD 15		mov	R5, R5<#2>				; R5 = R5<#2>
0x3BFF: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_005:

0x3C00: AC 0C		mov	R4, R4<#1>				; R4 = R4<#1>
0x3C02: AD 0D		mov	R5, R5<#1>				; R5 = R5<#1>
0x3C04: AE 0E		mov	R6, R6<#1>				; R6 = R6<#1>
0x3C06: AF 0F		mov	R7, R7<#1>				; R7 = R7<#1>
0x3C08: E5 0A		mov	A, R2<#1>				; ACC = R2<#1>
0x3C0A: F5 12		mov	R2<#2>, A				; R2<#2> = ACC

Label_094:

0x3C0C: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_006:

0x3C0D: E5 08		mov	A, R0<#1>				; ACC = R0<#1>
0x3C0F: B4 05 FA	cjne	A, #0x05, Label_094			; If (ACC != 0x05) then jumps (backward) hither: 0x3C0C

0x3C12: E5 09		mov	A, R1<#1>				; ACC = R1<#1>
0x3C14: B4 77 02	cjne	A, #0x77, Label_095			; If (ACC != 0x77 {'w'}) then jumps (forward) hither: 0x3C19

0x3C17: 81 1B		ajmp	Label_096				; Jumps (forward) hither: 0x3C1B (PC += 2, PC(10-0) = 0x041B)

Label_095:

0x3C19: F5 13		mov	R3<#2>, A				; R3<#2> = ACC

Label_096:

0x3C1B: B4 52 1E	cjne	A, #0x52, Label_099			; If (ACC != 0x52 {'R'}) then jumps (forward) hither: 0x3C3C

0x3C1E: 91 37		acall	Function_008				; Calls (forward) this: 0x3C37 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0437)
0x3C20: 60 08		jz	Function_007				; If (ACC == 0) then jumps (forward) hither: 0x3C2A

0x3C22: E5 0B		mov	A, R3<#1>				; ACC = R3<#1>
0x3C24: B4 FC 0C	cjne	A, #0xFC, Label_098			; If (ACC != 0xFC) then jumps (forward) hither: 0x3C33

0x3C27: 75 0A 00	mov	R2<#1>, #0x00				; R2<#1> = 0x00 {'\0'}

;-------------------------------------------------------------------------------

Function_007:

0x3C2A: AC 0A		mov	R4, R2<#1>				; R4 = R2<#1>
0x3C2C: AD 0B		mov	R5, R3<#1>				; R5 = R3<#1>

Label_097:

0x3C2E: 8C 14		mov	R4<#2>, R4				; R4<#2> = R4
0x3C30: 8D 15		mov	R5<#2>, R5				; R5<#2> = R5
0x3C32: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_098:

0x3C33: E4		clr	A					; ACC = 0
0x3C34: F5 13		mov	R3<#2>, A				; R3<#2> = ACC
0x3C36: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_008:

0x3C37: E5 27		mov	A, 0x27					; ACC = [0x27]
0x3C39: 64 A5		xrl	A, #0xA5				; ACC ^= 0xA5
0x3C3B: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_099:

0x3C3C: B4 57 06	cjne	A, #0x57, Label_100			; If (ACC != 0x57 {'W'}) then jumps (forward) hither: 0x3C45

0x3C3F: 91 37		acall	Function_008				; Calls (backward) this: 0x3C37 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0437)
0x3C41: 70 F0		jnz	Label_098				; If (ACC != 0) then jumps (backward) hither: 0x3C33

0x3C43: 81 2A		ajmp	Function_007				; Jumps (backward) hither: 0x3C2A (PC += 2, PC(10-0) = 0x042A)

Label_100:

0x3C45: B4 56 09	cjne	A, #0x56, Label_101			; If (ACC != 0x56 {'V'}) then jumps (forward) hither: 0x3C51

0x3C48: 91 2A		acall	Function_007				; Calls (backward) this: 0x3C2A (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x042A)
0x3C4A: EC		mov	A, R4					; ACC = R4
0x3C4B: 4D		orl	A, R5					; ACC |= R5
0x3C4C: 70 E5		jnz	Label_098				; If (ACC != 0) then jumps (backward) hither: 0x3C33

0x3C4E: F5 18		mov	R0<#3>, A				; R0<#3> = ACC
0x3C50: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_101:

0x3C51: B4 77 27	cjne	A, #0x77, Label_107			; If (ACC != 0x77 {'w'}) then jumps (forward) hither: 0x3C7B

0x3C54: E5 13		mov	A, R3<#2>				; ACC = R3<#2>
0x3C56: B4 57 B3	cjne	A, #0x57, Label_094			; If (ACC != 0x57 {'W'}) then jumps (backward) hither: 0x3C0C

0x3C59: 71 FB		acall	Function_004				; Calls (backward) this: 0x3BFB (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x03FB)
0x3C5B: 7A 04		mov	R2, #0x04				; R2 = 0x04
0x3C5D: 79 0A		mov	R1, #0x0A				; R1 = 0x0A {'\n'}

Label_102:

0x3C5F: EE		mov	A, R6					; ACC = R6
0x3C60: 4F		orl	A, R7					; ACC |= R7
0x3C61: 60 0B		jz	Label_104				; If (ACC == 0) then jumps (forward) hither: 0x3C6E

0x3C63: E5 13		mov	A, R3<#2>				; ACC = R3<#2>
0x3C65: B4 57 08	cjne	A, #0x57, Label_105			; If (ACC != 0x57 {'W'}) then jumps (forward) hither: 0x3C70

0x3C68: E7		mov	A, @R1					; ACC = [R1]
0x3C69: B1 C4		acall	Function_015				; Calls (forward) this: 0x3DC4 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x05C4)

Label_103:

0x3C6B: 09		inc	R1					; ++R1
0x3C6C: DA F1		djnz	R2, Label_102				; If (--R2 != 0) then jumps (backward) hither: 0x3C5F

Label_104:

0x3C6E: 81 2E		ajmp	Label_097				; Jumps (backward) hither: 0x3C2E (PC += 2, PC(10-0) = 0x042E)

Label_105:

0x3C70: D1 8D		acall	Function_016				; Calls (forward) this: 0x3E8D (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x068D)
0x3C72: 67		xrl	A, @R1					; ACC ^= [R1]
0x3C73: 60 04		jz	Label_106				; If (ACC == 0) then jumps (forward) hither: 0x3C79

0x3C75: 74 EE		mov	A, #0xEE				; ACC = 0xEE
0x3C77: 42 18		orl	R0<#3>, A				; R0<#3> |= ACC

Label_106:

0x3C79: 80 F0		sjmp	Label_103				; Jumps (backward) hither: 0x3C6B

Label_107:

0x3C7B: B4 41 16	cjne	A, #0x41, Label_108			; If (ACC != 0x41 {'A'}) then jumps (forward) hither: 0x3C94

0x3C7E: E5 0A		mov	A, R2<#1>				; ACC = R2<#1>
0x3C80: B4 4B 11	cjne	A, #0x4B, Label_108			; If (ACC != 0x4B {'K'}) then jumps (forward) hither: 0x3C94

0x3C83: E5 0B		mov	A, R3<#1>				; ACC = R3<#1>
0x3C85: B4 49 0C	cjne	A, #0x49, Label_108			; If (ACC != 0x49 {'I'}) then jumps (forward) hither: 0x3C94

0x3C88: E5 0C		mov	A, R4<#1>				; ACC = R4<#1>
0x3C8A: B4 52 07	cjne	A, #0x52, Label_108			; If (ACC != 0x52 {'R'}) then jumps (forward) hither: 0x3C94

0x3C8D: E5 0D		mov	A, R5<#1>				; ACC = R5<#1>
0x3C8F: B4 41 02	cjne	A, #0x41, Label_108			; If (ACC != 0x41 {'A'}) then jumps (forward) hither: 0x3C94

0x3C92: F5 25		mov	0x25, A					; [0x25] = ACC

Label_108:

0x3C94: 54 DF		anl	A, #0xDF				; ACC &= 0xDF
0x3C96: B4 45 3D	cjne	A, #0x45, Label_114			; If (ACC != 0x45 {'E'}) then jumps (forward) hither: 0x3CD6

0x3C99: E5 0A		mov	A, R2<#1>				; ACC = R2<#1>
0x3C9B: B4 45 0D	cjne	A, #0x45, Label_109			; If (ACC != 0x45 {'E'}) then jumps (forward) hither: 0x3CAB

0x3C9E: 63 0B 4F	xrl	R3<#1>, #0x4F				; R3<#1> |= 0x4F {'O'}
0x3CA1: 63 0C 4C	xrl	R4<#1>, #0x4C				; R4<#1> |= 0x4C {'L'}
0x3CA4: 63 0D 43	xrl	R5<#1>, #0x43				; R5<#1> |= 0x43 {'C'}
0x3CA7: 91 CC		acall	Function_009				; Calls (forward) this: 0x3CCC (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x04CC)
0x3CA9: E1 1B		ajmp	Label_185				; Jumps (forward) hither: 0x3F1B (PC += 2, PC(10-0) = 0x071B)

Label_109:

0x3CAB: B4 5A 08	cjne	A, #0x5A, Label_111			; If (ACC != 0x5A {'Z'}) then jumps (forward) hither: 0x3CB6

0x3CAE: 7C FE		mov	R4, #0xFE				; R4 = 0xFE

Label_110:

0x3CB0: 7D 37		mov	R5, #0x37				; R5 = 0x37 {'7'}
0x3CB2: E5 0B		mov	A, R3<#1>				; ACC = R3<#1>
0x3CB4: A1 BE		ajmp	Function_014				; Jumps (forward) hither: 0x3DBE (PC += 2, PC(10-0) = 0x05BE)

Label_111:

0x3CB6: B4 A5 07	cjne	A, #0xA5, Label_112			; If (ACC != 0xA5) then jumps (forward) hither: 0x3CC0

0x3CB9: B5 27 1A	cjne	A, 0x27, Label_114			; If (ACC != [0x27]) then jumps (forward) hither: 0x3CD6

0x3CBC: 7C FF		mov	R4, #0xFF				; R4 = 0xFF
0x3CBE: 81 B0		ajmp	Label_110				; Jumps (backward) hither: 0x3CB0 (PC += 2, PC(10-0) = 0x04B0)

Label_112:

0x3CC0: B4 FF 06	cjne	A, #0xFF, Label_113			; If (ACC != 0xFF) then jumps (forward) hither: 0x3CC9

0x3CC3: 91 37		acall	Function_008				; Calls (backward) this: 0x3C37 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0437)
0x3CC5: 70 0F		jnz	Label_114				; If (ACC != 0) then jumps (forward) hither: 0x3CD6

0x3CC7: A1 2C		ajmp	Label_125				; Jumps (forward) hither: 0x3D2C (PC += 2, PC(10-0) = 0x052C)

Label_113:

0x3CC9: B4 05 0A	cjne	A, #0x05, Label_114			; If (ACC != 0x05) then jumps (forward) hither: 0x3CD6

;-------------------------------------------------------------------------------

Function_009:

0x3CCC: 85 0B 1D	mov	R5<#3>, R3<#1>				; R5<#3> = R3<#1>
0x3CCF: 85 0C 1E	mov	R6<#3>, R4<#1>				; R6<#3> = R4<#1>
0x3CD2: 85 0D 1F	mov	R7<#3>, R5<#1>				; R7<#3> = R5<#1>
0x3CD5: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_114:

0x3CD6: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_115:

0x3CD7: E5 13		mov	A, R3<#2>				; ACC = R3<#2>
0x3CD9: 54 FE		anl	A, #0xFE				; ACC &= 0xFE
0x3CDB: B4 56 1F	cjne	A, #0x56, Label_118			; If (ACC != 0x56 {'V'}) then jumps (forward) hither: 0x3CFD

0x3CDE: 10 37 08	jbc	0x37, Label_117				; If ([0x37] == H) then [0x37] = L and jumps (forward) hither: 0x3CE9

0x3CE1: EB		mov	A, R3					; ACC = R3
0x3CE2: 79 08		mov	R1, #0x08				; R1 = 0x08 {'\b'}

Label_116:

0x3CE4: FA		mov	R2, A					; R2 = ACC
0x3CE5: 71 FB		acall	Function_004				; Calls (backward) this: 0x3BFB (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x03FB)
0x3CE7: 81 5F		ajmp	Label_102				; Jumps (backward) hither: 0x3C5F (PC += 2, PC(10-0) = 0x045F)

Label_117:

0x3CE9: E5 09		mov	A, R1<#1>				; ACC = R1<#1>
0x3CEB: 64 20		xrl	A, #0x20				; ACC ^= 0x20 {' '}
0x3CED: B5 13 0D	cjne	A, R3<#2>, Label_118			; If (ACC != R3<#2>) then jumps (forward) hither: 0x3CFD

0x3CF0: E5 08		mov	A, R0<#1>				; ACC = R0<#1>
0x3CF2: B4 06 08	cjne	A, #0x06, Label_118			; If (ACC != 0x06) then jumps (forward) hither: 0x3CFD

0x3CF5: 79 0A		mov	R1, #0x0A				; R1 = 0x0A {'\n'}
0x3CF7: EB		mov	A, R3					; ACC = R3
0x3CF8: C3		clr	C					; CY = L
0x3CF9: 94 02		subb	A, #0x02				; ACC -= 0x02 + CY
0x3CFB: 50 E7		jnc	Label_116				; If (CY == L) then jumps (backward) hither: 0x3CE4

Label_118:

0x3CFD: 75 13 00	mov	R3<#2>, #0x00				; R3<#2> = 0x00 {'\0'}
0x3D00: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_119:

0x3D01: EB		mov	A, R3					; ACC = R3
0x3D02: 60 14		jz	Label_123				; If (ACC == 0) then jumps (forward) hither: 0x3D18

0x3D04: B4 08 00	cjne	A, #0x08, Label_120			; If (ACC != 0x08 {'\b'}) then jumps (forward) hither: 0x3D07

Label_120:

0x3D07: 40 02		jc	Label_121				; If (CY == H) then jumps (forward) hither: 0x3D0B

0x3D09: 74 08		mov	A, #0x08				; ACC = 0x08 {'\b'}

Label_121:

0x3D0B: FA		mov	R2, A					; R2 = ACC
0x3D0C: 79 08		mov	R1, #0x08				; R1 = 0x08 {'\b'}

Label_122:

0x3D0E: EE		mov	A, R6					; ACC = R6
0x3D0F: 4F		orl	A, R7					; ACC |= R7
0x3D10: 60 06		jz	Label_123				; If (ACC == 0) then jumps (forward) hither: 0x3D18

0x3D12: E7		mov	A, @R1					; ACC = [R1]
0x3D13: B1 C4		acall	Function_015				; Calls (forward) this: 0x3DC4 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x05C4)
0x3D15: 09		inc	R1					; ++R1
0x3D16: DA F6		djnz	R2, Label_122				; If (--R2 != 0) then jumps (backward) hither: 0x3D0E

Label_123:

0x3D18: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_010:

0x3D19: 91 37		acall	Function_008				; Calls (backward) this: 0x3C37 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0437)
0x3D1B: 70 FB		jnz	Label_123				; If (ACC != 0) then jumps (backward) hither: 0x3D18

0x3D1D: ED		mov	A, R5					; ACC = R5
0x3D1E: B4 5A F7	cjne	A, #0x5A, Label_123			; If (ACC != 0x5A {'Z'}) then jumps (backward) hither: 0x3D18

0x3D21: EC		mov	A, R4					; ACC = R4
0x3D22: B4 FE 04	cjne	A, #0xFE, Label_124			; If (ACC != 0xFE) then jumps (forward) hither: 0x3D29

0x3D25: 74 55		mov	A, #0x55				; ACC = 0x55 {'U'}
0x3D27: A1 3C		ajmp	SSP_start				; Jumps (forward) hither: 0x3D3C (PC += 2, PC(10-0) = 0x053C)

Label_124:

0x3D29: B4 FF 04	cjne	A, #0xFF, Function_011			; If (ACC != 0xFF) then jumps (forward) hither: 0x3D30

Label_125:

0x3D2C: 74 AA		mov	A, #0xAA				; ACC = 0xAA
0x3D2E: A1 3C		ajmp	SSP_start				; Jumps (forward) hither: 0x3D3C (PC += 2, PC(10-0) = 0x053C)

;-------------------------------------------------------------------------------

Function_011:

0x3D30: 54 3C		anl	A, #0x3C				; ACC &= 0x3C {'<'}
0x3D32: F5 F7		mov	XPAGE, A				; XPAGE = ACC
0x3D34: 75 BE 00	mov	IB_OFFSET, #0x00			; IB_OFFSET = 0x00 {'\0'}
0x3D37: 75 BF 00	mov	IB_DATA, #0x00				; IB_DATA = 0x00 {'\0'}
0x3D3A: 74 E6		mov	A, #0xE6				; ACC = 0xE6

;-------------------------------------------------------------------------------

SSP_start:

0x3D3C: F5 B3		mov	IB_CON1, A				; IB_CON1 = ACC
0x3D3E: 75 93 55	mov	CLRWDT, #0x55				; CLRWDT = 0x55 {'U'}
0x3D41: 75 1C 05	mov	R4<#3>, #0x05				; R4<#3> = 0x05
0x3D44: E5 12		mov	A, R2<#2>				; ACC = R2<#2>
0x3D46: B4 05 55	cjne	A, #0x05, Label_135			; If (ACC != 0x05) then jumps (forward) hither: 0x3D9E

Label_126:

0x3D49: 85 1C B4	mov	IB_CON2, R4<#3>				; IB_CON2 = R4<#3>
0x3D4C: 75 1C 0A	mov	R4<#3>, #0x0A				; R4<#3> = 0x0A {'\n'}
0x3D4F: 85 1D B5	mov	IB_CON3, R5<#3>				; IB_CON3 = R5<#3>
0x3D52: 85 1E B6	mov	IB_CON4, R6<#3>				; IB_CON4 = R6<#3>
0x3D55: E5 B3		mov	A, IB_CON1				; ACC = IB_CON1
0x3D57: B4 E6 1A	cjne	A, #0xE6, Label_131			; If (ACC != 0xE6) then jumps (forward) hither: 0x3D74

0x3D5A: E5 F7		mov	A, XPAGE				; ACC = XPAGE
0x3D5C: 24 C8		add	A, #0xC8				; ACC += 0xC8
0x3D5E: 50 2B		jnc	Label_132				; If (CY == L) then jumps (forward) hither: 0x3D8B

0x3D60: 80 30		sjmp	Label_133				; Jumps (forward) hither: 0x3D92

Label_127:

0x3D62: E5 BE		mov	A, IB_OFFSET				; ACC = IB_OFFSET
0x3D64: B4 03 00	cjne	A, #0x03, Label_128			; If (ACC != 0x03) then jumps (forward) hither: 0x3D67

Label_128:

0x3D67: 50 22		jnc	Label_132				; If (CY == L) then jumps (forward) hither: 0x3D8B

0x3D69: 04		inc	A					; ++ACC
0x3D6A: 83		movc	A, @A+PC				; ACC = ROM[PC + 1 + ACC]
0x3D6B: 80 02		sjmp	Label_130				; Jumps (forward) hither: 0x3D6F

Label_129:

0x3D6D: 38		addc	A, R0					; ACC += R0 + CY
0x3D6E: 00		nop

Label_130:

0x3D6F: B5 BF 20	cjne	A, IB_DATA, Label_133			; If (ACC != IB_DATA) then jumps (forward) hither: 0x3D92

0x3D72: A1 8B		ajmp	Label_132				; Jumps (forward) hither: 0x3D8B (PC += 2, PC(10-0) = 0x058B)

Label_131:

0x3D74: B4 6E 14	cjne	A, #0x6E, Label_132			; If (ACC != 0x6E {'n'}) then jumps (forward) hither: 0x3D8B

0x3D77: E5 F7		mov	A, XPAGE				; ACC = XPAGE
0x3D79: 60 E7		jz	Label_127				; If (ACC == 0) then jumps (backward) hither: 0x3D62

0x3D7B: 24 C8		add	A, #0xC8				; ACC += 0xC8
0x3D7D: 50 0C		jnc	Label_132				; If (CY == L) then jumps (forward) hither: 0x3D8B

0x3D7F: 24 F9		add	A, #0xF9				; ACC += 0xF9
0x3D81: 50 0F		jnc	Label_133				; If (CY == L) then jumps (forward) hither: 0x3D92

0x3D83: 70 0D		jnz	Label_133				; If (ACC != 0) then jumps (forward) hither: 0x3D92

0x3D85: E5 BE		mov	A, IB_OFFSET				; ACC = IB_OFFSET
0x3D87: 24 41		add	A, #0x41				; ACC += 0x41 {'A'}
0x3D89: 50 07		jnc	Label_133				; If (CY == L) then jumps (forward) hither: 0x3D92

Label_132:

0x3D8B: 85 1F B7	mov	IB_CON5, R7<#3>				; IB_CON5 = R7<#3>
0x3D8E: 00		nop
0x3D8F: 00		nop
0x3D90: 00		nop
0x3D91: 00		nop

Label_133:

0x3D92: E4		clr	A					; ACC = 0
0x3D93: F5 B3		mov	IB_CON1, A				; IB_CON1 = ACC
0x3D95: F5 B4		mov	IB_CON2, A				; IB_CON2 = ACC
0x3D97: F5 B5		mov	IB_CON3, A				; IB_CON3 = ACC
0x3D99: F5 B6		mov	IB_CON4, A				; IB_CON4 = ACC
0x3D9B: F5 B7		mov	IB_CON5, A				; IB_CON5 = ACC

Label_134:

0x3D9D: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_135:

0x3D9E: B4 06 02	cjne	A, #0x06, Label_136			; If (ACC != 0x06) then jumps (forward) hither: 0x3DA3

0x3DA1: A1 49		ajmp	Label_126				; Jumps (backward) hither: 0x3D49 (PC += 2, PC(10-0) = 0x0549)

Label_136:

0x3DA3: B4 41 F7	cjne	A, #0x41, Label_134			; If (ACC != 0x41 {'A'}) then jumps (backward) hither: 0x3D9D

0x3DA6: A1 49		ajmp	Label_126				; Jumps (backward) hither: 0x3D49 (PC += 2, PC(10-0) = 0x0549)

;-------------------------------------------------------------------------------

Function_012:

0x3DA8: EE		mov	A, R6					; ACC = R6
0x3DA9: 70 01		jnz	Label_137				; If (ACC != 0) then jumps (forward) hither: 0x3DAC

0x3DAB: 1F		dec	R7					; --R7

Label_137:

0x3DAC: 1E		dec	R6					; --R6
0x3DAD: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_013:

0x3DAE: 7D 00		mov	R5, #0x00				; R5 = 0x00 {'\0'}
0x3DB0: 7C 01		mov	R4, #0x01				; R4 = 0x01
0x3DB2: 74 38		mov	A, #0x38				; ACC = 0x38 {'8'}
0x3DB4: B1 BE		acall	Function_014				; Calls (forward) this: 0x3DBE (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x05BE)
0x3DB6: 74 00		mov	A, #0x00				; ACC = 0x00 {'\0'}
0x3DB8: B1 BE		acall	Function_014				; Calls (forward) this: 0x3DBE (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x05BE)
0x3DBA: 7C 00		mov	R4, #0x00				; R4 = 0x00 {'\0'}
0x3DBC: 74 02		mov	A, #0x02				; ACC = 0x02

;-------------------------------------------------------------------------------

Function_014:

0x3DBE: F5 BF		mov	IB_DATA, A				; IB_DATA = ACC
0x3DC0: 8D F7		mov	XPAGE, R5				; XPAGE = R5
0x3DC2: C1 10		ajmp	Label_147				; Jumps (forward) hither: 0x3E10 (PC += 2, PC(10-0) = 0x0610)

;-------------------------------------------------------------------------------

Function_015:

0x3DC4: F5 BF		mov	IB_DATA, A				; IB_DATA = ACC
0x3DC6: E5 12		mov	A, R2<#2>				; ACC = R2<#2>
0x3DC8: B4 41 02	cjne	A, #0x41, Label_138			; If (ACC != 0x41 {'A'}) then jumps (forward) hither: 0x3DCD

0x3DCB: C1 08		ajmp	Label_145				; Jumps (forward) hither: 0x3E08 (PC += 2, PC(10-0) = 0x0608)

Label_138:

0x3DCD: BD FC 0A	cjne	R5, #0xFC, Label_139			; If (R5 != 0xFC) then jumps (forward) hither: 0x3DDA

0x3DD0: 75 F7 3F	mov	XPAGE, #0x3F				; XPAGE = 0x3F {'?'}
0x3DD3: EC		mov	A, R4					; ACC = R4
0x3DD4: 44 C0		orl	A, #0xC0				; ACC |= 0xC0
0x3DD6: F5 BE		mov	IB_OFFSET, A				; IB_OFFSET = ACC
0x3DD8: C1 12		ajmp	Label_148				; Jumps (forward) hither: 0x3E12 (PC += 2, PC(10-0) = 0x0612)

Label_139:

0x3DDA: ED		mov	A, R5					; ACC = R5
0x3DDB: 70 0F		jnz	Label_141				; If (ACC != 0) then jumps (forward) hither: 0x3DEC

0x3DDD: EC		mov	A, R4					; ACC = R4
0x3DDE: B4 03 00	cjne	A, #0x03, Label_140			; If (ACC != 0x03) then jumps (forward) hither: 0x3DE1

Label_140:

0x3DE1: 50 25		jnc	Label_145				; If (CY == L) then jumps (forward) hither: 0x3E08

0x3DE3: 75 F7 37	mov	XPAGE, #0x37				; XPAGE = 0x37 {'7'}
0x3DE6: 24 FB		add	A, #0xFB				; ACC += 0xFB
0x3DE8: F5 BE		mov	IB_OFFSET, A				; IB_OFFSET = ACC
0x3DEA: C1 12		ajmp	Label_148				; Jumps (forward) hither: 0x3E12 (PC += 2, PC(10-0) = 0x0612)

Label_141:

0x3DEC: B4 FF 09	cjne	A, #0xFF, Label_142			; If (ACC != 0xFF) then jumps (forward) hither: 0x3DF8

0x3DEF: 30 30 16	jnb	0x30, Label_145				; If ([0x30] == L) then jumps (forward) hither: 0x3E08

0x3DF2: EC		mov	A, R4					; ACC = R4
0x3DF3: 20 E7 12	jb	ACC_7, Label_145			; If (ACC_7 == H) then jumps (forward) hither: 0x3E08

0x3DF6: C1 19		ajmp	Label_150				; Jumps (forward) hither: 0x3E19 (PC += 2, PC(10-0) = 0x0619)

Label_142:

0x3DF8: B4 38 00	cjne	A, #0x38, Label_143			; If (ACC != 0x38 {'8'}) then jumps (forward) hither: 0x3DFB

Label_143:

0x3DFB: 50 1C		jnc	Label_150				; If (CY == L) then jumps (forward) hither: 0x3E19

0x3DFD: B4 37 08	cjne	A, #0x37, Label_145			; If (ACC != 0x37 {'7'}) then jumps (forward) hither: 0x3E08

0x3E00: BC FA 00	cjne	R4, #0xFA, Label_144			; If (R4 != 0xFA) then jumps (forward) hither: 0x3E03

Label_144:

0x3E03: 40 03		jc	Label_145				; If (CY == H) then jumps (forward) hither: 0x3E08

0x3E05: BC FA 11	cjne	R4, #0xFA, Label_150			; If (R4 != 0xFA) then jumps (forward) hither: 0x3E19

Label_145:

0x3E08: ED		mov	A, R5					; ACC = R5
0x3E09: B4 40 00	cjne	A, #0x40, Label_146			; If (ACC != 0x40 {'@'}) then jumps (forward) hither: 0x3E0C

Label_146:

0x3E0C: 50 26		jnc	Label_154				; If (CY == L) then jumps (forward) hither: 0x3E34

0x3E0E: F5 F7		mov	XPAGE, A				; XPAGE = ACC

Label_147:

0x3E10: 8C BE		mov	IB_OFFSET, R4				; IB_OFFSET = R4

Label_148:

0x3E12: 74 6E		mov	A, #0x6E				; ACC = 0x6E {'n'}

Label_149:

0x3E14: B1 3C		acall	SSP_start				; Calls (backward) this: 0x3D3C (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x053C)
0x3E16: 75 F7 00	mov	XPAGE, #0x00				; XPAGE = 0x00 {'\0'}

Label_150:

0x3E19: B1 A8		acall	Function_012				; Calls (backward) this: 0x3DA8 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x05A8)
0x3E1B: C1 B7		ajmp	Label_174				; Jumps (forward) hither: 0x3EB7 (PC += 2, PC(10-0) = 0x06B7)

Label_151:

0x3E1D: B4 FE 07	cjne	A, #0xFE, Label_152			; If (ACC != 0xFE) then jumps (forward) hither: 0x3E27

0x3E20: EC		mov	A, R4					; ACC = R4
0x3E21: F8		mov	R0, A					; R0 = ACC
0x3E22: E5 BF		mov	A, IB_DATA				; ACC = IB_DATA
0x3E24: F6		mov	@R0, A					; [R0] = ACC
0x3E25: C1 19		ajmp	Label_150				; Jumps (backward) hither: 0x3E19 (PC += 2, PC(10-0) = 0x0619)

Label_152:

0x3E27: B4 FD 08	cjne	A, #0xFD, Label_153			; If (ACC != 0xFD) then jumps (forward) hither: 0x3E32

0x3E2A: EC		mov	A, R4					; ACC = R4
0x3E2B: F8		mov	R0, A					; R0 = ACC
0x3E2C: 75 F7 00	mov	XPAGE, #0x00				; XPAGE = 0x00 {'\0'}
0x3E2F: E5 BF		mov	A, IB_DATA				; ACC = IB_DATA
0x3E31: F2		movx	@R0, A					; XRAM[R0] = ACC

Label_153:

0x3E32: C1 19		ajmp	Label_150				; Jumps (backward) hither: 0x3E19 (PC += 2, PC(10-0) = 0x0619)

Label_154:

0x3E34: B4 FF E6	cjne	A, #0xFF, Label_151			; If (ACC != 0xFF) then jumps (backward) hither: 0x3E1D

0x3E37: EC		mov	A, R4					; ACC = R4
0x3E38: 33		rlc	A					; ACC[76543210] = ACC[6543210C], CY = ACC[7]
0x3E39: 74 5A		mov	A, #0x5A				; ACC = 0x5A {'Z'}
0x3E3B: 40 01		jc	Label_155				; If (CY == H) then jumps (forward) hither: 0x3E3E

0x3E3D: C4		swap	A					; ACC[76543210] = ACC[32107654]

Label_155:

0x3E3E: 8C BE		mov	IB_OFFSET, R4				; IB_OFFSET = R4
0x3E40: C1 14		ajmp	Label_149				; Jumps (backward) hither: 0x3E14 (PC += 2, PC(10-0) = 0x0614)

Label_156:

0x3E42: E5 83		mov	A, DPH					; ACC = DPH
0x3E44: 70 0C		jnz	Label_158				; If (ACC != 0) then jumps (forward) hither: 0x3E52

0x3E46: E5 82		mov	A, DPL					; ACC = DPL
0x3E48: B4 03 00	cjne	A, #0x03, Label_157			; If (ACC != 0x03) then jumps (forward) hither: 0x3E4B

Label_157:

0x3E4B: 50 4B		jnc	Label_167				; If (CY == L) then jumps (forward) hither: 0x3E98

0x3E4D: 90 37 FB	mov	DPTR, #0x37FB				; DPTR = 0x37FB
0x3E50: C1 8A		ajmp	Label_166				; Jumps (forward) hither: 0x3E8A (PC += 2, PC(10-0) = 0x068A)

Label_158:

0x3E52: B4 FF 0A	cjne	A, #0xFF, Label_159			; If (ACC != 0xFF) then jumps (forward) hither: 0x3E5F

0x3E55: 30 31 40	jnb	0x31, Label_167				; If ([0x31] == L) then jumps (forward) hither: 0x3E98

0x3E58: E5 82		mov	A, DPL					; ACC = DPL
0x3E5A: 20 E7 3B	jb	ACC_7, Label_167			; If (ACC_7 == H) then jumps (forward) hither: 0x3E98

0x3E5D: C1 86		ajmp	Label_164				; Jumps (forward) hither: 0x3E86 (PC += 2, PC(10-0) = 0x0686)

Label_159:

0x3E5F: B4 FC 15	cjne	A, #0xFC, Label_161			; If (ACC != 0xFC) then jumps (forward) hither: 0x3E77

0x3E62: 75 83 3F	mov	DPH, #0x3F				; DPH = 0x3F {'?'}
0x3E65: EC		mov	A, R4					; ACC = R4
0x3E66: 30 E7 06	jnb	ACC_7, Label_160			; If (ACC_7 == L) then jumps (forward) hither: 0x3E6F

0x3E69: 44 C0		orl	A, #0xC0				; ACC |= 0xC0
0x3E6B: F5 82		mov	DPL, A					; DPL = ACC
0x3E6D: C1 89		ajmp	Label_165				; Jumps (forward) hither: 0x3E89 (PC += 2, PC(10-0) = 0x0689)

Label_160:

0x3E6F: 54 03		anl	A, #0x03				; ACC &= 0x03
0x3E71: FC		mov	R4, A					; R4 = ACC
0x3E72: 24 18		add	A, #0x18				; ACC += 0x18
0x3E74: F8		mov	R0, A					; R0 = ACC
0x3E75: C1 AD		ajmp	Label_171				; Jumps (forward) hither: 0x3EAD (PC += 2, PC(10-0) = 0x06AD)

Label_161:

0x3E77: B4 38 00	cjne	A, #0x38, Label_162			; If (ACC != 0x38 {'8'}) then jumps (forward) hither: 0x3E7A

Label_162:

0x3E7A: 50 0A		jnc	Label_164				; If (CY == L) then jumps (forward) hither: 0x3E86

0x3E7C: B4 37 19	cjne	A, #0x37, Label_167			; If (ACC != 0x37 {'7'}) then jumps (forward) hither: 0x3E98

0x3E7F: E5 82		mov	A, DPL					; ACC = DPL
0x3E81: B4 FA 00	cjne	A, #0xFA, Label_163			; If (ACC != 0xFA) then jumps (forward) hither: 0x3E84

Label_163:

0x3E84: 40 12		jc	Label_167				; If (CY == H) then jumps (forward) hither: 0x3E98

Label_164:

0x3E86: 90 37 FA	mov	DPTR, #0x37FA				; DPTR = 0x37FA

Label_165:

0x3E89: E4		clr	A					; ACC = 0

Label_166:

0x3E8A: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x3E8B: C1 B7		ajmp	Label_174				; Jumps (forward) hither: 0x3EB7 (PC += 2, PC(10-0) = 0x06B7)

;-------------------------------------------------------------------------------

Function_016:

0x3E8D: B1 A8		acall	Function_012				; Calls (backward) this: 0x3DA8 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x05A8)
0x3E8F: 8C 82		mov	DPL, R4					; DPL = R4
0x3E91: 8D 83		mov	DPH, R5					; DPH = R5
0x3E93: E5 12		mov	A, R2<#2>				; ACC = R2<#2>
0x3E95: B4 41 AA	cjne	A, #0x41, Label_156			; If (ACC != 0x41 {'A'}) then jumps (backward) hither: 0x3E42

Label_167:

0x3E98: E5 83		mov	A, DPH					; ACC = DPH
0x3E9A: B4 40 00	cjne	A, #0x40, Label_168			; If (ACC != 0x40 {'@'}) then jumps (forward) hither: 0x3E9D

Label_168:

0x3E9D: 50 04		jnc	Label_169				; If (CY == L) then jumps (forward) hither: 0x3EA3

0x3E9F: E4		clr	A					; ACC = 0
0x3EA0: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x3EA1: C1 B7		ajmp	Label_174				; Jumps (forward) hither: 0x3EB7 (PC += 2, PC(10-0) = 0x06B7)

Label_169:

0x3EA3: B4 FF 02	cjne	A, #0xFF, Label_170			; If (ACC != 0xFF) then jumps (forward) hither: 0x3EA8

0x3EA6: C1 B6		ajmp	Label_173				; Jumps (forward) hither: 0x3EB6 (PC += 2, PC(10-0) = 0x06B6)

Label_170:

0x3EA8: B4 FE 05	cjne	A, #0xFE, Label_172			; If (ACC != 0xFE) then jumps (forward) hither: 0x3EB0

0x3EAB: A8 82		mov	R0, DPL					; R0 = DPL

Label_171:

0x3EAD: E6		mov	A, @R0					; ACC = [R0]
0x3EAE: C1 B7		ajmp	Label_174				; Jumps (forward) hither: 0x3EB7 (PC += 2, PC(10-0) = 0x06B7)

Label_172:

0x3EB0: B4 FD 04	cjne	A, #0xFD, Label_174			; If (ACC != 0xFD) then jumps (forward) hither: 0x3EB7

0x3EB3: 75 83 00	mov	DPH, #0x00				; DPH = 0x00 {'\0'}

Label_173:

0x3EB6: E0		movx	A, @DPTR				; ACC = XRAM[DPTR]

Label_174:

0x3EB7: 0C		inc	R4					; ++R4
0x3EB8: BC 00 09	cjne	R4, #0x00, Label_176			; If (R4 != 0x00 {'\0'}) then jumps (forward) hither: 0x3EC4

0x3EBB: 0D		inc	R5					; ++R5
0x3EBC: BD FD 01	cjne	R5, #0xFD, Label_175			; If (R5 != 0xFD) then jumps (forward) hither: 0x3EC0

0x3EBF: 1D		dec	R5					; --R5

Label_175:

0x3EC0: BD 00 01	cjne	R5, #0x00, Label_176			; If (R5 != 0x00 {'\0'}) then jumps (forward) hither: 0x3EC4

0x3EC3: 1D		dec	R5					; --R5

Label_176:

0x3EC4: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_017:

0x3EC5: D1 C7		acall	Label_177				; Calls (forward) this: 0x3EC7 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x06C7)

Label_177:

0x3EC7: D8 FE		djnz	R0, Label_177				; If (--R0 != 0) then jumps hither: 0x3EC7 (waiting loop)

0x3EC9: 75 93 55	mov	CLRWDT, #0x55				; CLRWDT = 0x55 {'U'}
0x3ECC: D9 F9		djnz	R1, Label_177				; If (--R1 != 0) then jumps (backward) hither: 0x3EC7

0x3ECE: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_178:

0x3ECF: 78 06		mov	R0, #0x06				; R0 = 0x06
0x3ED1: E4		clr	A					; ACC = 0

Label_179:

0x3ED2: F6		mov	@R0, A					; [R0] = ACC
0x3ED3: D8 FD		djnz	R0, Label_179				; If (--R0 != 0) then jumps (backward) hither: 0x3ED2

0x3ED5: 7F 40		mov	R7, #0x40				; R7 = 0x40 {'@'}
0x3ED7: 75 12 05	mov	R2<#2>, #0x05				; R2<#2> = 0x05

Label_180:

0x3EDA: D1 8D		acall	Function_016				; Calls (backward) this: 0x3E8D (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x068D)
0x3EDC: 29		add	A, R1					; ACC += R1
0x3EDD: F9		mov	R1, A					; R1 = ACC
0x3EDE: 50 05		jnc	Label_181				; If (CY == L) then jumps (forward) hither: 0x3EE5

0x3EE0: 0A		inc	R2					; ++R2
0x3EE1: BA 00 01	cjne	R2, #0x00, Label_181			; If (R2 != 0x00 {'\0'}) then jumps (forward) hither: 0x3EE5

0x3EE4: 0B		inc	R3					; ++R3

Label_181:

0x3EE5: 75 93 55	mov	CLRWDT, #0x55				; CLRWDT = 0x55 {'U'}
0x3EE8: BD 40 EF	cjne	R5, #0x40, Label_180			; If (R5 != 0x40 {'@'}) then jumps (backward) hither: 0x3EDA

0x3EEB: 89 1B		mov	R3<#3>, R1				; R3<#3> = R1
0x3EED: 8A 1A		mov	R2<#3>, R2				; R2<#3> = R2
0x3EEF: 8B 19		mov	R1<#3>, R3				; R1<#3> = R3
0x3EF1: E9		mov	A, R1					; ACC = R1
0x3EF2: 4A		orl	A, R2					; ACC |= R2
0x3EF3: 4B		orl	A, R3					; ACC |= R3
0x3EF4: 60 06		jz	Label_182				; If (ACC == 0) then jumps (forward) hither: 0x3EFC

0x3EF6: BB 3F 06	cjne	R3, #0x3F, Label_183			; If (R3 != 0x3F {'?'}) then jumps (forward) hither: 0x3EFF

0x3EF9: BA C0 03	cjne	R2, #0xC0, Label_183			; If (R2 != 0xC0) then jumps (forward) hither: 0x3EFF

Label_182:

0x3EFC: 75 27 A5	mov	0x27, #0xA5				; [0x27] = 0xA5

Label_183:

0x3EFF: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_018:

0x3F00: C2 AF		clr	EA					; EA = L
0x3F02: 53 F3 F7	anl	DFC, #0xF7				; DFC &= 0xF7
0x3F05: 75 93 55	mov	CLRWDT, #0x55				; CLRWDT = 0x55 {'U'}
0x3F08: 75 81 27	mov	SP, #0x27				; SP = 0x27 {'''}

Label_184:

0x3F0B: B4 5A FD	cjne	A, #0x5A, Label_184			; If (ACC != 0x5A {'Z'}) then jumps hither: 0x3F0B

0x3F0E: E4		clr	A					; ACC = 0
0x3F0F: F5 D0		mov	PSW, A					; PSW = ACC
0x3F11: F5 F3		mov	DFC, A					; DFC = ACC
0x3F13: 75 9E 60	mov	P4CON, #0x60				; P4CON = 0x60 {'`'}
0x3F16: 75 C0 7F	mov	P4, #0x7F				; P4 = 0x7F {'^?'}
0x3F19: 01 EA		ajmp	Label_021				; Jumps (backward) hither: 0x38EA (PC += 2, PC(10-0) = 0x00EA)

Label_185:

0x3F1B: 74 38		mov	A, #0x38				; ACC = 0x38 {'8'}

Label_186:

0x3F1D: 14		dec	A					; --ACC
0x3F1E: 54 FC		anl	A, #0xFC				; ACC &= 0xFC
0x3F20: FA		mov	R2, A					; R2 = ACC
0x3F21: B1 30		acall	Function_011				; Calls (backward) this: 0x3D30 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0530)
0x3F23: EA		mov	A, R2					; ACC = R2
0x3F24: 70 F7		jnz	Label_186				; If (ACC != 0) then jumps (backward) hither: 0x3F1D

0x3F26: B1 AE		acall	Function_013				; Calls (backward) this: 0x3DAE (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x05AE)
0x3F28: B1 AE		acall	Function_013				; Calls (backward) this: 0x3DAE (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x05AE)
0x3F2A: C1 CF		ajmp	Label_178				; Jumps (backward) hither: 0x3ECF (PC += 2, PC(10-0) = 0x06CF)

+----------+----------------------------------+----------------------------------+
|          |  00  01  02  03  04  05  06  07  |  00  01  02  03  04  05  06  07  |
+----------+----------------------------------+----------------------------------+
|  0x3F2C  |                  12  01  10  01  |                  12  01  10  01  |
|  0x3F30  |  00  00  00  08  03  06  20  10  |  00  00  00  08  03  06  ' ' 10  |
|  0x3F38  |  01  03  00  00  00  01  04  03  |  01  03  00  00  00  01  04  03  |
|  0x3F40  |  09  04  09  02  22  00  01  01  |  09  04  09  02  '"' 00  01  01  |
|  0x3F48  |  00  A0  32  09  04  00  00  01  |  00  A0  '2' 09  04  00  00  01  |
|  0x3F50  |  03  01  01  00  09  21  10  01  |  03  01  01  00  09  '!' 10  01  |
|  0x3F58  |  00  01  22  48  00  07  05  81  |  00  01  '"' 'H' 00  07  05  81  |
|  0x3F60  |  03  08  00  0A  05  01  09  06  |  03  08  00  0A  05  01  09  06  |
|  0x3F68  |  A1  01  85  07  05  08  95  08  |  A1  01  85  07  05  08  95  08  |
|  0x3F70  |  75  01  19  01  29  08  91  02  |  'u' 01  19  01  ')' 08  91  02  |
|  0x3F78  |  C0  06  00  FF  09  01  A1  01  |  C0  06  00  FF  09  01  A1  01  |
|  0x3F80  |  85  05  15  00  25  FF  19  01  |  85  05  15  00  '%' FF  19  01  |
|  0x3F88  |  29  05  75  08  95  05  B1  02  |  ')' 05  'u' 08  95  05  B1  02  |
|  0x3F90  |  C0  06  00  FF  09  01  A1  01  |  C0  06  00  FF  09  01  A1  01  |
|  0x3F98  |  85  06  15  00  25  FF  1A  01  |  85  06  15  00  '%' FF  1A  01  |
|  0x3FA0  |  00  2A  01  08  75  08  96  01  |  00  '*' 01  08  'u' 08  96  01  |
|  0x3FA8  |  08  B1  02  C0  2C  12  42  22  |  08  B1  02  C0  ',' 12  'B' '"' |
|  0x3FB0  |  3E  04  4B  09  5D  07  54  09  |  '>' 04  'K' 09  ']' 07  'T' 09  |
|  0x3FB8  |  64  48  41  4B  49  52  41  00  |  'd' 'H' 'A' 'K' 'I' 'R' 'A' 00  |
|  0x3FC0  |  00  00  00  00  00  00  00  00  |  00  00  00  00  00  00  00  00  |
|  0x3FC8  |  00  00  00  00  00  00  00  00  |  00  00  00  00  00  00  00  00  |
|  0x3FD0  |  00  00  00  00  00  00  00  00  |  00  00  00  00  00  00  00  00  |
|  0x3FD8  |  00  00  00  00  00  00  00  00  |  00  00  00  00  00  00  00  00  |
|  0x3FE0  |  00  00  00  00  00  00  00  00  |  00  00  00  00  00  00  00  00  |
|  0x3FE8  |  00  00  00  00  00  00  00  00  |  00  00  00  00  00  00  00  00  |
|  0x3FF0  |  00  00  00  00  00  00  00  00  |  00  00  00  00  00  00  00  00  |
|  0x3FF8  |  00  00  00  00  00  00  00  00  |  00  00  00  00  00  00  00  00  |
+----------+----------------------------------+----------------------------------+

0x4000: -- -- --
  ....  -- -- --
0xFFFF: -- -- --
