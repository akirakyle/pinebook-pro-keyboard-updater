
;-------------------------------------------------------------------------------
;	Internal RAM layout
;-------------------------------------------------------------------------------

0x00: |0|0|0|0|0|0|0|0|1|1|1|1|1|1|1|1|
0x10: |d|d|d|d|I|I| |I|3|3|3|3|3|3|3|3|
0x20: |B|B|B|B|B|d|B|d|d|d|d|d| | |d|d|
0x30: |d|d|d|d|d|d|d|d|d|d|d|d|d|d|d|d|
0x40: |d|d|d|d|d|d|d|d|d|d|d|d|d|d|d|d|
0x50: | |d| | | | | | | | | | | | |d|d|
0x60: |d| |d|d|d|d|d|d|d|d|d|d|d|I|I| |
0x70: | | | | | | | | | | | | | | | | |
0x80: |I|I|I| | | | | | | | | | | | | |
0x90: | | |I|I| |I|I|I|I|I| | | | | | |
0xA0: | | | | | | | | | | | |I|I| | | |
0xB0: | | |I|I|I|I|I|I| |I|I|I|I|I|I| |
0xC0: |I|I|I| | | | | | | | | | | | |I|
0xD0: | | | | |I|I|I|I|I| | | | | | | |
0xE0: | | | | | | | | | | | | | | | | |
0xF0: | | | | | | | | | | | | | | | |I|

0-3:Register Banks, B:Bits, d:Data, I:iRAM, S:Stack

;-------------------------------------------------------------------------------
;	Public labels
;-------------------------------------------------------------------------------

0x000A:	Timer0_interrupt				(calls:   0, jumps:   1)
0x000B:	Function_000					(not used)
0x0013:	Function_001					(not used)
0x001B:	Function_002					(not used)
0x001E:	Function_003					(calls:   1, jumps:   0)
0x0023:	Function_004					(not used)
0x0026:	Int0_interrupt					(calls:   0, jumps:   1)
0x002B:	Function_005					(not used)
0x002E:	Int1_interrupt					(calls:   0, jumps:   1)
0x0033:	Function_006					(not used)
0x0036:	WAIT12						(calls:   4, jumps:   0)
0x0043:	Function_007					(not used)
0x0046:	Uart_interrupt					(calls:   0, jumps:   1)
0x004B:	Function_008					(not used)
0x004E:	Timer2_interrupt				(calls:   0, jumps:   1)
0x0053:	Function_009					(not used)
0x0056:	Int2_interrupt					(calls:   0, jumps:   1)
0x005B:	Function_010					(not used)
0x0063:	Function_011					(not used)
0x052A:	Function_012					(calls:   1, jumps:   0)
0x07E4:	Function_013					(calls:   2, jumps:   0)
0x07FF:	Function_014					(calls:   2, jumps:   0)
0x080A:	Function_015					(calls:   2, jumps:   0)
0x0975:	Function_016					(calls:   1, jumps:   0)
0x0A9D:	Function_017					(not used)
0x0BB1:	Function_018					(not used)
0x0CB5:	Function_019					(calls:   2, jumps:   0)
0x0D41:	Function_020					(calls:   2, jumps:   0)
0x0D6C:	Function_021					(calls:   2, jumps:   0)
0x0D7C:	Function_022					(calls:   2, jumps:   0)
0x0D90:	Function_023					(calls:   2, jumps:   0)
0x0DA0:	Function_024					(calls:   1, jumps:   0)
0x0E8B:	Function_025					(not used)
0x0F68:	recieve_tp_data					(calls:   1, jumps:   0)
0x1027:	Function_026					(calls:   2, jumps:   0)
0x1034:	Function_027					(calls:   2, jumps:   0)
0x1041:	send_tp_data_ep2				(calls:   3, jumps:   0)
0x10F7:	Function_028					(calls:   2, jumps:   0)
0x10FC:	Function_029					(calls:   3, jumps:   0)
0x110A:	Function_030					(calls:   1, jumps:   0)
0x1115:	Function_031					(calls:   4, jumps:   0)
0x111B:	Function_032					(calls:   5, jumps:   0)
0x1125:	Function_033					(calls:   4, jumps:   0)
0x1129:	Function_034					(calls:   3, jumps:   0)
0x1135:	Function_035					(calls:   4, jumps:   0)
0x1146:	Function_036					(calls:   3, jumps:   0)
0x1147:	Function_037					(calls:   1, jumps:   0)
0x1149:	Function_038					(calls:   1, jumps:   0)
0x1150:	Function_039					(calls:   3, jumps:   0)
0x115B:	Function_040					(calls:   3, jumps:   0)
0x1165:	Function_041					(calls:   2, jumps:   0)
0x1175:	Function_042					(calls:   2, jumps:   0)
0x1182:	Function_043					(calls:   2, jumps:   0)
0x118E:	Function_044					(calls:   3, jumps:   1)
0x1195:	Function_045					(calls:   3, jumps:   0)
0x119C:	Function_046					(calls:   3, jumps:   0)
0x1242:	Function_047					(calls:   1, jumps:   0)
0x12DF:	format_tp_data?					(calls:   1, jumps:   0)
0x1366:	format_tp_data2?				(calls:   2, jumps:   0)
0x137A:	Function_048					(not used)
0x140D:	Function_049					(not used)
0x1497:	Function_050					(not used)
0x151D:	Function_051					(calls:   1, jumps:   0)
0x159F:	Function_052					(calls:   2, jumps:   0)
0x169B:	Function_053					(calls:   5, jumps:   0)
0x16AB:	Function_054					(calls:   2, jumps:   0)
0x16B7:	Function_055					(calls:   1, jumps:   0)
0x16BF:	Function_056					(calls:   3, jumps:   0)
0x16C8:	Function_057					(calls:   1, jumps:   0)
0x16D0:	Function_058					(calls:   6, jumps:   0)
0x16D9:	Function_059					(calls:   2, jumps:   0)
0x16EA:	Function_060					(calls:   4, jumps:   0)
0x16F3:	Function_061					(calls:   2, jumps:   0)
0x1703:	Function_062					(calls:   2, jumps:   0)
0x170D:	Function_063					(calls:   4, jumps:   0)
0x177C:	?C?CLDPTR					(calls:   2, jumps:   0)
0x1795:	?C?CLDOPTR					(calls:   9, jumps:   0)
0x17C2:	?C?CSTOPTR					(calls:   7, jumps:   0)
0x17EA:	Function_064					(calls:   1, jumps:   0)
0x1853:	Function_065					(calls:   1, jumps:   0)
0x18BB:	Function_066					(calls:   5, jumps:   0)
0x18CB:	Function_067					(calls:   4, jumps:   0)
0x18CF:	Function_068					(calls:   1, jumps:   0)
0x18D6:	Function_069					(calls:   5, jumps:   0)
0x18DE:	Function_070					(calls:   2, jumps:   0)
0x18EF:	Function_071					(calls:   2, jumps:   0)
0x18F3:	Function_072					(calls:   1, jumps:   0)
0x18FB:	Function_073					(calls:   3, jumps:   0)
0x1904:	Function_074					(calls:   2, jumps:   0)
0x1910:	Function_075					(calls:   2, jumps:   0)
0x191C:	Function_076					(calls:   3, jumps:   0)
0x1923:	i2c_sendbyte					(calls:  37, jumps:   1)
0x1985:	Function_077					(calls:   1, jumps:   0)
0x19E6:	Function_078					(calls:   1, jumps:   0)
0x1A45:	Function_079					(not used)
0x1AFA:	Function_080					(calls:   7, jumps:   0)
0x1B3E:	Function_081					(calls:   2, jumps:   0)
0x1B52:	Function_082					(not used)
0x1BAA:	Function_083					(calls:   3, jumps:   0)
0x1BFF:	Function_084					(calls:   6, jumps:   1)
0x1C54:	Function_085					(calls:   1, jumps:   0)
0x1C9C:	Function_086					(calls:   2, jumps:   0)
0x1CA8:	Function_087					(calls:   1, jumps:   0)
0x1CF0:	Function_088					(calls:   2, jumps:   0)
0x1CFC:	Function_089					(calls:   1, jumps:   0)
0x1D4C:	Function_090					(not used)
0x1D99:	Function_091					(not used)
0x1DE4:	Function_092					(calls:   1, jumps:   0)
0x1E2C:	Function_093					(calls:   8, jumps:   0)
0x1E73:	Function_094					(calls:   1, jumps:   0)
0x1EB1:	Function_095					(calls:   1, jumps:   0)
0x1F2B:	Function_096					(calls:   1, jumps:   0)
0x1F66:	Function_097					(calls:   1, jumps:   0)
0x1FA0:	Function_098					(calls:   1, jumps:   0)
0x1FD7:	Function_099					(not used)
0x200D:	Function_100					(not used)
0x2079:	Function_101					(calls:   1, jumps:   0)
0x20AC:	Function_102					(calls:   1, jumps:   0)
0x20DE:	Function_103					(calls:   1, jumps:   0)
0x210E:	Function_104					(calls:   2, jumps:   0)
0x213E:	Function_105					(not used)
0x216E:	Function_106					(calls:   1, jumps:   0)
0x219C:	Function_107					(not used)
0x21CA:	Function_108					(not used)
0x22CC:	Function_109					(calls:   1, jumps:   0)
0x233F:	Function_110					(not used)
0x2361:	Function_111					(calls:   2, jumps:   0)
0x2382:	Function_112					(not used)
0x23A3:	Function_113					(calls:   1, jumps:   0)
0x23C4:	process_tp_data?				(calls:   1, jumps:   0)
0x2402:	Function_114					(calls:   2, jumps:   0)
0x2421:	Function_115					(not used)
0x2440:	Function_116					(calls:   1, jumps:   0)
0x245E:	Function_117					(calls:   8, jumps:   0)
0x247B:	Function_118					(calls:   1, jumps:   0)
0x2498:	Function_119					(calls:   1, jumps:   0)
0x24B4:	Timer1_interrupt				(calls:   0, jumps:   1)
0x258A:	Function_120					(not used)
0x25A3:	Function_121					(calls:   1, jumps:   0)
0x25D4:	Function_122					(calls:   1, jumps:   0)
0x2600:	WAIT18						(calls:   2, jumps:   0)
0x2616:	Function_123					(calls:   3, jumps:   0)
0x262B:	Function_124					(calls:   3, jumps:   0)
0x2640:	Function_125					(calls:   2, jumps:   1)
0x2654:	i2c_start					(calls:  13, jumps:   0)
0x2668:	Function_126					(calls:   1, jumps:   0)
0x269F:	i2c_stop					(calls:  18, jumps:   1)
0x26B1:	Function_127					(not used)
0x26C3:	Function_128					(calls:   1, jumps:   1)
0x26D5:	Function_129					(calls:   1, jumps:   0)
0x26E6:	Function_130					(calls:   2, jumps:   0)
0x26F5:	Function_131					(calls:   3, jumps:   0)
0x26FC:	Function_132					(calls:   3, jumps:   0)
0x2703:	Function_133					(calls:   2, jumps:   0)
0x2710:	Function_134					(calls:   1, jumps:   0)
0x2735:	Function_135					(not used)
0x274B:	Function_136					(calls:   1, jumps:   0)
0x2756:	Function_137					(calls:   1, jumps:   0)
0x2760:	Function_138					(not used)
0x2774:	Function_139					(calls:   1, jumps:   0)
0x2786:	Function_140					(not used)
0x27A1:	Function_141					(calls:   3, jumps:   0)
0x27A8:	set_wdt_scalar00				(calls:  16, jumps:   1)
0x27AF:	WAIT6						(calls:   8, jumps:   0)
0x27BC:	Function_142					(not used)
0x27C2:	Function_143					(not used)
0x2804:	Function_144					(calls:   1, jumps:   0)
0x3800:	System_init					(calls:   0, jumps:   1)
0x384E:	Function_145					(calls:   2, jumps:   0)
0x3861:	Function_146					(calls:   2, jumps:   0)
0x3A1D:	Function_147					(calls:   3, jumps:   0)
0x3A30:	Function_148					(calls:   3, jumps:   0)
0x3A64:	Function_149					(calls:   1, jumps:   0)
0x3B53:	Function_150					(calls:   2, jumps:   0)
0x3B61:	Function_151					(calls:   1, jumps:   0)
0x3B98:	Function_152					(calls:   1, jumps:   0)
0x3BAD:	Function_153					(calls:   1, jumps:   0)
0x3BE5:	Function_154					(calls:   1, jumps:   0)
0x3BF1:	Function_155					(calls:   3, jumps:   0)
0x3BFB:	Function_156					(calls:   3, jumps:   0)
0x3C00:	Function_157					(calls:   2, jumps:   0)
0x3C0D:	Function_158					(calls:   1, jumps:   0)
0x3C2A:	Function_159					(calls:   1, jumps:   2)
0x3C37:	Function_160					(calls:   7, jumps:   0)
0x3CCC:	Function_161					(calls:   1, jumps:   0)
0x3D19:	Function_162					(calls:   1, jumps:   0)
0x3D30:	Function_163					(calls:   1, jumps:   1)
0x3D3C:	SSP_start					(calls:   1, jumps:   2)
0x3DA8:	Function_164					(calls:   2, jumps:   0)
0x3DAE:	Function_165					(calls:   2, jumps:   0)
0x3DBE:	Function_166					(calls:   3, jumps:   1)
0x3DC4:	Function_167					(calls:   3, jumps:   0)
0x3E8D:	Function_168					(calls:   4, jumps:   0)
0x3EC5:	Function_169					(calls:   3, jumps:   0)

;-------------------------------------------------------------------------------
;	SFR registers
;-------------------------------------------------------------------------------

0x80:	P0						(used   5 times)
0x81:	SP						(used   6 times)
0x82:	DPL						(used  50 times)
0x83:	DPH						(used  42 times)
0x87:	PCON						(used   1 times)
0x8E:	SUSLO						(used   1 times)
0x90:	P1						(used   5 times)
0x93:	CLRWDT						(used  12 times)
0x94:	PREWDT						(used   4 times)
0x95:	WKT_CON						(used   4 times)
0x96:	MODE_FG						(used  15 times)
0x9A:	P0CON						(used   3 times)
0x9B:	P1CON						(used   3 times)
0x9C:	P2CON						(used   3 times)
0x9D:	P3CON						(used  25 times)
0x9E:	P4CON						(used  11 times)
0xA0:	P2						(used   7 times)
0xA2:	P0WK						(used   2 times)
0xA3:	P1WK						(used   2 times)
0xA4:	P2WK						(used   5 times)
0xA5:	P3WK						(used   2 times)
0xA6:	P4WK						(used   2 times)
0xA8:	IE						(used   5 times)
0xA9:	IE2						(used   6 times)
0xAD:	P3SEL						(not used)
0xAF:	PRCON						(not used)
0xB0:	P3						(used   4 times)
0xB3:	IB_CON1						(used   3 times)
0xB4:	IB_CON2						(used   2 times)
0xB5:	IB_CON3						(used   2 times)
0xB6:	IB_CON4						(used   2 times)
0xB7:	IB_CON5						(used   2 times)
0xB8:	IP						(used   2 times)
0xB9:	IP2						(used   8 times)
0xBE:	IB_OFFSET					(used   7 times)
0xBF:	IB_DATA						(used   6 times)
0xC0:	P4						(used  16 times)
0xC8:	TCSTU						(not used)
0xC9:	TCCON						(not used)
0xCA:	TCSCALE						(not used)
0xCB:	TCAP0R						(not used)
0xCC:	TCAP0F						(not used)
0xD0:	PSW						(used  23 times)
0xD2:	BT0						(not used)
0xD3:	BT1						(used   2 times)
0xD4:	BTCON						(used   3 times)
0xDA:	IF						(used   7 times)
0xDB:	IF2						(used  14 times)
0xDC:	IRQEN						(used   2 times)
0xDD:	IRQEN2						(used   3 times)
0xDE:	IRQFG						(used   2 times)
0xDF:	IRQFG2						(used   7 times)
0xE0:	ACC						(used  34 times)
0xE2:	TXDAT1						(used   4 times)
0xE3:	TXCNT1						(used   1 times)
0xE4:	TXFLG1						(used  19 times)
0xE5:	TXDAT2						(used  25 times)
0xE6:	TXCNT2						(used   5 times)
0xE7:	TXFLG2						(used  23 times)
0xE9:	CRWCON						(used   4 times)
0xEA:	TXDAT0						(used  28 times)
0xEB:	TXCNT0						(used  10 times)
0xEC:	TXFLG0						(used  11 times)
0xED:	RXDAT0						(used   2 times)
0xEE:	RXCNT0						(used   7 times)
0xEF:	RXFLG0						(used  39 times)
0xF0:	B						(used  25 times)
0xF2:	DADDR						(used   7 times)
0xF3:	DFC						(used  18 times)
0xF7:	XPAGE						(used   9 times)

;-------------------------------------------------------------------------------
;	Special function bits
;-------------------------------------------------------------------------------

0x80:	P0_0						(not used)
0x81:	P0_1						(not used)
0x82:	P0_2						(not used)
0x83:	P0_3						(not used)
0x84:	P0_4						(not used)
0x85:	P0_5						(not used)
0x86:	P0_6						(not used)
0x87:	P0_7						(not used)
0x90:	P1_0						(not used)
0x91:	P1_1						(not used)
0x92:	P1_2						(not used)
0x93:	P1_3						(not used)
0x94:	P1_4						(not used)
0x95:	P1_5						(not used)
0x96:	P1_6						(not used)
0x97:	P1_7						(not used)
0xA0:	P2_0						(not used)
0xA1:	P2_1						(not used)
0xA2:	P2_2						(not used)
0xA3:	P2_3						(not used)
0xA4:	P2_4						(not used)
0xA5:	P2_5						(not used)
0xA6:	P2_6						(not used)
0xA7:	P2_7						(not used)
0xA8:	EEXT0						(used   1 times)
0xA9:	ET0						(not used)
0xAA:							(used   1 times)
0xAB:	ET1						(used   2 times)
0xAC:	ETC0						(used   1 times)
0xAD:							(used   1 times)
0xAE:							(used   1 times)
0xAF:	EA						(used  48 times)
0xB0:	P3_0						(used   6 times)
0xB1:	P3_1						(used   2 times)
0xB2:	P3_2						(used   5 times)
0xB3:	P3_3						(used   1 times)
0xB4:	P3_4						(used   3 times)
0xB5:	P3_5						(used   3 times)
0xB6:	P3_6						(used   2 times)
0xB7:	P3_7						(used   2 times)
0xB8:	PEXT0						(not used)
0xB9:	PT0						(not used)
0xBB:	PT1						(not used)
0xBC:	PTC0						(not used)
0xC0:	P4_0						(used   7 times)
0xC1:	P4_1						(used   7 times)
0xC2:	P4_2						(used   2 times)
0xC3:	P4_3						(not used)
0xC4:	P4_4						(not used)
0xC5:	P4_5						(used  14 times)
0xC6:	P4_6						(used  10 times)
0xC7:	P4_7						(not used)
0xC8:	TC0R_FULL					(not used)
0xC9:	TC0F_FULL					(not used)
0xCC:	TC0_OVL						(not used)
0xD0:	P						(not used)
0xD2:	OV						(not used)
0xD3:	RS0						(not used)
0xD4:	RS1						(not used)
0xD5:	F0						(not used)
0xD6:	AC						(not used)
0xD7:	CY						(used   1 times)
0xE0:	ACC_0						(used  10 times)
0xE1:	ACC_1						(used   9 times)
0xE2:	ACC_2						(used   8 times)
0xE3:	ACC_3						(used  15 times)
0xE4:	ACC_4						(used  11 times)
0xE5:	ACC_5						(used   4 times)
0xE6:	ACC_6						(used   1 times)
0xE7:	ACC_7						(used   7 times)

;-------------------------------------------------------------------------------
;	Overlayable register banks
;-------------------------------------------------------------------------------

0x00:	REG_BANK_0
0x08:	REG_BANK_1
0x18:	REG_BANK_3

;-------------------------------------------------------------------------------
;	Internal RAM data
;-------------------------------------------------------------------------------

0x01:	variable_0x01					(used   1 times)
0x02:	variable_0x02					(used   2 times)
0x04:	variable_0x04					(used   1 times)
0x05:	variable_0x05					(used   1 times)
0x06:	variable_0x06					(used   6 times)
0x07:	variable_0x07					(used   7 times)
0x09:	variable_0x09					(used   8 times)
0x0A:	variable_0x0A					(used   6 times)
0x0B:	variable_0x0B					(used   9 times)
0x0C:	variable_0x0C					(used   4 times)
0x0D:	variable_0x0D					(used   4 times)
0x0E:	variable_0x0E					(used   3 times)
0x0F:	variable_0x0F					(used   2 times)
0x10:	variable_0x10					(used  12 times)
0x11:	variable_0x11					(used   8 times)
0x12:	variable_0x12					(used  20 times)
0x13:	variable_0x13					(used   8 times)
0x19:	variable_0x19					(used   1 times)
0x1A:	variable_0x1A					(used   1 times)
0x1B:	variable_0x1B					(used   1 times)
0x1C:	variable_0x1C					(used   3 times)
0x1D:	variable_0x1D					(used   4 times)
0x1E:	variable_0x1E					(used   4 times)
0x1F:	variable_0x1F					(used   4 times)
0x20:	variable_0x20					(used  14 times)
0x21:	variable_0x21					(used   3 times)
0x22:	variable_0x22					(used   4 times)
0x23:	variable_0x23					(used   1 times)
0x24:	variable_0x24					(used   3 times)
0x25:	variable_0x25					(used   3 times)
0x26:	variable_0x26					(used  15 times)
0x27:	variable_0x27					(used   8 times)
0x28:	variable_0x28					(used   1 times)
0x29:	variable_0x29					(used  17 times)
0x2A:	variable_0x2A					(used  15 times)
0x2B:	variable_0x2B					(used   6 times)
0x2E:	variable_0x2E					(used   4 times)
0x2F:	variable_0x2F					(used  26 times)
0x30:	variable_0x30					(used  11 times)
0x31:	variable_0x31					(used  42 times)
0x32:	variable_0x32					(used  39 times)
0x33:	variable_0x33					(used  33 times)
0x34:	variable_0x34					(used  14 times)
0x35:	variable_0x35					(used  17 times)
0x36:	variable_0x36					(used  16 times)
0x37:	variable_0x37					(used  11 times)
0x38:	variable_0x38					(used   3 times)
0x39:	variable_0x39					(used   6 times)
0x3A:	variable_0x3A					(used  10 times)
0x3B:	variable_0x3B					(used   5 times)
0x3C:	variable_0x3C					(used   6 times)
0x3D:	variable_0x3D					(used   5 times)
0x3E:	variable_0x3E					(used   6 times)
0x3F:	variable_0x3F					(used   3 times)
0x40:	variable_0x40					(used   1 times)
0x41:	variable_0x41					(used   1 times)
0x42:	variable_0x42					(used   1 times)
0x43:	variable_0x43					(used   2 times)
0x44:	variable_0x44					(used   4 times)
0x45:	variable_0x45					(used  11 times)
0x46:	variable_0x46					(used   2 times)
0x47:	variable_0x47					(used  16 times)
0x48:	variable_0x48					(used  28 times)
0x49:	variable_0x49					(used  26 times)
0x4A:	variable_0x4A					(used  11 times)
0x4B:	variable_0x4B					(used  11 times)
0x4C:	variable_0x4C					(used  11 times)
0x4D:	variable_0x4D					(used   9 times)
0x4E:	variable_0x4E					(used  12 times)
0x4F:	variable_0x4F					(used   4 times)
0x51:	variable_0x51					(used  15 times)
0x5E:	variable_0x5E					(used   7 times)
0x5F:	variable_0x5F					(used   7 times)
0x60:	variable_0x60					(used   7 times)
0x62:	variable_0x62					(used   3 times)
0x63:	variable_0x63					(used   5 times)
0x64:	variable_0x64					(used  28 times)
0x65:	variable_0x65					(used  33 times)
0x66:	variable_0x66					(used  13 times)
0x67:	variable_0x67					(used  12 times)
0x68:	variable_0x68					(used  18 times)
0x69:	variable_0x69					(used  17 times)
0x6A:	variable_0x6A					(used   9 times)
0x6B:	variable_0x6B					(used  10 times)
0x6C:	variable_0x6C					(used   4 times)

;-------------------------------------------------------------------------------
;	bit data
;-------------------------------------------------------------------------------

0x01:	bit_0x01					(used   1 times)
0x02:	bit_0x02					(used   2 times)
0x03:	bit_0x03					(used  15 times)
0x06:	bit_0x06					(used   1 times)
0x07:	bit_0x07					(used   2 times)
0x08:	bit_0x08					(used   4 times)
0x09:	bit_0x09					(used   5 times)
0x0A:	bit_0x0A					(used  14 times)
0x0B:	bit_0x0B					(used   3 times)
0x0C:	bit_0x0C					(used   3 times)
0x0F:	bit_0x0F					(used   4 times)
0x11:	bit_0x11					(used   4 times)
0x12:	bit_0x12					(used   1 times)
0x13:	bit_0x13					(used   4 times)
0x18:	bit_0x18					(used   1 times)
0x19:	bit_0x19					(used   1 times)
0x1A:	bit_0x1A					(used   3 times)
0x1B:	bit_0x1B					(used   3 times)
0x20:	bit_0x20					(used   6 times)
0x21:	bit_0x21					(used   3 times)
0x22:	bit_0x22					(used   5 times)
0x24:	bit_0x24					(used   6 times)
0x26:	bit_0x26					(used   7 times)
0x30:	bit_0x30					(used   4 times)
0x31:	bit_0x31					(used   3 times)
0x33:	bit_0x33					(used   3 times)
0x34:	bit_0x34					(used   2 times)
0x37:	bit_0x37					(used   2 times)

;-------------------------------------------------------------------------------
;	Indirectly addressable internal RAM data
;-------------------------------------------------------------------------------

0x08:	iram_0x08					(used   5 times)
0x14:	iram_0x14					(used   6 times)
0x15:	iram_0x15					(used   5 times)
0x17:	iram_0x17					(used  10 times)
0x18:	iram_0x18					(used   3 times)
0x6D:	iram_0x6D					(used   5 times)
0x6E:	iram_0x6E					(used   1 times)
0x80:	iram_0x80					(used   6 times)
0x81:	iram_0x81					(used   4 times)
0x82:	iram_0x82					(used   1 times)
0x92:	iram_0x92					(used   7 times)
0x93:	iram_0x93					(used   8 times)
0x95:	iram_0x95					(used   2 times)
0x96:	iram_0x96					(used   2 times)
0x97:	iram_0x97					(used   1 times)
0x98:	iram_0x98					(used   1 times)
0x99:	iram_0x99					(used   1 times)
0xAB:	iram_0xAB					(used  11 times)
0xAC:	iram_0xAC					(used   6 times)
0xB2:	iram_0xB2					(used   1 times)
0xB3:	iram_0xB3					(used   3 times)
0xB4:	iram_0xB4					(used   1 times)
0xB5:	iram_0xB5					(used   1 times)
0xB6:	iram_0xB6					(used   1 times)
0xB7:	iram_0xB7					(used   5 times)
0xB9:	iram_0xB9					(used   6 times)
0xBA:	iram_0xBA					(used   5 times)
0xBB:	iram_0xBB					(used   2 times)
0xBC:	iram_0xBC					(used   2 times)
0xBD:	iram_0xBD					(used   2 times)
0xBE:	iram_0xBE					(used   4 times)
0xC0:	iram_0xC0					(used   1 times)
0xC1:	iram_0xC1					(used   2 times)
0xC2:	iram_0xC2					(used   1 times)
0xCF:	iram_0xCF					(used   6 times)
0xD4:	iram_0xD4					(used   3 times)
0xD5:	iram_0xD5					(used   4 times)
0xD6:	iram_0xD6					(used   2 times)
0xD7:	iram_0xD7					(used  12 times)
0xD8:	iram_0xD8					(used   4 times)
0xFF:	iram_0xFF					(used   1 times)

;-------------------------------------------------------------------------------

0x0000: 02 38 00	ljmp	System_init				; Jumps (forward) hither: 0x3800

Label_000:

0x0003: 02 00 26	ljmp	Int0_interrupt				; Jumps (forward) hither: 0x0026

Label_001:

0x0006: 53 A9 FB	anl	IE2, #0xFB				; IE2 &= 0xFB
0x0009: 32		reti						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Timer0_interrupt:

0x000A: 32		reti						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_000:

0x000B: 02 00 0A	ljmp	Timer0_interrupt			; Jumps (backward) hither: 0x000A

Label_002:

0x000E: 53 A9 DF	anl	IE2, #0xDF				; IE2 &= 0xDF
0x0011: 32		reti						; PCH = [SP--], PCL = [SP--]

0x0012: -- -- --
  ....  -- -- --
0x0012: -- -- --

;-------------------------------------------------------------------------------

Function_001:

0x0013: 02 00 2E	ljmp	Int1_interrupt				; Jumps (forward) hither: 0x002E

Label_003:

0x0016: 53 A9 7F	anl	IE2, #0x7F				; IE2 &= 0x7F {'^?'}
0x0019: 32		reti						; PCH = [SP--], PCL = [SP--]

0x001A: -- -- --
  ....  -- -- --
0x001A: -- -- --

;-------------------------------------------------------------------------------

Function_002:

0x001B: 02 24 B4	ljmp	Timer1_interrupt			; Jumps (forward) hither: 0x24B4

;-------------------------------------------------------------------------------

Function_003:

0x001E: 02 3F 00	ljmp	Label_792				; Jumps (forward) hither: 0x3F00

Label_004:

0x0021: 22		ret						; PCH = [SP--], PCL = [SP--]

0x0022: -- -- --
  ....  -- -- --
0x0022: -- -- --

;-------------------------------------------------------------------------------

Function_004:

0x0023: 02 00 46	ljmp	Uart_interrupt				; Jumps (forward) hither: 0x0046

;-------------------------------------------------------------------------------

Int0_interrupt:

0x0026: C2 A8		clr	EEXT0					; EEXT0 = L
0x0028: 32		reti						; PCH = [SP--], PCL = [SP--]

0x0029: -- -- --
  ....  -- -- --
0x002A: -- -- --

;-------------------------------------------------------------------------------

Function_005:

0x002B: 02 00 4E	ljmp	Timer2_interrupt			; Jumps (forward) hither: 0x004E

;-------------------------------------------------------------------------------

Int1_interrupt:

0x002E: C2 AA		clr	0xAA					; [0xAA] = L
0x0030: 32		reti						; PCH = [SP--], PCL = [SP--]

0x0031: -- -- --
  ....  -- -- --
0x0032: -- -- --

;-------------------------------------------------------------------------------

Function_006:

0x0033: 02 00 56	ljmp	Int2_interrupt				; Jumps (forward) hither: 0x0056

;-------------------------------------------------------------------------------

WAIT12:

0x0036: 00		nop
0x0037: 00		nop
0x0038: 00		nop
0x0039: 00		nop
0x003A: 00		nop
0x003B: 00		nop
0x003C: 00		nop
0x003D: 00		nop
0x003E: 00		nop
0x003F: 00		nop
0x0040: 00		nop
0x0041: 00		nop
0x0042: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_007:

0x0043: 02 24 CF	ljmp	Label_558				; Jumps (forward) hither: 0x24CF

;-------------------------------------------------------------------------------

Uart_interrupt:

0x0046: C2 AC		clr	ETC0					; ETC0 = L
0x0048: 32		reti						; PCH = [SP--], PCL = [SP--]

0x0049: -- -- --
  ....  -- -- --
0x004A: -- -- --

;-------------------------------------------------------------------------------

Function_008:

0x004B: 02 24 EA	ljmp	Label_559				; Jumps (forward) hither: 0x24EA

;-------------------------------------------------------------------------------

Timer2_interrupt:

0x004E: C2 AD		clr	0xAD					; [0xAD] = L
0x0050: 32		reti						; PCH = [SP--], PCL = [SP--]

0x0051: -- -- --
  ....  -- -- --
0x0052: -- -- --

;-------------------------------------------------------------------------------

Function_009:

0x0053: 02 00 06	ljmp	Label_001				; Jumps (backward) hither: 0x0006

;-------------------------------------------------------------------------------

Int2_interrupt:

0x0056: C2 AE		clr	0xAE					; [0xAE] = L
0x0058: 32		reti						; PCH = [SP--], PCL = [SP--]

0x0059: -- -- --
  ....  -- -- --
0x005A: -- -- --

;-------------------------------------------------------------------------------

Function_010:

0x005B: 02 25 05	ljmp	Label_560				; Jumps (forward) hither: 0x2505

Label_005:

0x005E: 8F F3		mov	DFC, R7					; DFC = R7
0x0060: 22		ret						; PCH = [SP--], PCL = [SP--]

0x0061: -- -- --
  ....  -- -- --
0x0062: -- -- --

;-------------------------------------------------------------------------------

Function_011:

0x0063: 02 25 20	ljmp	Label_561				; Jumps (forward) hither: 0x2520

Label_006:

0x0066: 02 27 B6	ljmp	Label_597				; Jumps (forward) hither: 0x27B6

0x0069: -- -- --
  ....  -- -- --
0x006A: -- -- --

Label_007:

0x006B: 02 00 0E	ljmp	Label_002				; Jumps (backward) hither: 0x000E

Label_008:

0x006E: 02 27 B6	ljmp	Label_597				; Jumps (forward) hither: 0x27B6

0x0071: -- -- --
  ....  -- -- --
0x0072: -- -- --

Label_009:

0x0073: 02 25 3B	ljmp	Label_562				; Jumps (forward) hither: 0x253B

0x0076: -- -- --
  ....  -- -- --
0x007A: -- -- --

Label_010:

0x007B: 02 00 16	ljmp	Label_003				; Jumps (backward) hither: 0x0016

+----------+----------------------------------+----------------------------------+
|          |  00  01  02  03  04  05  06  07  |  00  01  02  03  04  05  06  07  |
+----------+----------------------------------+----------------------------------+
|  0x007E  |                          18  03  |                          18  03  |
|  0x0080  |  53  00  49  00  4E  00  4F  00  |  'S' 00  'I' 00  'N' 00  'O' 00  |
|  0x0088  |  20  00  57  00  45  00  41  00  |  ' ' 00  'W' 00  'E' 00  'A' 00  |
|  0x0090  |  4C  00  54  00  48  00  00  04  |  'L' 00  'T' 00  'H' 00  00  04  |
|  0x0098  |  03  09  04  20  03  48  00  41  |  03  09  04  ' ' 03  'H' 00  'A' |
|  0x00A0  |  00  49  00  4C  00  55  00  43  |  00  'I' 00  'L' 00  'U' 00  'C' |
|  0x00A8  |  00  4B  00  20  00  43  00  4F  |  00  'K' 00  ' ' 00  'C' 00  'O' |
|  0x00B0  |  00  2E  00  2C  00  4C  00  54  |  00  '.' 00  ',' 00  'L' 00  'T' |
|  0x00B8  |  00  44  00  00  1A  03  55  00  |  00  'D' 00  00  1A  03  'U' 00  |
|  0x00C0  |  53  00  42  00  20  00  4B  00  |  'S' 00  'B' 00  ' ' 00  'K' 00  |
|  0x00C8  |  45  00  59  00  42  00  4F  00  |  'E' 00  'Y' 00  'B' 00  'O' 00  |
|  0x00D0  |  41  00  52  00  44  00  00  58  |  'A' 00  'R' 00  'D' 00  00  'X' |
|  0x00D8  |  57  2D  4E  31  34  30  31  5F  |  'W' '-' 'N' '1' '4' '0' '1' '_' |
|  0x00E0  |  41  4E  5F  50  54  50  5F  4D  |  'A' 'N' '_' 'P' 'T' 'P' '_' 'M' |
|  0x00E8  |  42  32  37  37  5F  54  56  33  |  'B' '2' '7' '7' '_' 'T' 'V' '3' |
|  0x00F0  |  2D  55  53  2D  48  31  2D  30  |  '-' 'U' 'S' '-' 'H' '1' '-' '0' |
|  0x00F8  |  31  2D  30  30  00  12  01  10  |  '1' '-' '0' '0' 00  12  01  10  |
|  0x0100  |  01  00  00  00  08  8A  25  1E  |  01  00  00  00  08  8A  '%' 1E  |
|  0x0108  |  00  00  01  01  02  00  01  05  |  00  00  01  01  02  00  01  05  |
|  0x0110  |  01  09  06  A1  01  05  07  19  |  01  09  06  A1  01  05  07  19  |
|  0x0118  |  E0  29  E7  15  00  25  01  75  |  E0  ')' E7  15  00  '%' 01  'u' |
|  0x0120  |  01  95  08  81  02  95  01  75  |  01  95  08  81  02  95  01  'u' |
|  0x0128  |  08  81  01  95  03  75  01  05  |  08  81  01  95  03  'u' 01  05  |
|  0x0130  |  08  19  01  29  03  91  02  95  |  08  19  01  ')' 03  91  02  95  |
|  0x0138  |  05  75  01  91  01  95  06  75  |  05  'u' 01  91  01  95  06  'u' |
|  0x0140  |  08  15  00  26  FF  00  05  07  |  08  15  00  '&' FF  00  05  07  |
|  0x0148  |  19  00  2A  FF  00  81  00  C0  |  19  00  '*' FF  00  81  00  C0  |
|  0x0150  |  05  01  09  02  A1  01  85  01  |  05  01  09  02  A1  01  85  01  |
|  0x0158  |  09  01  A1  00  05  09  19  01  |  09  01  A1  00  05  09  19  01  |
|  0x0160  |  29  03  15  00  25  01  95  03  |  ')' 03  15  00  '%' 01  95  03  |
|  0x0168  |  75  01  81  02  95  01  75  05  |  'u' 01  81  02  95  01  'u' 05  |
|  0x0170  |  81  03  05  01  09  30  09  31  |  81  03  05  01  09  '0' 09  '1' |
|  0x0178  |  15  81  25  7F  75  08  95  02  |  15  81  '%' 7F  'u' 08  95  02  |
|  0x0180  |  81  06  C0  C0  05  0D  09  05  |  81  06  C0  C0  05  0D  09  05  |
|  0x0188  |  A1  01  85  1E  09  22  A1  02  |  A1  01  85  1E  09  '"' A1  02  |
|  0x0190  |  15  00  25  01  09  47  09  42  |  15  00  '%' 01  09  'G' 09  'B' |
|  0x0198  |  95  02  75  01  81  02  95  01  |  95  02  'u' 01  81  02  95  01  |
|  0x01A0  |  75  02  25  03  09  51  81  02  |  'u' 02  '%' 03  09  'Q' 81  02  |
|  0x01A8  |  09  54  25  07  95  01  75  03  |  09  'T' '%' 07  95  01  'u' 03  |
|  0x01B0  |  81  02  05  09  09  01  25  01  |  81  02  05  09  09  01  '%' 01  |
|  0x01B8  |  75  01  95  01  81  02  05  01  |  'u' 01  95  01  81  02  05  01  |
|  0x01C0  |  15  00  26  78  05  75  10  55  |  15  00  '&' 'x' 05  'u' 10  'U' |
|  0x01C8  |  0E  65  11  09  30  35  00  46  |  0E  'e' 11  09  '0' '5' 00  'F' |
|  0x01D0  |  E0  01  95  01  81  02  26  92  |  E0  01  95  01  81  02  '&' 92  |
|  0x01D8  |  03  46  40  01  09  31  81  02  |  03  'F' '@' 01  09  '1' 81  02  |
|  0x01E0  |  C0  A1  02  55  0C  66  01  10  |  C0  A1  02  'U' 0C  'f' 01  10  |
|  0x01E8  |  47  FF  FF  00  00  27  FF  FF  |  'G' FF  FF  00  00  ''' FF  FF  |
|  0x01F0  |  00  00  75  10  95  01  05  0D  |  00  00  'u' 10  95  01  05  0D  |
|  0x01F8  |  09  56  81  02  05  0D  85  1F  |  09  'V' 81  02  05  0D  85  1F  |
|  0x0200  |  09  55  09  59  75  04  95  02  |  09  'U' 09  'Y' 'u' 04  95  02  |
|  0x0208  |  25  0F  B1  02  05  0D  85  25  |  '%' 0F  B1  02  05  0D  85  '%' |
|  0x0210  |  09  60  75  01  95  01  15  00  |  09  '`' 'u' 01  95  01  15  00  |
|  0x0218  |  25  01  B1  02  95  07  B1  03  |  '%' 01  B1  02  95  07  B1  03  |
|  0x0220  |  06  00  FF  85  20  09  C5  15  |  06  00  FF  85  ' ' 09  C5  15  |
|  0x0228  |  00  26  FF  00  75  08  96  00  |  00  '&' FF  00  'u' 08  96  00  |
|  0x0230  |  01  B1  02  C0  C0  05  0D  09  |  01  B1  02  C0  C0  05  0D  09  |
|  0x0238  |  0E  A1  01  85  22  09  22  A1  |  0E  A1  01  85  '"' 09  '"' A1  |
|  0x0240  |  02  09  52  15  00  25  0A  75  |  02  09  'R' 15  00  '%' 0A  'u' |
|  0x0248  |  08  95  01  B1  02  C0  09  22  |  08  95  01  B1  02  C0  09  '"' |
|  0x0250  |  A1  00  85  23  09  57  09  58  |  A1  00  85  '#' 09  'W' 09  'X' |
|  0x0258  |  75  01  95  02  25  01  B1  02  |  'u' 01  95  02  '%' 01  B1  02  |
|  0x0260  |  95  06  B1  03  C0  C0  06  01  |  95  06  B1  03  C0  C0  06  01  |
|  0x0268  |  00  09  80  A1  01  85  02  25  |  00  09  80  A1  01  85  02  '%' |
|  0x0270  |  01  15  00  75  01  0A  81  00  |  01  15  00  'u' 01  0A  81  00  |
|  0x0278  |  0A  82  00  0A  83  00  95  03  |  0A  82  00  0A  83  00  95  03  |
|  0x0280  |  81  06  95  05  81  01  C0  06  |  81  06  95  05  81  01  C0  06  |
|  0x0288  |  0C  00  09  01  A1  01  85  03  |  0C  00  09  01  A1  01  85  03  |
|  0x0290  |  25  01  15  00  75  01  0A  B5  |  '%' 01  15  00  'u' 01  0A  B5  |
|  0x0298  |  00  0A  B6  00  0A  6F  00  0A  |  00  0A  B6  00  0A  'o' 00  0A  |
|  0x02A0  |  70  00  0A  E2  00  0A  A2  00  |  'p' 00  0A  E2  00  0A  A2  00  |
|  0x02A8  |  0A  E9  00  0A  EA  00  95  08  |  0A  E9  00  0A  EA  00  95  08  |
|  0x02B0  |  81  02  0A  83  01  0A  94  01  |  81  02  0A  83  01  0A  94  01  |
|  0x02B8  |  0A  86  01  0A  88  01  0A  8A  |  0A  86  01  0A  88  01  0A  8A  |
|  0x02C0  |  01  0A  92  01  0A  B7  00  0A  |  01  0A  92  01  0A  B7  00  0A  |
|  0x02C8  |  CD  00  95  08  81  02  0A  21  |  CD  00  95  08  81  02  0A  '!' |
|  0x02D0  |  02  0A  23  02  0A  24  02  0A  |  02  0A  '#' 02  0A  '$' 02  0A  |
|  0x02D8  |  25  02  0A  26  02  0A  27  02  |  '%' 02  0A  '&' 02  0A  ''' 02  |
|  0x02E0  |  0A  2A  02  0A  B1  02  95  08  |  0A  '*' 02  0A  B1  02  95  08  |
|  0x02E8  |  81  02  C0  05  01  09  0C  A1  |  81  02  C0  05  01  09  0C  A1  |
|  0x02F0  |  01  85  09  15  00  25  01  09  |  01  85  09  15  00  '%' 01  09  |
|  0x02F8  |  C6  95  01  75  01  81  06  75  |  C6  95  01  'u' 01  81  06  'u' |
|  0x0300  |  07  81  03  C0  06  00  FF  09  |  07  81  03  C0  06  00  FF  09  |
|  0x0308  |  01  A1  01  85  06  15  00  25  |  01  A1  01  85  06  15  00  '%' |
|  0x0310  |  FF  1A  01  00  2A  0F  04  75  |  FF  1A  01  00  '*' 0F  04  'u' |
|  0x0318  |  08  96  0F  04  B1  02  C0  06  |  08  96  0F  04  B1  02  C0  06  |
|  0x0320  |  00  FF  09  01  A1  01  85  05  |  00  FF  09  01  A1  01  85  05  |
|  0x0328  |  15  00  25  FF  19  01  29  05  |  15  00  '%' FF  19  01  ')' 05  |
|  0x0330  |  75  08  95  05  B1  02  C0  20  |  'u' 08  95  05  B1  02  C0  ' ' |
|  0x0338  |  FC  28  FE  84  40  CB  9A  87  |  FC  '(' FE  84  '@' CB  9A  87  |
|  0x0340  |  0D  BE  57  3C  B6  70  09  88  |  0D  BE  'W' '<' B6  'p' 09  88  |
|  0x0348  |  07  97  2D  2B  E3  38  34  B6  |  07  97  '-' '+' E3  '8' '4' B6  |
|  0x0350  |  6C  ED  B0  F7  E5  9C  F6  C2  |  'l' ED  B0  F7  E5  9C  F6  C2  |
|  0x0358  |  2E  84  1B  E8  B4  51  78  43  |  '.' 84  1B  E8  B4  'Q' 'x' 'C' |
|  0x0360  |  1F  28  4B  7C  2D  53  AF  FC  |  1F  '(' 'K' '|' '-' 'S' AF  FC  |
|  0x0368  |  47  70  1B  59  6F  74  43  C4  |  'G' 'p' 1B  'Y' 'o' 't' 'C' C4  |
|  0x0370  |  F3  47  18  53  1A  A2  A1  71  |  F3  'G' 18  'S' 1A  A2  A1  'q' |
|  0x0378  |  C7  95  0E  31  55  21  D3  B5  |  C7  95  0E  '1' 'U' '!' D3  B5  |
|  0x0380  |  1E  E9  0C  BA  EC  B8  89  19  |  1E  E9  0C  BA  EC  B8  89  19  |
|  0x0388  |  3E  B3  AF  75  81  9D  53  B9  |  '>' B3  AF  'u' 81  9D  'S' B9  |
|  0x0390  |  41  57  F4  6D  39  25  29  7C  |  'A' 'W' F4  'm' '9' '%' ')' '|' |
|  0x0398  |  87  D9  B4  98  45  7D  A7  26  |  87  D9  B4  98  'E' '}' A7  '&' |
|  0x03A0  |  9C  65  3B  85  68  89  D7  3B  |  9C  'e' ';' 85  'h' 89  D7  ';' |
|  0x03A8  |  BD  FF  14  67  F2  2B  F0  2A  |  BD  FF  14  'g' F2  '+' F0  '*' |
|  0x03B0  |  41  54  F0  FD  2C  66  7C  F8  |  'A' 'T' F0  FD  ',' 'f' '|' F8  |
|  0x03B8  |  C0  8F  33  13  03  F1  D3  C1  |  C0  8F  '3' 13  03  F1  D3  C1  |
|  0x03C0  |  0B  89  D9  1B  62  CD  51  B7  |  0B  89  D9  1B  'b' CD  'Q' B7  |
|  0x03C8  |  80  B8  AF  3A  10  C1  8A  5B  |  80  B8  AF  ':' 10  C1  8A  '[' |
|  0x03D0  |  E8  8A  56  F0  8C  AA  FA  35  |  E8  8A  'V' F0  8C  AA  FA  '5' |
|  0x03D8  |  E9  42  C4  D8  55  C3  38  CC  |  E9  'B' C4  D8  'U' C3  '8' CC  |
|  0x03E0  |  2B  53  5C  69  52  D5  C8  73  |  '+' 'S' '\' 'i' 'R' D5  C8  's' |
|  0x03E8  |  02  38  7C  73  B6  41  E7  FF  |  02  '8' '|' 's' B6  'A' E7  FF  |
|  0x03F0  |  05  D8  2B  79  9A  E2  34  60  |  05  D8  '+' 'y' 9A  E2  '4' '`' |
|  0x03F8  |  8F  A3  32  1F  09  78  62  BC  |  8F  A3  '2' 1F  09  'x' 'b' BC  |
|  0x0400  |  80  E3  0F  BD  65  20  08  13  |  80  E3  0F  BD  'e' ' ' 08  13  |
|  0x0408  |  C1  E2  EE  53  2D  86  7E  A7  |  C1  E2  EE  'S' '-' 86  '~' A7  |
|  0x0410  |  5A  C5  D3  7D  98  BE  31  48  |  'Z' C5  D3  '}' 98  BE  '1' 'H' |
|  0x0418  |  1F  FB  DA  AF  A2  A8  6A  89  |  1F  FB  DA  AF  A2  A8  'j' 89  |
|  0x0420  |  D6  BF  F2  D3  32  2A  9A  E4  |  D6  BF  F2  D3  '2' '*' 9A  E4  |
|  0x0428  |  CF  17  B7  B8  F4  E1  33  08  |  CF  17  B7  B8  F4  E1  '3' 08  |
|  0x0430  |  24  8B  C4  43  A5  E5  24  C2  |  '$' 8B  C4  'C' A5  E5  '$' C2  |
|  0x0438  |  09  02  3B  00  02  01  00  A0  |  09  02  ';' 00  02  01  00  A0  |
|  0x0440  |  32  09  04  00  00  01  03  01  |  '2' 09  04  00  00  01  03  01  |
|  0x0448  |  01  00  09  21  10  01  00  01  |  01  00  09  '!' 10  01  00  01  |
|  0x0450  |  22  41  00  07  05  81  03  08  |  '"' 'A' 00  07  05  81  03  08  |
|  0x0458  |  00  0A  09  04  01  00  01  03  |  00  0A  09  04  01  00  01  03  |
|  0x0460  |  00  00  00  09  21  10  01  00  |  00  00  00  09  '!' 10  01  00  |
|  0x0468  |  01  22  E7  01  07  05  82  03  |  01  '"' E7  01  07  05  82  03  |
|  0x0470  |  08  00  0A  FF  14  0D  FF  1A  |  08  00  0A  FF  14  0D  FF  1A  |
|  0x0478  |  A0  FF  27  29  FF  1D  99  FF  |  A0  FF  ''' ')' FF  1D  99  FF  |
|  0x0480  |  27  29  FF  24  21  FF  0A  9D  |  ''' ')' FF  '$' '!' FF  0A  9D  |
|  0x0488  |  FF  27  29  FF  25  8A  FF  23  |  FF  ''' ')' FF  '%' 8A  FF  '#' |
|  0x0490  |  3F  FF  21  F7  FF  1F  D7  FF  |  '?' FF  '!' F7  FF  1F  D7  FF  |
|  0x0498  |  27  29  FF  27  29  FF  0B  B1  |  ''' ')' FF  ''' ')' FF  0B  B1  |
|  0x04A0  |  FF  1D  4C  FF  21  9C  FF  27  |  FF  1D  'L' FF  '!' 9C  FF  ''' |
|  0x04A8  |  29  FF  27  29  FF  27  29  FF  |  ')' FF  ''' ')' FF  ''' ')' FF  |
|  0x04B0  |  27  29  FF  27  29  FF  0E  8B  |  ''' ')' FF  ''' ')' FF  0E  8B  |
|  0x04B8  |  FF  1B  52  FF  21  3E  FF  27  |  FF  1B  'R' FF  '!' '>' FF  ''' |
|  0x04C0  |  BC  FF  27  C2  FF  27  7D  FF  |  BC  FF  ''' C2  FF  ''' '}' FF  |
|  0x04C8  |  14  97  FF  27  C8  FF  27  CE  |  14  97  FF  ''' C8  FF  ''' CE  |
|  0x04D0  |  FF  27  BC  FF  27  BC  FF  27  |  FF  ''' BC  FF  ''' BC  FF  ''' |
|  0x04D8  |  35  FF  27  40  FF  27  D4  FF  |  '5' FF  ''' '@' FF  ''' D4  FF  |
|  0x04E0  |  27  DA  FF  27  BC  FF  23  82  |  ''' DA  FF  ''' BC  FF  '#' 82  |
|  0x04E8  |  FF  20  0D  FF  27  E0  FF  27  |  FF  ' ' 0D  FF  ''' E0  FF  ''' |
|  0x04F0  |  E6  FF  27  EC  FF  27  86  FF  |  E6  FF  ''' EC  FF  ''' 86  FF  |
|  0x04F8  |  27  F2  FF  27  F8  FF  00  66  |  ''' F2  FF  ''' F8  FF  00  'f' |
|  0x0500  |  FF  27  8F  FF  27  FE  FF  00  |  FF  ''' 8F  FF  ''' FE  FF  00  |
|  0x0508  |  6E  FF  27  98  FF  27  60  FF  |  'n' FF  ''' 98  FF  ''' '`' FF  |
|  0x0510  |  20  43  FF  27  6A  FF  27  BC  |  ' ' 'C' FF  ''' 'j' FF  ''' BC  |
|  0x0518  |  FF  26  B1  FF  27  BC  FF  27  |  FF  '&' B1  FF  ''' BC  FF  ''' |
|  0x0520  |  BC  FF  27  BC  FF  1A  45  FF  |  BC  FF  ''' BC  FF  1A  'E' FF  |
|  0x0528  |  13  7A                          |  13  'z'                         |
+----------+----------------------------------+----------------------------------+

;-------------------------------------------------------------------------------

Function_012:

0x052A: 74 82		mov	A, #0x82				; ACC = 0x82
0x052C: 25 37		add	A, 0x37					; ACC += [0x37]
0x052E: F8		mov	R0, A					; R0 = ACC
0x052F: E6		mov	A, @R0					; ACC = [R0]
0x0530: FF		mov	R7, A					; R7 = ACC
0x0531: C3		clr	C					; CY = L
0x0532: 94 90		subb	A, #0x90				; ACC -= 0x90 + CY
0x0534: 40 03		jc	Label_011				; If (CY == H) then jumps (forward) hither: 0x0539

0x0536: 02 07 E3	ljmp	Label_073				; Jumps (forward) hither: 0x07E3

Label_011:

0x0539: 75 F0 02	mov	B, #0x02				; B = 0x02
0x053C: EF		mov	A, R7					; ACC = R7
0x053D: A4		mul	AB					; B:ACC = ACC * B
0x053E: 24 15		add	A, #0x15				; ACC += 0x15
0x0540: F5 82		mov	DPL, A					; DPL = ACC
0x0542: E5 F0		mov	A, B					; ACC = B
0x0544: 34 08		addc	A, #0x08				; ACC += 0x08 + CY {'\b'}
0x0546: F5 83		mov	DPH, A					; DPH = ACC
0x0548: E4		clr	A					; ACC = 0
0x0549: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x054A: F5 65		mov	0x65, A					; [0x65] = ACC
0x054C: 75 F0 02	mov	B, #0x02				; B = 0x02
0x054F: EF		mov	A, R7					; ACC = R7
0x0550: A4		mul	AB					; B:ACC = ACC * B
0x0551: 24 16		add	A, #0x16				; ACC += 0x16
0x0553: F5 82		mov	DPL, A					; DPL = ACC
0x0555: E5 F0		mov	A, B					; ACC = B
0x0557: 34 08		addc	A, #0x08				; ACC += 0x08 + CY {'\b'}
0x0559: F5 83		mov	DPH, A					; DPH = ACC
0x055B: E4		clr	A					; ACC = 0
0x055C: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x055D: F5 64		mov	0x64, A					; [0x64] = ACC
0x055F: E5 65		mov	A, 0x65					; ACC = [0x65]
0x0561: 70 03		jnz	Label_012				; If (ACC != 0) then jumps (forward) hither: 0x0566

0x0563: 02 07 E3	ljmp	Label_073				; Jumps (forward) hither: 0x07E3

Label_012:

0x0566: 12 23 A3	lcall	Function_113				; Calls (forward) this: 0x23A3 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x23A3)
0x0569: E5 65		mov	A, 0x65					; ACC = [0x65]
0x056B: B4 04 09	cjne	A, #0x04, Label_014			; If (ACC != 0x04) then jumps (forward) hither: 0x0577

0x056E: 30 0A 04	jnb	0x0A, Label_013				; If ([0x0A] == L) then jumps (forward) hither: 0x0575

0x0571: D2 26		setb	0x26					; [0x26] = H
0x0573: 80 02		sjmp	Label_014				; Jumps (forward) hither: 0x0577

Label_013:

0x0575: C2 26		clr	0x26					; [0x26] = L

Label_014:

0x0577: 20 0A 03	jb	0x0A, Label_015				; If ([0x0A] == H) then jumps (forward) hither: 0x057D

0x057A: 02 07 23	ljmp	Label_055				; Jumps (forward) hither: 0x0723

Label_015:

0x057D: E5 65		mov	A, 0x65					; ACC = [0x65]
0x057F: B4 02 0C	cjne	A, #0x02, Label_017			; If (ACC != 0x02) then jumps (forward) hither: 0x058E

0x0582: E5 64		mov	A, 0x64					; ACC = [0x64]
0x0584: B4 08 04	cjne	A, #0x08, Label_016			; If (ACC != 0x08 {'\b'}) then jumps (forward) hither: 0x058B

0x0587: 78 15		mov	R0, #0x15				; R0 = 0x15
0x0589: 76 01		mov	@R0, #0x01				; [R0] = 0x01

Label_016:

0x058B: 02 07 31	ljmp	Label_056				; Jumps (forward) hither: 0x0731

Label_017:

0x058E: E5 65		mov	A, 0x65					; ACC = [0x65]
0x0590: B4 01 03	cjne	A, #0x01, Label_018			; If (ACC != 0x01) then jumps (forward) hither: 0x0596

0x0593: 02 07 3C	ljmp	Label_058				; Jumps (forward) hither: 0x073C

Label_018:

0x0596: E5 65		mov	A, 0x65					; ACC = [0x65]
0x0598: B4 03 03	cjne	A, #0x03, Label_019			; If (ACC != 0x03) then jumps (forward) hither: 0x059E

0x059B: 02 07 47	ljmp	Label_060				; Jumps (forward) hither: 0x0747

Label_019:

0x059E: E5 65		mov	A, 0x65					; ACC = [0x65]
0x05A0: B4 05 03	cjne	A, #0x05, Label_020			; If (ACC != 0x05) then jumps (forward) hither: 0x05A6

0x05A3: 02 07 52	ljmp	Label_062				; Jumps (forward) hither: 0x0752

Label_020:

0x05A6: E5 65		mov	A, 0x65					; ACC = [0x65]
0x05A8: 64 06		xrl	A, #0x06				; ACC ^= 0x06
0x05AA: 70 20		jnz	Label_024				; If (ACC != 0) then jumps (forward) hither: 0x05CC

0x05AC: 30 26 17	jnb	0x26, Label_023				; If ([0x26] == L) then jumps (forward) hither: 0x05C6

0x05AF: 12 19 04	lcall	Function_074				; Calls (forward) this: 0x1904 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1904)
0x05B2: F5 83		mov	DPH, A					; DPH = ACC
0x05B4: E4		clr	A					; ACC = 0
0x05B5: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x05B6: FD		mov	R5, A					; R5 = ACC
0x05B7: B4 FE 09	cjne	A, #0xFE, Label_022			; If (ACC != 0xFE) then jumps (forward) hither: 0x05C3

0x05BA: 30 24 03	jnb	0x24, Label_021				; If ([0x24] == L) then jumps (forward) hither: 0x05C0

0x05BD: C2 24		clr	0x24					; [0x24] = L
0x05BF: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_021:

0x05C0: D2 24		setb	0x24					; [0x24] = H
0x05C2: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_022:

0x05C3: 02 07 6A	ljmp	Label_064				; Jumps (forward) hither: 0x076A

Label_023:

0x05C6: 12 18 DE	lcall	Function_070				; Calls (forward) this: 0x18DE (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x18DE)
0x05C9: 02 07 6A	ljmp	Label_064				; Jumps (forward) hither: 0x076A

Label_024:

0x05CC: E5 65		mov	A, 0x65					; ACC = [0x65]
0x05CE: 64 07		xrl	A, #0x07				; ACC ^= 0x07 {'\a'}
0x05D0: 60 03		jz	Label_025				; If (ACC == 0) then jumps (forward) hither: 0x05D5

0x05D2: 02 06 B4	ljmp	Label_044				; Jumps (forward) hither: 0x06B4

Label_025:

0x05D5: 30 26 0B	jnb	0x26, Label_026				; If ([0x26] == L) then jumps (forward) hither: 0x05E3

0x05D8: 12 19 10	lcall	Function_075				; Calls (forward) this: 0x1910 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1910)
0x05DB: F5 83		mov	DPH, A					; DPH = ACC
0x05DD: E4		clr	A					; ACC = 0
0x05DE: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x05DF: FD		mov	R5, A					; R5 = ACC
0x05E0: 02 07 6A	ljmp	Label_064				; Jumps (forward) hither: 0x076A

Label_026:

0x05E3: 78 15		mov	R0, #0x15				; R0 = 0x15
0x05E5: E6		mov	A, @R0					; ACC = [R0]
0x05E6: 70 03		jnz	Label_027				; If (ACC != 0) then jumps (forward) hither: 0x05EB

0x05E8: 02 06 AD	ljmp	Label_043				; Jumps (forward) hither: 0x06AD

Label_027:

0x05EB: 12 18 BB	lcall	Function_066				; Calls (forward) this: 0x18BB (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x18BB)
0x05EE: B4 43 04	cjne	A, #0x43, Label_028			; If (ACC != 0x43 {'C'}) then jumps (forward) hither: 0x05F5

0x05F1: 7F 01		mov	R7, #0x01				; R7 = 0x01
0x05F3: 80 02		sjmp	Label_029				; Jumps (forward) hither: 0x05F7

Label_028:

0x05F5: 7F 00		mov	R7, #0x00				; R7 = 0x00 {'\0'}

Label_029:

0x05F7: EF		mov	A, R7					; ACC = R7
0x05F8: 60 29		jz	Label_032				; If (ACC == 0) then jumps (forward) hither: 0x0623

0x05FA: E4		clr	A					; ACC = 0
0x05FB: 78 14		mov	R0, #0x14				; R0 = 0x14
0x05FD: F6		mov	@R0, A					; [R0] = ACC
0x05FE: 78 17		mov	R0, #0x17				; R0 = 0x17
0x0600: E6		mov	A, @R0					; ACC = [R0]
0x0601: FF		mov	R7, A					; R7 = ACC
0x0602: 30 E0 0B	jnb	ACC_0, Label_030			; If (ACC_0 == L) then jumps (forward) hither: 0x0610

0x0605: 12 19 1C	lcall	Function_076				; Calls (forward) this: 0x191C (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x191C)
0x0608: 54 FE		anl	A, #0xFE				; ACC &= 0xFE
0x060A: F6		mov	@R0, A					; [R0] = ACC
0x060B: 75 12 04	mov	R2<#2>, #0x04				; R2<#2> = 0x04
0x060E: 80 09		sjmp	Label_031				; Jumps (forward) hither: 0x0619

Label_030:

0x0610: 12 18 FB	lcall	Function_073				; Calls (forward) this: 0x18FB (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x18FB)
0x0613: 44 01		orl	A, #0x01				; ACC |= 0x01
0x0615: F6		mov	@R0, A					; [R0] = ACC
0x0616: 75 12 06	mov	R2<#2>, #0x06				; R2<#2> = 0x06

Label_031:

0x0619: D2 C0		setb	P4_0					; P4_0 = H
0x061B: D2 C1		setb	P4_1					; P4_1 = H
0x061D: 12 07 E4	lcall	Function_013				; Calls (forward) this: 0x07E4 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x07E4)
0x0620: 12 26 9F	lcall	i2c_stop				; Calls (forward) this: 0x269F (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x269F)

Label_032:

0x0623: 12 18 BB	lcall	Function_066				; Calls (forward) this: 0x18BB (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x18BB)
0x0626: B4 44 04	cjne	A, #0x44, Label_033			; If (ACC != 0x44 {'D'}) then jumps (forward) hither: 0x062D

0x0629: 7F 01		mov	R7, #0x01				; R7 = 0x01
0x062B: 80 02		sjmp	Label_034				; Jumps (forward) hither: 0x062F

Label_033:

0x062D: 7F 00		mov	R7, #0x00				; R7 = 0x00 {'\0'}

Label_034:

0x062F: EF		mov	A, R7					; ACC = R7
0x0630: 60 29		jz	Label_037				; If (ACC == 0) then jumps (forward) hither: 0x065B

0x0632: 78 14		mov	R0, #0x14				; R0 = 0x14
0x0634: 76 01		mov	@R0, #0x01				; [R0] = 0x01
0x0636: 78 17		mov	R0, #0x17				; R0 = 0x17
0x0638: E6		mov	A, @R0					; ACC = [R0]
0x0639: FF		mov	R7, A					; R7 = ACC
0x063A: 30 E1 0B	jnb	ACC_1, Label_035			; If (ACC_1 == L) then jumps (forward) hither: 0x0648

0x063D: 12 19 1C	lcall	Function_076				; Calls (forward) this: 0x191C (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x191C)
0x0640: 54 FD		anl	A, #0xFD				; ACC &= 0xFD
0x0642: F6		mov	@R0, A					; [R0] = ACC
0x0643: 75 12 04	mov	R2<#2>, #0x04				; R2<#2> = 0x04
0x0646: 80 09		sjmp	Label_036				; Jumps (forward) hither: 0x0651

Label_035:

0x0648: 12 18 FB	lcall	Function_073				; Calls (forward) this: 0x18FB (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x18FB)
0x064B: 44 02		orl	A, #0x02				; ACC |= 0x02
0x064D: F6		mov	@R0, A					; [R0] = ACC
0x064E: 75 12 06	mov	R2<#2>, #0x06				; R2<#2> = 0x06

Label_036:

0x0651: D2 C0		setb	P4_0					; P4_0 = H
0x0653: D2 C1		setb	P4_1					; P4_1 = H
0x0655: 12 07 E4	lcall	Function_013				; Calls (forward) this: 0x07E4 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x07E4)
0x0658: 12 26 9F	lcall	i2c_stop				; Calls (forward) this: 0x269F (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x269F)

Label_037:

0x065B: 12 18 BB	lcall	Function_066				; Calls (forward) this: 0x18BB (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x18BB)
0x065E: B4 45 04	cjne	A, #0x45, Label_038			; If (ACC != 0x45 {'E'}) then jumps (forward) hither: 0x0665

0x0661: 7F 01		mov	R7, #0x01				; R7 = 0x01
0x0663: 80 02		sjmp	Label_039				; Jumps (forward) hither: 0x0667

Label_038:

0x0665: 7F 00		mov	R7, #0x00				; R7 = 0x00 {'\0'}

Label_039:

0x0667: EF		mov	A, R7					; ACC = R7
0x0668: 70 03		jnz	Label_040				; If (ACC != 0) then jumps (forward) hither: 0x066D

0x066A: 02 07 E3	ljmp	Label_073				; Jumps (forward) hither: 0x07E3

Label_040:

0x066D: 78 14		mov	R0, #0x14				; R0 = 0x14
0x066F: 76 02		mov	@R0, #0x02				; [R0] = 0x02
0x0671: 78 17		mov	R0, #0x17				; R0 = 0x17
0x0673: E6		mov	A, @R0					; ACC = [R0]
0x0674: FF		mov	R7, A					; R7 = ACC
0x0675: 30 E2 0B	jnb	ACC_2, Label_041			; If (ACC_2 == L) then jumps (forward) hither: 0x0683

0x0678: 12 19 1C	lcall	Function_076				; Calls (forward) this: 0x191C (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x191C)
0x067B: 54 FB		anl	A, #0xFB				; ACC &= 0xFB
0x067D: F6		mov	@R0, A					; [R0] = ACC
0x067E: 75 12 04	mov	R2<#2>, #0x04				; R2<#2> = 0x04
0x0681: 80 09		sjmp	Label_042				; Jumps (forward) hither: 0x068C

Label_041:

0x0683: 12 18 FB	lcall	Function_073				; Calls (forward) this: 0x18FB (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x18FB)
0x0686: 44 04		orl	A, #0x04				; ACC |= 0x04
0x0688: F6		mov	@R0, A					; [R0] = ACC
0x0689: 75 12 06	mov	R2<#2>, #0x06				; R2<#2> = 0x06

Label_042:

0x068C: D2 C0		setb	P4_0					; P4_0 = H
0x068E: D2 C1		setb	P4_1					; P4_1 = H
0x0690: 12 26 54	lcall	i2c_start				; Calls (forward) this: 0x2654 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2654)
0x0693: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x0695: 7F A0		mov	R7, #0xA0				; R7 = 0xA0
0x0697: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x069A: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x069C: E4		clr	A					; ACC = 0
0x069D: FF		mov	R7, A					; R7 = ACC
0x069E: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x06A1: 78 17		mov	R0, #0x17				; R0 = 0x17
0x06A3: E6		mov	A, @R0					; ACC = [R0]
0x06A4: FF		mov	R7, A					; R7 = ACC
0x06A5: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x06A7: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x06AA: 02 26 9F	ljmp	i2c_stop				; Jumps (forward) hither: 0x269F

Label_043:

0x06AD: 12 18 BB	lcall	Function_066				; Calls (forward) this: 0x18BB (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x18BB)
0x06B0: FD		mov	R5, A					; R5 = ACC
0x06B1: 02 07 6A	ljmp	Label_064				; Jumps (forward) hither: 0x076A

Label_044:

0x06B4: E5 65		mov	A, 0x65					; ACC = [0x65]
0x06B6: 64 0A		xrl	A, #0x0A				; ACC ^= 0x0A {'\n'}
0x06B8: 70 29		jnz	Label_048				; If (ACC != 0) then jumps (forward) hither: 0x06E3

0x06BA: 30 26 0B	jnb	0x26, Label_045				; If ([0x26] == L) then jumps (forward) hither: 0x06C8

0x06BD: 12 18 EF	lcall	Function_071				; Calls (forward) this: 0x18EF (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x18EF)
0x06C0: F5 83		mov	DPH, A					; DPH = ACC
0x06C2: E4		clr	A					; ACC = 0
0x06C3: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x06C4: FD		mov	R5, A					; R5 = ACC
0x06C5: 02 07 6A	ljmp	Label_064				; Jumps (forward) hither: 0x076A

Label_045:

0x06C8: E5 64		mov	A, 0x64					; ACC = [0x64]
0x06CA: 25 E0		add	A, ACC					; ACC += ACC
0x06CC: 30 1A 05	jnb	0x1A, Label_046				; If ([0x1A] == L) then jumps (forward) hither: 0x06D4

0x06CF: 12 18 F3	lcall	Function_072				; Calls (forward) this: 0x18F3 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x18F3)
0x06D2: 80 07		sjmp	Label_047				; Jumps (forward) hither: 0x06DB

Label_046:

0x06D4: 24 57		add	A, #0x57				; ACC += 0x57 {'W'}
0x06D6: F5 82		mov	DPL, A					; DPL = ACC
0x06D8: E4		clr	A					; ACC = 0
0x06D9: 34 09		addc	A, #0x09				; ACC += 0x09 + CY {'\t'}

Label_047:

0x06DB: F5 83		mov	DPH, A					; DPH = ACC
0x06DD: E4		clr	A					; ACC = 0
0x06DE: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x06DF: FD		mov	R5, A					; R5 = ACC
0x06E0: 02 07 6A	ljmp	Label_064				; Jumps (forward) hither: 0x076A

Label_048:

0x06E3: E5 65		mov	A, 0x65					; ACC = [0x65]
0x06E5: 64 09		xrl	A, #0x09				; ACC ^= 0x09 {'\t'}
0x06E7: 70 0A		jnz	Label_050				; If (ACC != 0) then jumps (forward) hither: 0x06F3

0x06E9: 30 26 05	jnb	0x26, Label_049				; If ([0x26] == L) then jumps (forward) hither: 0x06F1

0x06EC: A2 0A		mov	C, 0x0A					; CY = [0x0A]
0x06EE: 02 07 B6	ljmp	Label_068				; Jumps (forward) hither: 0x07B6

Label_049:

0x06F1: 80 49		sjmp	Label_058				; Jumps (forward) hither: 0x073C

Label_050:

0x06F3: E5 65		mov	A, 0x65					; ACC = [0x65]
0x06F5: 64 0C		xrl	A, #0x0C				; ACC ^= 0x0C {'\f'}
0x06F7: 60 03		jz	Label_051				; If (ACC == 0) then jumps (forward) hither: 0x06FC

0x06F9: 02 07 E3	ljmp	Label_073				; Jumps (forward) hither: 0x07E3

Label_051:

0x06FC: 30 26 22	jnb	0x26, Label_054				; If ([0x26] == L) then jumps (forward) hither: 0x0721

Label_052:

0x06FF: E5 E4		mov	A, TXFLG1				; ACC = TXFLG1
0x0701: 30 E3 FB	jnb	ACC_3, Label_052			; If (ACC_3 == L) then jumps (backward) hither: 0x06FF

0x0704: E5 E4		mov	A, TXFLG1				; ACC = TXFLG1
0x0706: 54 03		anl	A, #0x03				; ACC &= 0x03
0x0708: 70 F5		jnz	Label_052				; If (ACC != 0) then jumps (backward) hither: 0x06FF

0x070A: 12 07 FF	lcall	Function_014				; Calls (forward) this: 0x07FF (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x07FF)
0x070D: 12 17 0D	lcall	Function_063				; Calls (forward) this: 0x170D (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x170D)

Label_053:

0x0710: E5 E4		mov	A, TXFLG1				; ACC = TXFLG1
0x0712: 30 E3 FB	jnb	ACC_3, Label_053			; If (ACC_3 == L) then jumps (backward) hither: 0x0710

0x0715: E5 E4		mov	A, TXFLG1				; ACC = TXFLG1
0x0717: 54 03		anl	A, #0x03				; ACC &= 0x03
0x0719: 70 F5		jnz	Label_053				; If (ACC != 0) then jumps (backward) hither: 0x0710

0x071B: 12 08 0A	lcall	Function_015				; Calls (forward) this: 0x080A (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x080A)
0x071E: 02 07 E0	ljmp	Label_072				; Jumps (forward) hither: 0x07E0

Label_054:

0x0721: 80 19		sjmp	Label_058				; Jumps (forward) hither: 0x073C

Label_055:

0x0723: E5 65		mov	A, 0x65					; ACC = [0x65]
0x0725: B4 02 0F	cjne	A, #0x02, Label_057			; If (ACC != 0x02) then jumps (forward) hither: 0x0737

0x0728: E5 64		mov	A, 0x64					; ACC = [0x64]
0x072A: B4 08 04	cjne	A, #0x08, Label_056			; If (ACC != 0x08 {'\b'}) then jumps (forward) hither: 0x0731

0x072D: E4		clr	A					; ACC = 0
0x072E: 78 15		mov	R0, #0x15				; R0 = 0x15
0x0730: F6		mov	@R0, A					; [R0] = ACC

Label_056:

0x0731: 12 18 D6	lcall	Function_069				; Calls (forward) this: 0x18D6 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x18D6)
0x0734: 02 26 C3	ljmp	Function_128				; Jumps (forward) hither: 0x26C3

Label_057:

0x0737: E5 65		mov	A, 0x65					; ACC = [0x65]
0x0739: B4 01 06	cjne	A, #0x01, Label_059			; If (ACC != 0x01) then jumps (forward) hither: 0x0742

Label_058:

0x073C: 12 18 D6	lcall	Function_069				; Calls (forward) this: 0x18D6 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x18D6)
0x073F: 02 07 BA	ljmp	Label_069				; Jumps (forward) hither: 0x07BA

Label_059:

0x0742: E5 65		mov	A, 0x65					; ACC = [0x65]
0x0744: B4 03 06	cjne	A, #0x03, Label_061			; If (ACC != 0x03) then jumps (forward) hither: 0x074D

Label_060:

0x0747: 12 18 D6	lcall	Function_069				; Calls (forward) this: 0x18D6 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x18D6)
0x074A: 02 1E EF	ljmp	Label_434				; Jumps (forward) hither: 0x1EEF

Label_061:

0x074D: E5 65		mov	A, 0x65					; ACC = [0x65]
0x074F: B4 05 06	cjne	A, #0x05, Label_063			; If (ACC != 0x05) then jumps (forward) hither: 0x0758

Label_062:

0x0752: 12 18 D6	lcall	Function_069				; Calls (forward) this: 0x18D6 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x18D6)
0x0755: 02 25 70	ljmp	Label_564				; Jumps (forward) hither: 0x2570

Label_063:

0x0758: E5 65		mov	A, 0x65					; ACC = [0x65]
0x075A: 64 06		xrl	A, #0x06				; ACC ^= 0x06
0x075C: 70 14		jnz	Label_065				; If (ACC != 0) then jumps (forward) hither: 0x0772

0x075E: 12 19 04	lcall	Function_074				; Calls (forward) this: 0x1904 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1904)
0x0761: 12 18 CB	lcall	Function_067				; Calls (forward) this: 0x18CB (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x18CB)
0x0764: 12 1B FF	lcall	Function_084				; Calls (forward) this: 0x1BFF (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1BFF)
0x0767: 12 18 DE	lcall	Function_070				; Calls (forward) this: 0x18DE (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x18DE)

Label_064:

0x076A: A2 0A		mov	C, 0x0A					; CY = [0x0A]
0x076C: E4		clr	A					; ACC = 0
0x076D: 33		rlc	A					; ACC[76543210] = ACC[6543210C], CY = ACC[7]
0x076E: FF		mov	R7, A					; R7 = ACC
0x076F: 02 07 BA	ljmp	Label_069				; Jumps (forward) hither: 0x07BA

Label_065:

0x0772: E5 65		mov	A, 0x65					; ACC = [0x65]
0x0774: 64 07		xrl	A, #0x07				; ACC ^= 0x07 {'\a'}
0x0776: 70 11		jnz	Label_066				; If (ACC != 0) then jumps (forward) hither: 0x0789

0x0778: 12 19 10	lcall	Function_075				; Calls (forward) this: 0x1910 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1910)
0x077B: 12 18 CB	lcall	Function_067				; Calls (forward) this: 0x18CB (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x18CB)
0x077E: 12 1B FF	lcall	Function_084				; Calls (forward) this: 0x1BFF (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1BFF)
0x0781: 12 18 BB	lcall	Function_066				; Calls (forward) this: 0x18BB (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x18BB)
0x0784: 12 18 CF	lcall	Function_068				; Calls (forward) this: 0x18CF (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x18CF)
0x0787: 80 31		sjmp	Label_069				; Jumps (forward) hither: 0x07BA

Label_066:

0x0789: E5 65		mov	A, 0x65					; ACC = [0x65]
0x078B: 64 0A		xrl	A, #0x0A				; ACC ^= 0x0A {'\n'}
0x078D: 70 19		jnz	Label_067				; If (ACC != 0) then jumps (forward) hither: 0x07A8

0x078F: 12 18 EF	lcall	Function_071				; Calls (forward) this: 0x18EF (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x18EF)
0x0792: 12 18 CB	lcall	Function_067				; Calls (forward) this: 0x18CB (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x18CB)
0x0795: 12 1B FF	lcall	Function_084				; Calls (forward) this: 0x1BFF (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1BFF)
0x0798: E5 64		mov	A, 0x64					; ACC = [0x64]
0x079A: 25 E0		add	A, ACC					; ACC += ACC
0x079C: 24 57		add	A, #0x57				; ACC += 0x57 {'W'}
0x079E: F5 82		mov	DPL, A					; DPL = ACC
0x07A0: E4		clr	A					; ACC = 0
0x07A1: 34 09		addc	A, #0x09				; ACC += 0x09 + CY {'\t'}
0x07A3: 12 18 CB	lcall	Function_067				; Calls (forward) this: 0x18CB (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x18CB)
0x07A6: 80 12		sjmp	Label_069				; Jumps (forward) hither: 0x07BA

Label_067:

0x07A8: E5 65		mov	A, 0x65					; ACC = [0x65]
0x07AA: B4 09 10	cjne	A, #0x09, Label_070			; If (ACC != 0x09 {'\t'}) then jumps (forward) hither: 0x07BD

0x07AD: 12 18 D6	lcall	Function_069				; Calls (forward) this: 0x18D6 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x18D6)
0x07B0: 12 1B FF	lcall	Function_084				; Calls (forward) this: 0x1BFF (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1BFF)
0x07B3: A2 0A		mov	C, 0x0A					; CY = [0x0A]
0x07B5: E4		clr	A					; ACC = 0

Label_068:

0x07B6: 33		rlc	A					; ACC[76543210] = ACC[6543210C], CY = ACC[7]
0x07B7: FF		mov	R7, A					; R7 = ACC
0x07B8: 7D 66		mov	R5, #0x66				; R5 = 0x66 {'f'}

Label_069:

0x07BA: 02 1B FF	ljmp	Function_084				; Jumps (forward) hither: 0x1BFF

Label_070:

0x07BD: E5 65		mov	A, 0x65					; ACC = [0x65]
0x07BF: 64 0C		xrl	A, #0x0C				; ACC ^= 0x0C {'\f'}
0x07C1: 70 20		jnz	Label_073				; If (ACC != 0) then jumps (forward) hither: 0x07E3

0x07C3: A2 0A		mov	C, 0x0A					; CY = [0x0A]
0x07C5: 33		rlc	A					; ACC[76543210] = ACC[6543210C], CY = ACC[7]
0x07C6: FF		mov	R7, A					; R7 = ACC
0x07C7: AD 64		mov	R5, 0x64				; R5 = [0x64]
0x07C9: 12 1B FF	lcall	Function_084				; Calls (forward) this: 0x1BFF (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1BFF)
0x07CC: 12 08 0A	lcall	Function_015				; Calls (forward) this: 0x080A (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x080A)
0x07CF: 12 17 0D	lcall	Function_063				; Calls (forward) this: 0x170D (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x170D)

Label_071:

0x07D2: E5 E4		mov	A, TXFLG1				; ACC = TXFLG1
0x07D4: 30 E3 FB	jnb	ACC_3, Label_071			; If (ACC_3 == L) then jumps (backward) hither: 0x07D2

0x07D7: E5 E4		mov	A, TXFLG1				; ACC = TXFLG1
0x07D9: 54 03		anl	A, #0x03				; ACC &= 0x03
0x07DB: 70 F5		jnz	Label_071				; If (ACC != 0) then jumps (backward) hither: 0x07D2

0x07DD: 12 07 FF	lcall	Function_014				; Calls (forward) this: 0x07FF (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x07FF)

Label_072:

0x07E0: 12 17 0D	lcall	Function_063				; Calls (forward) this: 0x170D (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x170D)

Label_073:

0x07E3: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_013:

0x07E4: 12 26 54	lcall	i2c_start				; Calls (forward) this: 0x2654 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2654)
0x07E7: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x07E9: 7F A0		mov	R7, #0xA0				; R7 = 0xA0
0x07EB: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x07EE: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x07F0: E4		clr	A					; ACC = 0
0x07F1: FF		mov	R7, A					; R7 = ACC
0x07F2: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x07F5: 78 17		mov	R0, #0x17				; R0 = 0x17
0x07F7: E6		mov	A, @R0					; ACC = [R0]
0x07F8: FF		mov	R7, A					; R7 = ACC
0x07F9: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x07FB: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x07FE: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_014:

0x07FF: A2 0A		mov	C, 0x0A					; CY = [0x0A]
0x0801: E4		clr	A					; ACC = 0
0x0802: 33		rlc	A					; ACC[76543210] = ACC[6543210C], CY = ACC[7]
0x0803: FF		mov	R7, A					; R7 = ACC
0x0804: 7D 08		mov	R5, #0x08				; R5 = 0x08 {'\b'}
0x0806: 12 26 C3	lcall	Function_128				; Calls (forward) this: 0x26C3 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x26C3)
0x0809: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_015:

0x080A: A2 0A		mov	C, 0x0A					; CY = [0x0A]
0x080C: E4		clr	A					; ACC = 0
0x080D: 33		rlc	A					; ACC[76543210] = ACC[6543210C], CY = ACC[7]
0x080E: FF		mov	R7, A					; R7 = ACC
0x080F: 7D 13		mov	R5, #0x13				; R5 = 0x13
0x0811: 12 1B FF	lcall	Function_084				; Calls (forward) this: 0x1BFF (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1BFF)
0x0814: 22		ret						; PCH = [SP--], PCL = [SP--]

+----------+----------------------------------+----------------------------------+
|          |  00  01  02  03  04  05  06  07  |  00  01  02  03  04  05  06  07  |
+----------+----------------------------------+----------------------------------+
|  0x0815  |                      00  00  00  |                      00  00  00  |
|  0x0818  |  00  00  00  00  00  00  00  00  |  00  00  00  00  00  00  00  00  |
|  0x0820  |  00  00  00  02  08  02  40  00  |  00  00  00  02  08  02  '@' 00  |
|  0x0828  |  00  00  00  00  00  00  00  00  |  00  00  00  00  00  00  00  00  |
|  0x0830  |  00  00  00  02  04  00  00  00  |  00  00  00  02  04  00  00  00  |
|  0x0838  |  00  07  00  01  39  01  04  01  |  00  07  00  01  '9' 01  04  01  |
|  0x0840  |  16  04  00  00  00  00  00  01  |  16  04  00  00  00  00  00  01  |
|  0x0848  |  06  01  1B  01  07  01  14  01  |  06  01  1B  01  07  01  14  01  |
|  0x0850  |  2B  01  1E  01  35  00  00  01  |  '+' 01  1E  01  '5' 00  00  01  |
|  0x0858  |  09  01  08  01  1A  01  1F  01  |  09  01  08  01  1A  01  1F  01  |
|  0x0860  |  20  06  00  09  29  01  19  01  |  ' ' 06  00  09  ')' 01  19  01  |
|  0x0868  |  0A  01  17  01  15  01  21  01  |  0A  01  17  01  15  01  '!' 01  |
|  0x0870  |  22  0C  3C  06  01  00  00  01  |  '"' 0C  '<' 06  01  00  00  01  |
|  0x0878  |  0B  0A  00  01  1C  01  23  0A  |  0B  0A  00  01  1C  01  '#' 0A  |
|  0x0880  |  01  06  02  06  03  00  00  0A  |  01  06  02  06  03  00  00  0A  |
|  0x0888  |  02  0A  03  0A  04  0A  05  0A  |  02  0A  03  0A  04  0A  05  0A  |
|  0x0890  |  06  06  04  06  05  00  00  0A  |  06  06  04  06  05  00  00  0A  |
|  0x0898  |  07  0A  08  0A  09  0A  0A  00  |  07  0A  08  0A  09  0A  0A  00  |
|  0x08A0  |  00  07  01  07  02  0A  0B  0A  |  00  07  01  07  02  0A  0B  0A  |
|  0x08A8  |  0C  01  2F  00  00  01  2D  00  |  0C  01  '/' 00  00  01  '-' 00  |
|  0x08B0  |  00  07  03  07  04  01  05  01  |  00  07  03  07  04  01  05  01  |
|  0x08B8  |  36  01  34  00  00  00  00  01  |  '6' 01  '4' 00  00  00  00  01  |
|  0x08C0  |  2E  00  00  07  05  00  00  00  |  '.' 00  00  07  05  00  00  00  |
|  0x08C8  |  00  01  11  0A  0D  00  00  00  |  00  01  11  0A  0D  00  00  00  |
|  0x08D0  |  00  00  00  00  00  01  2C  0A  |  00  00  00  00  00  01  ',' 0A  |
|  0x08D8  |  0E  00  00  00  00  01  30  00  |  0E  00  00  00  00  01  '0' 00  |
|  0x08E0  |  00  07  06  00  00  02  02  00  |  00  07  06  00  00  02  02  00  |
|  0x08E8  |  00  00  00  00  00  00  00  00  |  00  00  00  00  00  00  00  00  |
|  0x08F0  |  00  00  00  02  20  07  07  07  |  00  00  00  02  ' ' 07  07  07  |
|  0x08F8  |  08  00  00  07  09  01  28  01  |  08  00  00  07  09  01  '(' 01  |
|  0x0900  |  31  07  0A  00  00  02  01  00  |  '1' 07  0A  00  00  02  01  00  |
|  0x0908  |  00  00  00  00  00  00  00  00  |  00  00  00  00  00  00  00  00  |
|  0x0910  |  00  00  00  02  10  00  00  00  |  00  00  00  02  10  00  00  00  |
|  0x0918  |  00  00  00  00  00  00  00  00  |  00  00  00  00  00  00  00  00  |
|  0x0920  |  00  00  00  00  00  00  00  00  |  00  00  00  00  00  00  00  00  |
|  0x0928  |  00  00  00  00  00  00  00  00  |  00  00  00  00  00  00  00  00  |
|  0x0930  |  00  00  00  00  00  3A  A5  3B  |  00  00  00  00  00  ':' A5  ';' |
|  0x0938  |  A6  3E  81  3D  7F  40  FE  3F  |  A6  '>' 81  '=' 7F  '@' FE  '?' |
|  0x0940  |  80  1D  64  42  53  41  49  44  |  80  1D  'd' 'B' 'S' 'A' 'I' 'D' |
|  0x0948  |  48  43  47  45  53  50  4A  4F  |  'H' 'C' 'G' 'E' 'S' 'P' 'J' 'O' |
|  0x0950  |  4D  51  4E  52  4B  2A  4C  18  |  'M' 'Q' 'N' 'R' 'K' '*' 'L' 18  |
|  0x0958  |  5C  24  5F  0E  5A  0D  59  0C  |  '\' '$' '_' 0E  'Z' 0D  'Y' 0C  |
|  0x0960  |  5D  25  60  26  61  0F  5B  13  |  ']' '%' '`' '&' 'a' 0F  '[' 13  |
|  0x0968  |  56  12  5E  27  55  10  62  33  |  'V' 12  '^' ''' 'U' 10  'b' '3' |
|  0x0970  |  57  37  63  38  54              |  'W' '7' 'c' '8' 'T'             |
+----------+----------------------------------+----------------------------------+

;-------------------------------------------------------------------------------

Function_016:

0x0975: 78 93		mov	R0, #0x93				; R0 = 0x93
0x0977: E6		mov	A, @R0					; ACC = [R0]
0x0978: 24 0F		add	A, #0x0F				; ACC += 0x0F
0x097A: 60 76		jz	Label_084				; If (ACC == 0) then jumps (forward) hither: 0x09F2

0x097C: 14		dec	A					; --ACC
0x097D: 70 03		jnz	Label_074				; If (ACC != 0) then jumps (forward) hither: 0x0982

0x097F: 02 0A 07	ljmp	Label_087				; Jumps (forward) hither: 0x0A07

Label_074:

0x0982: 24 FE		add	A, #0xFE				; ACC += 0xFE
0x0984: 70 03		jnz	Label_075				; If (ACC != 0) then jumps (forward) hither: 0x0989

0x0986: 02 0A 1A	ljmp	Label_089				; Jumps (forward) hither: 0x0A1A

Label_075:

0x0989: 14		dec	A					; --ACC
0x098A: 70 03		jnz	Label_076				; If (ACC != 0) then jumps (forward) hither: 0x098F

0x098C: 02 0A 52	ljmp	Label_095				; Jumps (forward) hither: 0x0A52

Label_076:

0x098F: 14		dec	A					; --ACC
0x0990: 70 03		jnz	Label_077				; If (ACC != 0) then jumps (forward) hither: 0x0995

0x0992: 02 0A 91	ljmp	Label_100				; Jumps (forward) hither: 0x0A91

Label_077:

0x0995: 14		dec	A					; --ACC
0x0996: 70 03		jnz	Label_078				; If (ACC != 0) then jumps (forward) hither: 0x099B

0x0998: 02 0A 2D	ljmp	Label_092				; Jumps (forward) hither: 0x0A2D

Label_078:

0x099B: 24 FA		add	A, #0xFA				; ACC += 0xFA
0x099D: 70 03		jnz	Label_079				; If (ACC != 0) then jumps (forward) hither: 0x09A2

0x099F: 02 0A 91	ljmp	Label_100				; Jumps (forward) hither: 0x0A91

Label_079:

0x09A2: 24 0D		add	A, #0x0D				; ACC += 0x0D {'\r'}
0x09A4: 60 03		jz	Label_080				; If (ACC == 0) then jumps (forward) hither: 0x09A9

0x09A6: 02 0A 9C	ljmp	Label_101				; Jumps (forward) hither: 0x0A9C

Label_080:

0x09A9: C2 AF		clr	EA					; EA = L
0x09AB: 12 18 53	lcall	Function_065				; Calls (forward) this: 0x1853 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1853)
0x09AE: 78 D6		mov	R0, #0xD6				; R0 = 0xD6
0x09B0: EF		mov	A, R7					; ACC = R7
0x09B1: F6		mov	@R0, A					; [R0] = ACC
0x09B2: D2 AF		setb	EA					; EA = H
0x09B4: 64 FA		xrl	A, #0xFA				; ACC ^= 0xFA
0x09B6: 70 32		jnz	Label_082				; If (ACC != 0) then jumps (forward) hither: 0x09EA

0x09B8: 78 AB		mov	R0, #0xAB				; R0 = 0xAB
0x09BA: E6		mov	A, @R0					; ACC = [R0]
0x09BB: 78 92		mov	R0, #0x92				; R0 = 0x92
0x09BD: 60 27		jz	Label_081				; If (ACC == 0) then jumps (forward) hither: 0x09E6

0x09BF: 76 E0		mov	@R0, #0xE0				; [R0] = 0xE0
0x09C1: C2 AF		clr	EA					; EA = L
0x09C3: 12 16 D0	lcall	Function_058				; Calls (forward) this: 0x16D0 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x16D0)
0x09C6: 7A 23		mov	R2, #0x23				; R2 = 0x23 {'#'}
0x09C8: 79 FF		mov	R1, #0xFF				; R1 = 0xFF
0x09CA: 75 69 02	mov	0x69, #0x02				; [0x69] = 0x02
0x09CD: 12 1E 2C	lcall	Function_093				; Calls (forward) this: 0x1E2C (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1E2C)
0x09D0: 90 24 01	mov	DPTR, #0x2401				; DPTR = 0x2401
0x09D3: E4		clr	A					; ACC = 0
0x09D4: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x09D5: FF		mov	R7, A					; R7 = ACC
0x09D6: 7B 00		mov	R3, #0x00				; R3 = 0x00 {'\0'}
0x09D8: 7A 00		mov	R2, #0x00				; R2 = 0x00 {'\0'}
0x09DA: 79 64		mov	R1, #0x64				; R1 = 0x64 {'d'}
0x09DC: 75 69 0C	mov	0x69, #0x0C				; [0x69] = 0x0C {'\f'}
0x09DF: 12 1A FA	lcall	Function_080				; Calls (forward) this: 0x1AFA (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1AFA)
0x09E2: D2 AF		setb	EA					; EA = H
0x09E4: 80 08		sjmp	Label_083				; Jumps (forward) hither: 0x09EE

Label_081:

0x09E6: 76 D0		mov	@R0, #0xD0				; [R0] = 0xD0
0x09E8: 80 04		sjmp	Label_083				; Jumps (forward) hither: 0x09EE

Label_082:

0x09EA: 78 92		mov	R0, #0x92				; R0 = 0x92
0x09EC: 76 D0		mov	@R0, #0xD0				; [R0] = 0xD0

Label_083:

0x09EE: 78 93		mov	R0, #0x93				; R0 = 0x93
0x09F0: 76 F1		mov	@R0, #0xF1				; [R0] = 0xF1

Label_084:

0x09F2: C2 AF		clr	EA					; EA = L
0x09F4: 12 1C 54	lcall	Function_085				; Calls (forward) this: 0x1C54 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1C54)
0x09F7: 12 16 EA	lcall	Function_060				; Calls (forward) this: 0x16EA (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x16EA)
0x09FA: BF FA 04	cjne	R7, #0xFA, Label_085			; If (R7 != 0xFA) then jumps (forward) hither: 0x0A01

0x09FD: 76 E1		mov	@R0, #0xE1				; [R0] = 0xE1
0x09FF: 80 02		sjmp	Label_086				; Jumps (forward) hither: 0x0A03

Label_085:

0x0A01: 76 D1		mov	@R0, #0xD1				; [R0] = 0xD1

Label_086:

0x0A03: 78 93		mov	R0, #0x93				; R0 = 0x93
0x0A05: 76 F2		mov	@R0, #0xF2				; [R0] = 0xF2

Label_087:

0x0A07: C2 AF		clr	EA					; EA = L
0x0A09: 12 1C A8	lcall	Function_087				; Calls (forward) this: 0x1CA8 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1CA8)
0x0A0C: 12 16 EA	lcall	Function_060				; Calls (forward) this: 0x16EA (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x16EA)
0x0A0F: BF FA 04	cjne	R7, #0xFA, Label_088			; If (R7 != 0xFA) then jumps (forward) hither: 0x0A16

0x0A12: 76 E2		mov	@R0, #0xE2				; [R0] = 0xE2
0x0A14: 80 37		sjmp	Label_094				; Jumps (forward) hither: 0x0A4D

Label_088:

0x0A16: 76 D2		mov	@R0, #0xD2				; [R0] = 0xD2
0x0A18: 80 33		sjmp	Label_094				; Jumps (forward) hither: 0x0A4D

Label_089:

0x0A1A: C2 AF		clr	EA					; EA = L
0x0A1C: 12 21 6E	lcall	Function_106				; Calls (forward) this: 0x216E (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x216E)
0x0A1F: 12 16 EA	lcall	Function_060				; Calls (forward) this: 0x16EA (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x16EA)
0x0A22: BF FA 04	cjne	R7, #0xFA, Label_090			; If (R7 != 0xFA) then jumps (forward) hither: 0x0A29

0x0A25: 76 E4		mov	@R0, #0xE4				; [R0] = 0xE4
0x0A27: 80 02		sjmp	Label_091				; Jumps (forward) hither: 0x0A2B

Label_090:

0x0A29: 76 D4		mov	@R0, #0xD4				; [R0] = 0xD4

Label_091:

0x0A2B: 80 20		sjmp	Label_094				; Jumps (forward) hither: 0x0A4D

Label_092:

0x0A2D: C2 AF		clr	EA					; EA = L
0x0A2F: 90 24 01	mov	DPTR, #0x2401				; DPTR = 0x2401
0x0A32: E4		clr	A					; ACC = 0
0x0A33: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x0A34: 7A 23		mov	R2, #0x23				; R2 = 0x23 {'#'}
0x0A36: 79 F8		mov	R1, #0xF8				; R1 = 0xF8
0x0A38: 90 23 F7	mov	DPTR, #0x23F7				; DPTR = 0x23F7
0x0A3B: 12 16 B7	lcall	Function_055				; Calls (forward) this: 0x16B7 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x16B7)
0x0A3E: 12 1E 2C	lcall	Function_093				; Calls (forward) this: 0x1E2C (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1E2C)
0x0A41: 12 16 EA	lcall	Function_060				; Calls (forward) this: 0x16EA (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x16EA)
0x0A44: BF FA 04	cjne	R7, #0xFA, Label_093			; If (R7 != 0xFA) then jumps (forward) hither: 0x0A4B

0x0A47: 76 E7		mov	@R0, #0xE7				; [R0] = 0xE7
0x0A49: 80 02		sjmp	Label_094				; Jumps (forward) hither: 0x0A4D

Label_093:

0x0A4B: 76 D7		mov	@R0, #0xD7				; [R0] = 0xD7

Label_094:

0x0A4D: 78 93		mov	R0, #0x93				; R0 = 0x93
0x0A4F: 76 FC		mov	@R0, #0xFC				; [R0] = 0xFC
0x0A51: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_095:

0x0A52: C2 AF		clr	EA					; EA = L
0x0A54: 12 1E 73	lcall	Function_094				; Calls (forward) this: 0x1E73 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1E73)
0x0A57: EF		mov	A, R7					; ACC = R7
0x0A58: 64 FA		xrl	A, #0xFA				; ACC ^= 0xFA
0x0A5A: 70 2A		jnz	Label_098				; If (ACC != 0) then jumps (forward) hither: 0x0A86

0x0A5C: 90 24 01	mov	DPTR, #0x2401				; DPTR = 0x2401
0x0A5F: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x0A60: FF		mov	R7, A					; R7 = ACC
0x0A61: 7B FF		mov	R3, #0xFF				; R3 = 0xFF
0x0A63: 7A 23		mov	R2, #0x23				; R2 = 0x23 {'#'}
0x0A65: 79 FC		mov	R1, #0xFC				; R1 = 0xFC
0x0A67: 90 23 FB	mov	DPTR, #0x23FB				; DPTR = 0x23FB
0x0A6A: E4		clr	A					; ACC = 0
0x0A6B: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x0A6C: F5 69		mov	0x69, A					; [0x69] = ACC
0x0A6E: 12 1E 2C	lcall	Function_093				; Calls (forward) this: 0x1E2C (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1E2C)
0x0A71: BF FA 10	cjne	R7, #0xFA, Label_097			; If (R7 != 0xFA) then jumps (forward) hither: 0x0A84

0x0A74: 78 AB		mov	R0, #0xAB				; R0 = 0xAB
0x0A76: E6		mov	A, @R0					; ACC = [R0]
0x0A77: 78 92		mov	R0, #0x92				; R0 = 0x92
0x0A79: B4 01 04	cjne	A, #0x01, Label_096			; If (ACC != 0x01) then jumps (forward) hither: 0x0A80

0x0A7C: 76 E5		mov	@R0, #0xE5				; [R0] = 0xE5
0x0A7E: 80 0A		sjmp	Label_099				; Jumps (forward) hither: 0x0A8A

Label_096:

0x0A80: 76 D5		mov	@R0, #0xD5				; [R0] = 0xD5
0x0A82: 80 06		sjmp	Label_099				; Jumps (forward) hither: 0x0A8A

Label_097:

0x0A84: 80 00		sjmp	Label_098				; Jumps (forward) hither: 0x0A86

Label_098:

0x0A86: 78 92		mov	R0, #0x92				; R0 = 0x92
0x0A88: 76 D5		mov	@R0, #0xD5				; [R0] = 0xD5

Label_099:

0x0A8A: 78 93		mov	R0, #0x93				; R0 = 0x93
0x0A8C: 76 FC		mov	@R0, #0xFC				; [R0] = 0xFC
0x0A8E: D2 AF		setb	EA					; EA = H
0x0A90: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_100:

0x0A91: E4		clr	A					; ACC = 0
0x0A92: 78 AB		mov	R0, #0xAB				; R0 = 0xAB
0x0A94: F6		mov	@R0, A					; [R0] = ACC
0x0A95: 78 93		mov	R0, #0x93				; R0 = 0x93
0x0A97: 76 FC		mov	@R0, #0xFC				; [R0] = 0xFC
0x0A99: 78 92		mov	R0, #0x92				; R0 = 0x92
0x0A9B: F6		mov	@R0, A					; [R0] = ACC

Label_101:

0x0A9C: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_017:

0x0A9D: E5 2F		mov	A, 0x2F					; ACC = [0x2F]
0x0A9F: 64 80		xrl	A, #0x80				; ACC ^= 0x80
0x0AA1: 60 09		jz	Label_102				; If (ACC == 0) then jumps (forward) hither: 0x0AAC

0x0AA3: E5 2F		mov	A, 0x2F					; ACC = [0x2F]
0x0AA5: 64 81		xrl	A, #0x81				; ACC ^= 0x81
0x0AA7: 60 03		jz	Label_102				; If (ACC == 0) then jumps (forward) hither: 0x0AAC

0x0AA9: 02 0B AD	ljmp	Label_124				; Jumps (forward) hither: 0x0BAD

Label_102:

0x0AAC: E5 32		mov	A, 0x32					; ACC = [0x32]
0x0AAE: 54 60		anl	A, #0x60				; ACC &= 0x60 {'`'}
0x0AB0: 24 E0		add	A, #0xE0				; ACC += 0xE0
0x0AB2: 70 03		jnz	Label_103				; If (ACC != 0) then jumps (forward) hither: 0x0AB7

0x0AB4: 02 0B 39	ljmp	Label_113				; Jumps (forward) hither: 0x0B39

Label_103:

0x0AB7: 24 20		add	A, #0x20				; ACC += 0x20 {' '}
0x0AB9: 60 03		jz	Label_104				; If (ACC == 0) then jumps (forward) hither: 0x0ABE

0x0ABB: 02 0B AB	ljmp	Label_123				; Jumps (forward) hither: 0x0BAB

Label_104:

0x0ABE: E5 2F		mov	A, 0x2F					; ACC = [0x2F]
0x0AC0: B4 81 03	cjne	A, #0x81, Label_105			; If (ACC != 0x81) then jumps (forward) hither: 0x0AC6

0x0AC3: 02 0B AD	ljmp	Label_124				; Jumps (forward) hither: 0x0BAD

Label_105:

0x0AC6: E5 32		mov	A, 0x32					; ACC = [0x32]
0x0AC8: 24 FE		add	A, #0xFE				; ACC += 0xFE
0x0ACA: 60 19		jz	Label_106				; If (ACC == 0) then jumps (forward) hither: 0x0AE5

0x0ACC: 14		dec	A					; --ACC
0x0ACD: 60 28		jz	Label_107				; If (ACC == 0) then jumps (forward) hither: 0x0AF7

0x0ACF: 24 02		add	A, #0x02				; ACC += 0x02
0x0AD1: 70 64		jnz	Label_112				; If (ACC != 0) then jumps (forward) hither: 0x0B37

0x0AD3: 75 4B 00	mov	0x4B, #0x00				; [0x4B] = 0x00 {'\0'}
0x0AD6: 75 4C 12	mov	0x4C, #0x12				; [0x4C] = 0x12
0x0AD9: 75 29 00	mov	0x29, #0x00				; [0x29] = 0x00 {'\0'}
0x0ADC: 75 2A FD	mov	0x2A, #0xFD				; [0x2A] = 0xFD
0x0ADF: 75 47 01	mov	0x47, #0x01				; [0x47] = 0x01
0x0AE2: 02 0B A4	ljmp	Label_120				; Jumps (forward) hither: 0x0BA4

Label_106:

0x0AE5: 75 4B 00	mov	0x4B, #0x00				; [0x4B] = 0x00 {'\0'}
0x0AE8: 75 4C 3B	mov	0x4C, #0x3B				; [0x4C] = 0x3B {';'}
0x0AEB: 75 29 04	mov	0x29, #0x04				; [0x29] = 0x04
0x0AEE: 75 2A 38	mov	0x2A, #0x38				; [0x2A] = 0x38 {'8'}
0x0AF1: 75 47 02	mov	0x47, #0x02				; [0x47] = 0x02
0x0AF4: 02 0B A4	ljmp	Label_120				; Jumps (forward) hither: 0x0BA4

Label_107:

0x0AF7: E5 31		mov	A, 0x31					; ACC = [0x31]
0x0AF9: 14		dec	A					; --ACC
0x0AFA: 60 16		jz	Label_108				; If (ACC == 0) then jumps (forward) hither: 0x0B12

0x0AFC: 14		dec	A					; --ACC
0x0AFD: 60 1F		jz	Label_109				; If (ACC == 0) then jumps (forward) hither: 0x0B1E

0x0AFF: 24 03		add	A, #0x03				; ACC += 0x03
0x0B01: 60 27		jz	Label_110				; If (ACC == 0) then jumps (forward) hither: 0x0B2A

0x0B03: 14		dec	A					; --ACC
0x0B04: 70 2F		jnz	Label_111				; If (ACC != 0) then jumps (forward) hither: 0x0B35

0x0B06: 75 29 00	mov	0x29, #0x00				; [0x29] = 0x00 {'\0'}
0x0B09: 75 2A 97	mov	0x2A, #0x97				; [0x2A] = 0x97
0x0B0C: 12 11 35	lcall	Function_035				; Calls (forward) this: 0x1135 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1135)
0x0B0F: 02 0B A4	ljmp	Label_120				; Jumps (forward) hither: 0x0BA4

Label_108:

0x0B12: 75 29 00	mov	0x29, #0x00				; [0x29] = 0x00 {'\0'}
0x0B15: 75 2A 9B	mov	0x2A, #0x9B				; [0x2A] = 0x9B
0x0B18: 12 11 35	lcall	Function_035				; Calls (forward) this: 0x1135 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1135)
0x0B1B: 02 0B A4	ljmp	Label_120				; Jumps (forward) hither: 0x0BA4

Label_109:

0x0B1E: 75 29 00	mov	0x29, #0x00				; [0x29] = 0x00 {'\0'}
0x0B21: 75 2A BC	mov	0x2A, #0xBC				; [0x2A] = 0xBC
0x0B24: 12 11 35	lcall	Function_035				; Calls (forward) this: 0x1135 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1135)
0x0B27: 02 0B A4	ljmp	Label_120				; Jumps (forward) hither: 0x0BA4

Label_110:

0x0B2A: 75 29 00	mov	0x29, #0x00				; [0x29] = 0x00 {'\0'}
0x0B2D: 75 2A 7E	mov	0x2A, #0x7E				; [0x2A] = 0x7E {'~'}
0x0B30: 12 11 35	lcall	Function_035				; Calls (forward) this: 0x1135 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1135)
0x0B33: 80 6F		sjmp	Label_120				; Jumps (forward) hither: 0x0BA4

Label_111:

0x0B35: 80 76		sjmp	Label_124				; Jumps (forward) hither: 0x0BAD

Label_112:

0x0B37: 80 74		sjmp	Label_124				; Jumps (forward) hither: 0x0BAD

Label_113:

0x0B39: E5 34		mov	A, 0x34					; ACC = [0x34]
0x0B3B: 70 05		jnz	Label_114				; If (ACC != 0) then jumps (forward) hither: 0x0B42

0x0B3D: E5 2F		mov	A, 0x2F					; ACC = [0x2F]
0x0B3F: B4 80 02	cjne	A, #0x80, Label_115			; If (ACC != 0x80) then jumps (forward) hither: 0x0B44

Label_114:

0x0B42: 80 69		sjmp	Label_124				; Jumps (forward) hither: 0x0BAD

Label_115:

0x0B44: E5 33		mov	A, 0x33					; ACC = [0x33]
0x0B46: 70 2D		jnz	Label_118				; If (ACC != 0) then jumps (forward) hither: 0x0B75

0x0B48: E5 32		mov	A, 0x32					; ACC = [0x32]
0x0B4A: 24 DE		add	A, #0xDE				; ACC += 0xDE
0x0B4C: 60 14		jz	Label_116				; If (ACC == 0) then jumps (forward) hither: 0x0B62

0x0B4E: 04		inc	A					; ++ACC
0x0B4F: 70 22		jnz	Label_117				; If (ACC != 0) then jumps (forward) hither: 0x0B73

0x0B51: 75 4B 00	mov	0x4B, #0x00				; [0x4B] = 0x00 {'\0'}
0x0B54: 75 4C 09	mov	0x4C, #0x09				; [0x4C] = 0x09 {'\t'}
0x0B57: 75 29 04	mov	0x29, #0x04				; [0x29] = 0x04
0x0B5A: 75 2A 4A	mov	0x2A, #0x4A				; [0x2A] = 0x4A {'J'}
0x0B5D: 75 47 03	mov	0x47, #0x03				; [0x47] = 0x03
0x0B60: 80 42		sjmp	Label_120				; Jumps (forward) hither: 0x0BA4

Label_116:

0x0B62: 75 4B 00	mov	0x4B, #0x00				; [0x4B] = 0x00 {'\0'}
0x0B65: 75 4C 41	mov	0x4C, #0x41				; [0x4C] = 0x41 {'A'}
0x0B68: 75 29 01	mov	0x29, #0x01				; [0x29] = 0x01
0x0B6B: 75 2A 0F	mov	0x2A, #0x0F				; [0x2A] = 0x0F
0x0B6E: 75 47 04	mov	0x47, #0x04				; [0x47] = 0x04
0x0B71: 80 31		sjmp	Label_120				; Jumps (forward) hither: 0x0BA4

Label_117:

0x0B73: 80 38		sjmp	Label_124				; Jumps (forward) hither: 0x0BAD

Label_118:

0x0B75: E5 33		mov	A, 0x33					; ACC = [0x33]
0x0B77: 64 01		xrl	A, #0x01				; ACC ^= 0x01
0x0B79: 70 2E		jnz	Label_122				; If (ACC != 0) then jumps (forward) hither: 0x0BA9

0x0B7B: E5 32		mov	A, 0x32					; ACC = [0x32]
0x0B7D: 24 DE		add	A, #0xDE				; ACC += 0xDE
0x0B7F: 60 14		jz	Label_119				; If (ACC == 0) then jumps (forward) hither: 0x0B95

0x0B81: 04		inc	A					; ++ACC
0x0B82: 70 23		jnz	Label_121				; If (ACC != 0) then jumps (forward) hither: 0x0BA7

0x0B84: 75 4B 00	mov	0x4B, #0x00				; [0x4B] = 0x00 {'\0'}
0x0B87: 75 4C 09	mov	0x4C, #0x09				; [0x4C] = 0x09 {'\t'}
0x0B8A: 75 29 04	mov	0x29, #0x04				; [0x29] = 0x04
0x0B8D: 75 2A 63	mov	0x2A, #0x63				; [0x2A] = 0x63 {'c'}
0x0B90: 75 47 05	mov	0x47, #0x05				; [0x47] = 0x05
0x0B93: 80 0F		sjmp	Label_120				; Jumps (forward) hither: 0x0BA4

Label_119:

0x0B95: 75 4B 01	mov	0x4B, #0x01				; [0x4B] = 0x01
0x0B98: 75 4C E7	mov	0x4C, #0xE7				; [0x4C] = 0xE7
0x0B9B: 75 29 01	mov	0x29, #0x01				; [0x29] = 0x01
0x0B9E: 75 2A 50	mov	0x2A, #0x50				; [0x2A] = 0x50 {'P'}
0x0BA1: 75 47 06	mov	0x47, #0x06				; [0x47] = 0x06

Label_120:

0x0BA4: 02 16 20	ljmp	Label_286				; Jumps (forward) hither: 0x1620

Label_121:

0x0BA7: 80 04		sjmp	Label_124				; Jumps (forward) hither: 0x0BAD

Label_122:

0x0BA9: 80 02		sjmp	Label_124				; Jumps (forward) hither: 0x0BAD

Label_123:

0x0BAB: 80 00		sjmp	Label_124				; Jumps (forward) hither: 0x0BAD

Label_124:

0x0BAD: 12 27 29	lcall	Label_589				; Calls (forward) this: 0x2729 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2729)
0x0BB0: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_018:

0x0BB1: 12 26 16	lcall	Function_123				; Calls (forward) this: 0x2616 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2616)
0x0BB4: 50 03		jnc	Label_125				; If (CY == L) then jumps (forward) hither: 0x0BB9

0x0BB6: 02 0C B1	ljmp	Label_137				; Jumps (forward) hither: 0x0CB1

Label_125:

0x0BB9: E5 34		mov	A, 0x34					; ACC = [0x34]
0x0BBB: 70 1F		jnz	Label_127				; If (ACC != 0) then jumps (forward) hither: 0x0BDC

0x0BBD: E5 33		mov	A, 0x33					; ACC = [0x33]
0x0BBF: 70 1B		jnz	Label_127				; If (ACC != 0) then jumps (forward) hither: 0x0BDC

0x0BC1: E5 31		mov	A, 0x31					; ACC = [0x31]
0x0BC3: 70 17		jnz	Label_127				; If (ACC != 0) then jumps (forward) hither: 0x0BDC

0x0BC5: E5 32		mov	A, 0x32					; ACC = [0x32]
0x0BC7: B4 02 0F	cjne	A, #0x02, Label_126			; If (ACC != 0x02) then jumps (forward) hither: 0x0BD9

0x0BCA: E5 2B		mov	A, 0x2B					; ACC = [0x2B]
0x0BCC: 54 07		anl	A, #0x07				; ACC &= 0x07 {'\a'}
0x0BCE: F5 EA		mov	TXDAT0, A				; TXDAT0 = ACC
0x0BD0: 75 49 02	mov	0x49, #0x02				; [0x49] = 0x02
0x0BD3: 75 EB 01	mov	TXCNT0, #0x01				; TXCNT0 = 0x01
0x0BD6: 02 0C 8A	ljmp	Label_133				; Jumps (forward) hither: 0x0C8A

Label_126:

0x0BD9: 02 0C B1	ljmp	Label_137				; Jumps (forward) hither: 0x0CB1

Label_127:

0x0BDC: E5 31		mov	A, 0x31					; ACC = [0x31]
0x0BDE: 64 05		xrl	A, #0x05				; ACC ^= 0x05
0x0BE0: 70 1B		jnz	Label_128				; If (ACC != 0) then jumps (forward) hither: 0x0BFD

0x0BE2: E5 32		mov	A, 0x32					; ACC = [0x32]
0x0BE4: B4 03 16	cjne	A, #0x03, Label_128			; If (ACC != 0x03) then jumps (forward) hither: 0x0BFD

0x0BE7: 75 EA 05	mov	TXDAT0, #0x05				; TXDAT0 = 0x05
0x0BEA: 78 92		mov	R0, #0x92				; R0 = 0x92
0x0BEC: E6		mov	A, @R0					; ACC = [R0]
0x0BED: F5 EA		mov	TXDAT0, A				; TXDAT0 = ACC
0x0BEF: 78 AB		mov	R0, #0xAB				; R0 = 0xAB
0x0BF1: E6		mov	A, @R0					; ACC = [R0]
0x0BF2: F5 EA		mov	TXDAT0, A				; TXDAT0 = ACC
0x0BF4: 75 49 02	mov	0x49, #0x02				; [0x49] = 0x02
0x0BF7: 75 EB 03	mov	TXCNT0, #0x03				; TXCNT0 = 0x03
0x0BFA: 02 0C 8A	ljmp	Label_133				; Jumps (forward) hither: 0x0C8A

Label_128:

0x0BFD: E5 31		mov	A, 0x31					; ACC = [0x31]
0x0BFF: B4 06 21	cjne	A, #0x06, Label_129			; If (ACC != 0x06) then jumps (forward) hither: 0x0C23

0x0C02: E5 32		mov	A, 0x32					; ACC = [0x32]
0x0C04: B4 03 1C	cjne	A, #0x03, Label_129			; If (ACC != 0x03) then jumps (forward) hither: 0x0C23

0x0C07: E5 35		mov	A, 0x35					; ACC = [0x35]
0x0C09: B4 10 17	cjne	A, #0x10, Label_129			; If (ACC != 0x10) then jumps (forward) hither: 0x0C23

0x0C0C: E5 36		mov	A, 0x36					; ACC = [0x36]
0x0C0E: B4 04 12	cjne	A, #0x04, Label_129			; If (ACC != 0x04) then jumps (forward) hither: 0x0C23

0x0C11: 75 29 00	mov	0x29, #0x00				; [0x29] = 0x00 {'\0'}
0x0C14: 75 2A D7	mov	0x2A, #0xD7				; [0x2A] = 0xD7
0x0C17: 75 4B 00	mov	0x4B, #0x00				; [0x4B] = 0x00 {'\0'}
0x0C1A: 75 4C 25	mov	0x4C, #0x25				; [0x4C] = 0x25 {'%'}
0x0C1D: 75 47 08	mov	0x47, #0x08				; [0x47] = 0x08 {'\b'}
0x0C20: 02 0C AC	ljmp	Label_135				; Jumps (forward) hither: 0x0CAC

Label_129:

0x0C23: E5 31		mov	A, 0x31					; ACC = [0x31]
0x0C25: 64 1F		xrl	A, #0x1F				; ACC ^= 0x1F
0x0C27: 70 15		jnz	Label_130				; If (ACC != 0) then jumps (forward) hither: 0x0C3E

0x0C29: E5 32		mov	A, 0x32					; ACC = [0x32]
0x0C2B: B4 03 10	cjne	A, #0x03, Label_130			; If (ACC != 0x03) then jumps (forward) hither: 0x0C3E

0x0C2E: E5 33		mov	A, 0x33					; ACC = [0x33]
0x0C30: B4 01 0B	cjne	A, #0x01, Label_130			; If (ACC != 0x01) then jumps (forward) hither: 0x0C3E

0x0C33: 75 EA 1F	mov	TXDAT0, #0x1F				; TXDAT0 = 0x1F
0x0C36: 75 EA 04	mov	TXDAT0, #0x04				; TXDAT0 = 0x04
0x0C39: 12 11 49	lcall	Function_038				; Calls (forward) this: 0x1149 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1149)
0x0C3C: 80 4C		sjmp	Label_133				; Jumps (forward) hither: 0x0C8A

Label_130:

0x0C3E: E5 31		mov	A, 0x31					; ACC = [0x31]
0x0C40: 64 25		xrl	A, #0x25				; ACC ^= 0x25 {'%'}
0x0C42: 70 14		jnz	Label_131				; If (ACC != 0) then jumps (forward) hither: 0x0C58

0x0C44: E5 32		mov	A, 0x32					; ACC = [0x32]
0x0C46: B4 03 0F	cjne	A, #0x03, Label_131			; If (ACC != 0x03) then jumps (forward) hither: 0x0C58

0x0C49: E5 33		mov	A, 0x33					; ACC = [0x33]
0x0C4B: B4 01 0A	cjne	A, #0x01, Label_131			; If (ACC != 0x01) then jumps (forward) hither: 0x0C58

0x0C4E: 75 EA 25	mov	TXDAT0, #0x25				; TXDAT0 = 0x25 {'%'}
0x0C51: 78 D4		mov	R0, #0xD4				; R0 = 0xD4
0x0C53: 12 11 46	lcall	Function_036				; Calls (forward) this: 0x1146 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1146)
0x0C56: 80 32		sjmp	Label_133				; Jumps (forward) hither: 0x0C8A

Label_131:

0x0C58: E5 31		mov	A, 0x31					; ACC = [0x31]
0x0C5A: 64 22		xrl	A, #0x22				; ACC ^= 0x22 {'"'}
0x0C5C: 70 14		jnz	Label_132				; If (ACC != 0) then jumps (forward) hither: 0x0C72

0x0C5E: E5 32		mov	A, 0x32					; ACC = [0x32]
0x0C60: B4 03 0F	cjne	A, #0x03, Label_132			; If (ACC != 0x03) then jumps (forward) hither: 0x0C72

0x0C63: E5 33		mov	A, 0x33					; ACC = [0x33]
0x0C65: B4 01 0A	cjne	A, #0x01, Label_132			; If (ACC != 0x01) then jumps (forward) hither: 0x0C72

0x0C68: 75 EA 22	mov	TXDAT0, #0x22				; TXDAT0 = 0x22 {'"'}
0x0C6B: 78 BA		mov	R0, #0xBA				; R0 = 0xBA
0x0C6D: 12 11 46	lcall	Function_036				; Calls (forward) this: 0x1146 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1146)
0x0C70: 80 18		sjmp	Label_133				; Jumps (forward) hither: 0x0C8A

Label_132:

0x0C72: E5 31		mov	A, 0x31					; ACC = [0x31]
0x0C74: 64 23		xrl	A, #0x23				; ACC ^= 0x23 {'#'}
0x0C76: 70 16		jnz	Label_134				; If (ACC != 0) then jumps (forward) hither: 0x0C8E

0x0C78: E5 32		mov	A, 0x32					; ACC = [0x32]
0x0C7A: B4 03 11	cjne	A, #0x03, Label_134			; If (ACC != 0x03) then jumps (forward) hither: 0x0C8E

0x0C7D: E5 33		mov	A, 0x33					; ACC = [0x33]
0x0C7F: B4 01 0C	cjne	A, #0x01, Label_134			; If (ACC != 0x01) then jumps (forward) hither: 0x0C8E

0x0C82: 75 EA 23	mov	TXDAT0, #0x23				; TXDAT0 = 0x23 {'#'}
0x0C85: 78 D5		mov	R0, #0xD5				; R0 = 0xD5
0x0C87: 12 11 46	lcall	Function_036				; Calls (forward) this: 0x1146 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1146)

Label_133:

0x0C8A: 12 11 1B	lcall	Function_032				; Calls (forward) this: 0x111B (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x111B)
0x0C8D: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_134:

0x0C8E: E5 31		mov	A, 0x31					; ACC = [0x31]
0x0C90: B4 20 1C	cjne	A, #0x20, Label_136			; If (ACC != 0x20 {' '}) then jumps (forward) hither: 0x0CAF

0x0C93: E5 32		mov	A, 0x32					; ACC = [0x32]
0x0C95: B4 03 17	cjne	A, #0x03, Label_136			; If (ACC != 0x03) then jumps (forward) hither: 0x0CAF

0x0C98: E5 33		mov	A, 0x33					; ACC = [0x33]
0x0C9A: B4 01 12	cjne	A, #0x01, Label_136			; If (ACC != 0x01) then jumps (forward) hither: 0x0CAF

0x0C9D: 74 01		mov	A, #0x01				; ACC = 0x01
0x0C9F: F5 4B		mov	0x4B, A					; [0x4B] = ACC
0x0CA1: F5 4C		mov	0x4C, A					; [0x4C] = ACC
0x0CA3: 75 29 03	mov	0x29, #0x03				; [0x29] = 0x03
0x0CA6: 75 2A 37	mov	0x2A, #0x37				; [0x2A] = 0x37 {'7'}
0x0CA9: 75 47 05	mov	0x47, #0x05				; [0x47] = 0x05

Label_135:

0x0CAC: 02 16 20	ljmp	Label_286				; Jumps (forward) hither: 0x1620

Label_136:

0x0CAF: 80 00		sjmp	Label_137				; Jumps (forward) hither: 0x0CB1

Label_137:

0x0CB1: 12 27 29	lcall	Label_589				; Calls (forward) this: 0x2729 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2729)
0x0CB4: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_019:

0x0CB5: 8B 5E		mov	0x5E, R3				; [0x5E] = R3
0x0CB7: 8A 5F		mov	0x5F, R2				; [0x5F] = R2
0x0CB9: 89 60		mov	0x60, R1				; [0x60] = R1
0x0CBB: 90 00 01	mov	DPTR, #0x0001				; DPTR = 0x0001
0x0CBE: 12 17 95	lcall	?C?CLDOPTR				; Calls (forward) this: 0x1795 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1795)
0x0CC1: 24 2F		add	A, #0x2F				; ACC += 0x2F {'/'}
0x0CC3: 60 2E		jz	Label_139				; If (ACC == 0) then jumps (forward) hither: 0x0CF3

0x0CC5: 14		dec	A					; --ACC
0x0CC6: 60 49		jz	Label_140				; If (ACC == 0) then jumps (forward) hither: 0x0D11

0x0CC8: 24 02		add	A, #0x02				; ACC += 0x02
0x0CCA: 70 74		jnz	Label_142				; If (ACC != 0) then jumps (forward) hither: 0x0D40

0x0CCC: 90 00 02	mov	DPTR, #0x0002				; DPTR = 0x0002
0x0CCF: 74 A0		mov	A, #0xA0				; ACC = 0xA0
0x0CD1: 12 17 C2	lcall	?C?CSTOPTR				; Calls (forward) this: 0x17C2 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x17C2)
0x0CD4: 90 00 03	mov	DPTR, #0x0003				; DPTR = 0x0003
0x0CD7: 74 14		mov	A, #0x14				; ACC = 0x14
0x0CD9: 12 0D 7C	lcall	Function_022				; Calls (forward) this: 0x0D7C (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x0D7C)
0x0CDC: EF		mov	A, R7					; ACC = R7
0x0CDD: 64 FA		xrl	A, #0xFA				; ACC ^= 0xFA
0x0CDF: 70 0F		jnz	Label_138				; If (ACC != 0) then jumps (forward) hither: 0x0CF0

0x0CE1: 90 00 02	mov	DPTR, #0x0002				; DPTR = 0x0002
0x0CE4: 12 0D 6C	lcall	Function_021				; Calls (forward) this: 0x0D6C (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x0D6C)
0x0CE7: 12 0D 41	lcall	Function_020				; Calls (forward) this: 0x0D41 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x0D41)
0x0CEA: 12 17 03	lcall	Function_062				; Calls (forward) this: 0x1703 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1703)
0x0CED: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)

Label_138:

0x0CF0: 12 26 9F	lcall	i2c_stop				; Calls (forward) this: 0x269F (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x269F)

Label_139:

0x0CF3: 74 34		mov	A, #0x34				; ACC = 0x34 {'4'}
0x0CF5: 12 16 F3	lcall	Function_061				; Calls (forward) this: 0x16F3 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x16F3)
0x0CF8: 74 A0		mov	A, #0xA0				; ACC = 0xA0
0x0CFA: 12 17 C2	lcall	?C?CSTOPTR				; Calls (forward) this: 0x17C2 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x17C2)
0x0CFD: 90 00 05	mov	DPTR, #0x0005				; DPTR = 0x0005
0x0D00: 74 18		mov	A, #0x18				; ACC = 0x18
0x0D02: 12 17 C2	lcall	?C?CSTOPTR				; Calls (forward) this: 0x17C2 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x17C2)
0x0D05: 12 26 54	lcall	i2c_start				; Calls (forward) this: 0x2654 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2654)
0x0D08: 12 0D 41	lcall	Function_020				; Calls (forward) this: 0x0D41 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x0D41)
0x0D0B: 12 17 03	lcall	Function_062				; Calls (forward) this: 0x1703 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1703)
0x0D0E: 02 19 23	ljmp	i2c_sendbyte				; Jumps (forward) hither: 0x1923

Label_140:

0x0D11: 12 26 9F	lcall	i2c_stop				; Calls (forward) this: 0x269F (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x269F)
0x0D14: 74 A0		mov	A, #0xA0				; ACC = 0xA0
0x0D16: 12 16 F3	lcall	Function_061				; Calls (forward) this: 0x16F3 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x16F3)
0x0D19: 74 04		mov	A, #0x04				; ACC = 0x04
0x0D1B: 12 17 C2	lcall	?C?CSTOPTR				; Calls (forward) this: 0x17C2 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x17C2)
0x0D1E: 90 00 05	mov	DPTR, #0x0005				; DPTR = 0x0005
0x0D21: 74 EE		mov	A, #0xEE				; ACC = 0xEE
0x0D23: 12 0D 7C	lcall	Function_022				; Calls (forward) this: 0x0D7C (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x0D7C)
0x0D26: EF		mov	A, R7					; ACC = R7
0x0D27: 64 FA		xrl	A, #0xFA				; ACC ^= 0xFA
0x0D29: 70 12		jnz	Label_141				; If (ACC != 0) then jumps (forward) hither: 0x0D3D

0x0D2B: 90 00 03	mov	DPTR, #0x0003				; DPTR = 0x0003
0x0D2E: 12 0D 90	lcall	Function_023				; Calls (forward) this: 0x0D90 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x0D90)
0x0D31: 90 00 04	mov	DPTR, #0x0004				; DPTR = 0x0004
0x0D34: 12 0D 90	lcall	Function_023				; Calls (forward) this: 0x0D90 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x0D90)
0x0D37: 90 00 05	mov	DPTR, #0x0005				; DPTR = 0x0005
0x0D3A: 12 0D 6C	lcall	Function_021				; Calls (forward) this: 0x0D6C (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x0D6C)

Label_141:

0x0D3D: 12 26 9F	lcall	i2c_stop				; Calls (forward) this: 0x269F (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x269F)

Label_142:

0x0D40: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_020:

0x0D41: AB 5E		mov	R3, 0x5E				; R3 = [0x5E]
0x0D43: AA 5F		mov	R2, 0x5F				; R2 = [0x5F]
0x0D45: A9 60		mov	R1, 0x60				; R1 = [0x60]
0x0D47: 90 00 03	mov	DPTR, #0x0003				; DPTR = 0x0003
0x0D4A: 12 17 95	lcall	?C?CLDOPTR				; Calls (forward) this: 0x1795 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1795)
0x0D4D: FF		mov	R7, A					; R7 = ACC
0x0D4E: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x0D50: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x0D53: AB 5E		mov	R3, 0x5E				; R3 = [0x5E]
0x0D55: AA 5F		mov	R2, 0x5F				; R2 = [0x5F]
0x0D57: A9 60		mov	R1, 0x60				; R1 = [0x60]
0x0D59: 90 00 04	mov	DPTR, #0x0004				; DPTR = 0x0004
0x0D5C: 12 17 95	lcall	?C?CLDOPTR				; Calls (forward) this: 0x1795 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1795)
0x0D5F: FF		mov	R7, A					; R7 = ACC
0x0D60: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x0D62: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x0D65: AB 5E		mov	R3, 0x5E				; R3 = [0x5E]
0x0D67: AA 5F		mov	R2, 0x5F				; R2 = [0x5F]
0x0D69: A9 60		mov	R1, 0x60				; R1 = [0x60]
0x0D6B: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_021:

0x0D6C: AB 5E		mov	R3, 0x5E				; R3 = [0x5E]
0x0D6E: AA 5F		mov	R2, 0x5F				; R2 = [0x5F]
0x0D70: A9 60		mov	R1, 0x60				; R1 = [0x60]
0x0D72: 12 17 95	lcall	?C?CLDOPTR				; Calls (forward) this: 0x1795 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1795)
0x0D75: FF		mov	R7, A					; R7 = ACC
0x0D76: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x0D78: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x0D7B: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_022:

0x0D7C: 12 17 C2	lcall	?C?CSTOPTR				; Calls (forward) this: 0x17C2 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x17C2)
0x0D7F: 12 26 54	lcall	i2c_start				; Calls (forward) this: 0x2654 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2654)
0x0D82: 90 24 01	mov	DPTR, #0x2401				; DPTR = 0x2401
0x0D85: E4		clr	A					; ACC = 0
0x0D86: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x0D87: 25 E0		add	A, ACC					; ACC += ACC
0x0D89: FF		mov	R7, A					; R7 = ACC
0x0D8A: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x0D8C: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x0D8F: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_023:

0x0D90: AB 5E		mov	R3, 0x5E				; R3 = [0x5E]
0x0D92: AA 5F		mov	R2, 0x5F				; R2 = [0x5F]
0x0D94: A9 60		mov	R1, 0x60				; R1 = [0x60]
0x0D96: 12 17 95	lcall	?C?CLDOPTR				; Calls (forward) this: 0x1795 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1795)
0x0D99: FF		mov	R7, A					; R7 = ACC
0x0D9A: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x0D9C: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x0D9F: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_024:

0x0DA0: 8F 65		mov	0x65, R7				; [0x65] = R7
0x0DA2: 8D 66		mov	0x66, R5				; [0x66] = R5
0x0DA4: E4		clr	A					; ACC = 0
0x0DA5: F5 68		mov	0x68, A					; [0x68] = ACC
0x0DA7: 74 6E		mov	A, #0x6E				; ACC = 0x6E {'n'}
0x0DA9: 25 66		add	A, 0x66					; ACC += [0x66]
0x0DAB: F8		mov	R0, A					; R0 = ACC
0x0DAC: E6		mov	A, @R0					; ACC = [R0]
0x0DAD: F5 67		mov	0x67, A					; [0x67] = ACC
0x0DAF: E4		clr	A					; ACC = 0
0x0DB0: FF		mov	R7, A					; R7 = ACC

Label_143:

0x0DB1: 43 68 80	orl	0x68, #0x80				; [0x68] |= 0x80
0x0DB4: E5 68		mov	A, 0x68					; ACC = [0x68]
0x0DB6: 25 E0		add	A, ACC					; ACC += ACC
0x0DB8: 04		inc	A					; ++ACC
0x0DB9: F5 68		mov	0x68, A					; [0x68] = ACC
0x0DBB: C2 0A		clr	0x0A					; [0x0A] = L
0x0DBD: E5 67		mov	A, 0x67					; ACC = [0x67]
0x0DBF: 30 E7 02	jnb	ACC_7, Label_144			; If (ACC_7 == L) then jumps (forward) hither: 0x0DC4

0x0DC2: D2 0A		setb	0x0A					; [0x0A] = H

Label_144:

0x0DC4: E5 67		mov	A, 0x67					; ACC = [0x67]
0x0DC6: 25 E0		add	A, ACC					; ACC += ACC
0x0DC8: F5 67		mov	0x67, A					; [0x67] = ACC
0x0DCA: E5 65		mov	A, 0x65					; ACC = [0x65]
0x0DCC: 20 E7 0E	jb	ACC_7, Label_146			; If (ACC_7 == H) then jumps (forward) hither: 0x0DDD

0x0DCF: BF 07 02	cjne	R7, #0x07, Label_145			; If (R7 != 0x07 {'\a'}) then jumps (forward) hither: 0x0DD4

0x0DD2: C3		clr	C					; CY = L
0x0DD3: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_145:

0x0DD4: E5 65		mov	A, 0x65					; ACC = [0x65]
0x0DD6: 25 E0		add	A, ACC					; ACC += ACC
0x0DD8: F5 65		mov	0x65, A					; [0x65] = ACC
0x0DDA: 02 0E 7F	ljmp	Label_157				; Jumps (forward) hither: 0x0E7F

Label_146:

0x0DDD: E5 65		mov	A, 0x65					; ACC = [0x65]
0x0DDF: 25 E0		add	A, ACC					; ACC += ACC
0x0DE1: F5 65		mov	0x65, A					; [0x65] = ACC
0x0DE3: E5 66		mov	A, 0x66					; ACC = [0x66]
0x0DE5: C3		clr	C					; CY = L
0x0DE6: 94 12		subb	A, #0x12				; ACC -= 0x12 + CY
0x0DE8: 40 02		jc	Label_147				; If (CY == H) then jumps (forward) hither: 0x0DEC

0x0DEA: D3		setb	C					; CY = H
0x0DEB: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_147:

0x0DEC: 05 51		inc	0x51					; ++[0x51]
0x0DEE: E5 51		mov	A, 0x51					; ACC = [0x51]
0x0DF0: 54 0F		anl	A, #0x0F				; ACC &= 0x0F
0x0DF2: F5 51		mov	0x51, A					; [0x51] = ACC
0x0DF4: E5 66		mov	A, 0x66					; ACC = [0x66]
0x0DF6: 33		rlc	A					; ACC[76543210] = ACC[6543210C], CY = ACC[7]
0x0DF7: 33		rlc	A					; ACC[76543210] = ACC[6543210C], CY = ACC[7]
0x0DF8: 33		rlc	A					; ACC[76543210] = ACC[6543210C], CY = ACC[7]
0x0DF9: 54 F8		anl	A, #0xF8				; ACC &= 0xF8
0x0DFB: 4F		orl	A, R7					; ACC |= R7
0x0DFC: FE		mov	R6, A					; R6 = ACC
0x0DFD: 74 82		mov	A, #0x82				; ACC = 0x82
0x0DFF: 25 51		add	A, 0x51					; ACC += [0x51]
0x0E01: F8		mov	R0, A					; R0 = ACC
0x0E02: A6 06		mov	@R0, R6<#0>				; [R0] = R6<#0>
0x0E04: E5 51		mov	A, 0x51					; ACC = [0x51]
0x0E06: 12 26 FC	lcall	Function_132				; Calls (forward) this: 0x26FC (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x26FC)
0x0E09: FE		mov	R6, A					; R6 = ACC
0x0E0A: 20 0A 15	jb	0x0A, Label_149				; If ([0x0A] == H) then jumps (forward) hither: 0x0E22

0x0E0D: E5 51		mov	A, 0x51					; ACC = [0x51]
0x0E0F: 30 E3 08	jnb	ACC_3, Label_148			; If (ACC_3 == L) then jumps (forward) hither: 0x0E1A

0x0E12: EE		mov	A, R6					; ACC = R6
0x0E13: F4		cpl	A					; ACC = ~ACC
0x0E14: 78 81		mov	R0, #0x81				; R0 = 0x81
0x0E16: 56		anl	A, @R0					; ACC &= [R0]
0x0E17: F6		mov	@R0, A					; [R0] = ACC
0x0E18: 80 16		sjmp	Label_152				; Jumps (forward) hither: 0x0E30

Label_148:

0x0E1A: EE		mov	A, R6					; ACC = R6
0x0E1B: F4		cpl	A					; ACC = ~ACC
0x0E1C: 78 80		mov	R0, #0x80				; R0 = 0x80
0x0E1E: 56		anl	A, @R0					; ACC &= [R0]
0x0E1F: F6		mov	@R0, A					; [R0] = ACC
0x0E20: 80 0E		sjmp	Label_152				; Jumps (forward) hither: 0x0E30

Label_149:

0x0E22: E5 51		mov	A, 0x51					; ACC = [0x51]
0x0E24: 30 E3 04	jnb	ACC_3, Label_150			; If (ACC_3 == L) then jumps (forward) hither: 0x0E2B

0x0E27: 78 81		mov	R0, #0x81				; R0 = 0x81
0x0E29: 80 02		sjmp	Label_151				; Jumps (forward) hither: 0x0E2D

Label_150:

0x0E2B: 78 80		mov	R0, #0x80				; R0 = 0x80

Label_151:

0x0E2D: E6		mov	A, @R0					; ACC = [R0]
0x0E2E: 4E		orl	A, R6					; ACC |= R6
0x0E2F: F6		mov	@R0, A					; [R0] = ACC

Label_152:

0x0E30: E5 51		mov	A, 0x51					; ACC = [0x51]
0x0E32: 65 37		xrl	A, 0x37					; ACC |= [0x37]
0x0E34: 60 07		jz	Label_153				; If (ACC == 0) then jumps (forward) hither: 0x0E3D

0x0E36: EF		mov	A, R7					; ACC = R7
0x0E37: 64 07		xrl	A, #0x07				; ACC ^= 0x07 {'\a'}
0x0E39: 70 44		jnz	Label_157				; If (ACC != 0) then jumps (forward) hither: 0x0E7F

0x0E3B: C3		clr	C					; CY = L
0x0E3C: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_153:

0x0E3D: EF		mov	A, R7					; ACC = R7
0x0E3E: C3		clr	C					; CY = L
0x0E3F: 94 07		subb	A, #0x07				; ACC -= 0x07 + CY {'\a'}
0x0E41: 50 17		jnc	Label_156				; If (CY == L) then jumps (forward) hither: 0x0E5A

0x0E43: E5 68		mov	A, 0x68					; ACC = [0x68]
0x0E45: 25 E0		add	A, ACC					; ACC += ACC
0x0E47: F5 68		mov	0x68, A					; [0x68] = ACC
0x0E49: 30 D7 04	jnb	CY, Label_154				; If (CY == L) then jumps (forward) hither: 0x0E50

0x0E4C: 7E 01		mov	R6, #0x01				; R6 = 0x01
0x0E4E: 80 02		sjmp	Label_155				; Jumps (forward) hither: 0x0E52

Label_154:

0x0E50: 7E 00		mov	R6, #0x00				; R6 = 0x00 {'\0'}

Label_155:

0x0E52: EE		mov	A, R6					; ACC = R6
0x0E53: 25 68		add	A, 0x68					; ACC += [0x68]
0x0E55: F5 68		mov	0x68, A					; [0x68] = ACC
0x0E57: 0F		inc	R7					; ++R7
0x0E58: 80 E3		sjmp	Label_153				; Jumps (backward) hither: 0x0E3D

Label_156:

0x0E5A: 74 6E		mov	A, #0x6E				; ACC = 0x6E {'n'}
0x0E5C: 25 66		add	A, 0x66					; ACC += [0x66]
0x0E5E: F8		mov	R0, A					; R0 = ACC
0x0E5F: E5 68		mov	A, 0x68					; ACC = [0x68]
0x0E61: 56		anl	A, @R0					; ACC &= [R0]
0x0E62: F6		mov	@R0, A					; [R0] = ACC
0x0E63: 74 6E		mov	A, #0x6E				; ACC = 0x6E {'n'}
0x0E65: 25 66		add	A, 0x66					; ACC += [0x66]
0x0E67: F9		mov	R1, A					; R1 = ACC
0x0E68: 74 99		mov	A, #0x99				; ACC = 0x99
0x0E6A: 25 66		add	A, 0x66					; ACC += [0x66]
0x0E6C: F8		mov	R0, A					; R0 = ACC
0x0E6D: E5 68		mov	A, 0x68					; ACC = [0x68]
0x0E6F: F4		cpl	A					; ACC = ~ACC
0x0E70: 56		anl	A, @R0					; ACC &= [R0]
0x0E71: 47		orl	A, @R1					; ACC |= [R1]
0x0E72: F7		mov	@R1, A					; [R1] = ACC
0x0E73: 15 51		dec	0x51					; --[0x51]
0x0E75: E5 51		mov	A, 0x51					; ACC = [0x51]
0x0E77: 54 0F		anl	A, #0x0F				; ACC &= 0x0F
0x0E79: F5 51		mov	0x51, A					; [0x51] = ACC
0x0E7B: D2 09		setb	0x09					; [0x09] = H
0x0E7D: C3		clr	C					; CY = L
0x0E7E: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_157:

0x0E7F: 0F		inc	R7					; ++R7
0x0E80: EF		mov	A, R7					; ACC = R7
0x0E81: C3		clr	C					; CY = L
0x0E82: 94 08		subb	A, #0x08				; ACC -= 0x08 + CY {'\b'}
0x0E84: 50 03		jnc	Label_158				; If (CY == L) then jumps (forward) hither: 0x0E89

0x0E86: 02 0D B1	ljmp	Label_143				; Jumps (backward) hither: 0x0DB1

Label_158:

0x0E89: D3		setb	C					; CY = H
0x0E8A: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_025:

0x0E8B: 12 26 2B	lcall	Function_124				; Calls (forward) this: 0x262B (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x262B)
0x0E8E: 50 03		jnc	Label_159				; If (CY == L) then jumps (forward) hither: 0x0E93

0x0E90: 02 0F 64	ljmp	Label_175				; Jumps (forward) hither: 0x0F64

Label_159:

0x0E93: E5 34		mov	A, 0x34					; ACC = [0x34]
0x0E95: 60 03		jz	Label_160				; If (ACC == 0) then jumps (forward) hither: 0x0E9A

0x0E97: 02 0F 67	ljmp	Label_176				; Jumps (forward) hither: 0x0F67

Label_160:

0x0E9A: E5 36		mov	A, 0x36					; ACC = [0x36]
0x0E9C: 70 71		jnz	Label_168				; If (ACC != 0) then jumps (forward) hither: 0x0F0F

0x0E9E: E5 35		mov	A, 0x35					; ACC = [0x35]
0x0EA0: 94 08		subb	A, #0x08				; ACC -= 0x08 + CY {'\b'}
0x0EA2: 50 6B		jnc	Label_168				; If (CY == L) then jumps (forward) hither: 0x0F0F

0x0EA4: E5 33		mov	A, 0x33					; ACC = [0x33]
0x0EA6: 54 FE		anl	A, #0xFE				; ACC &= 0xFE
0x0EA8: 70 63		jnz	Label_167				; If (ACC != 0) then jumps (forward) hither: 0x0F0D

0x0EAA: E5 31		mov	A, 0x31					; ACC = [0x31]
0x0EAC: 45 33		orl	A, 0x33					; ACC |= [0x33]
0x0EAE: 70 0B		jnz	Label_161				; If (ACC != 0) then jumps (forward) hither: 0x0EBB

0x0EB0: E5 32		mov	A, 0x32					; ACC = [0x32]
0x0EB2: B4 02 06	cjne	A, #0x02, Label_161			; If (ACC != 0x02) then jumps (forward) hither: 0x0EBB

0x0EB5: 75 48 12	mov	0x48, #0x12				; [0x48] = 0x12
0x0EB8: 02 0F 42	ljmp	Label_170				; Jumps (forward) hither: 0x0F42

Label_161:

0x0EBB: E5 31		mov	A, 0x31					; ACC = [0x31]
0x0EBD: B4 05 0F	cjne	A, #0x05, Label_162			; If (ACC != 0x05) then jumps (forward) hither: 0x0ECF

0x0EC0: E5 32		mov	A, 0x32					; ACC = [0x32]
0x0EC2: B4 03 0A	cjne	A, #0x03, Label_162			; If (ACC != 0x03) then jumps (forward) hither: 0x0ECF

0x0EC5: E5 35		mov	A, 0x35					; ACC = [0x35]
0x0EC7: B4 06 05	cjne	A, #0x06, Label_162			; If (ACC != 0x06) then jumps (forward) hither: 0x0ECF

0x0ECA: 75 48 16	mov	0x48, #0x16				; [0x48] = 0x16
0x0ECD: 80 73		sjmp	Label_170				; Jumps (forward) hither: 0x0F42

Label_162:

0x0ECF: E5 31		mov	A, 0x31					; ACC = [0x31]
0x0ED1: B4 22 0A	cjne	A, #0x22, Label_163			; If (ACC != 0x22 {'"'}) then jumps (forward) hither: 0x0EDE

0x0ED4: E5 32		mov	A, 0x32					; ACC = [0x32]
0x0ED6: B4 03 05	cjne	A, #0x03, Label_163			; If (ACC != 0x03) then jumps (forward) hither: 0x0EDE

0x0ED9: 75 48 16	mov	0x48, #0x16				; [0x48] = 0x16
0x0EDC: 80 64		sjmp	Label_170				; Jumps (forward) hither: 0x0F42

Label_163:

0x0EDE: E5 31		mov	A, 0x31					; ACC = [0x31]
0x0EE0: B4 23 0A	cjne	A, #0x23, Label_164			; If (ACC != 0x23 {'#'}) then jumps (forward) hither: 0x0EED

0x0EE3: E5 32		mov	A, 0x32					; ACC = [0x32]
0x0EE5: B4 03 05	cjne	A, #0x03, Label_164			; If (ACC != 0x03) then jumps (forward) hither: 0x0EED

0x0EE8: 75 48 16	mov	0x48, #0x16				; [0x48] = 0x16
0x0EEB: 80 55		sjmp	Label_170				; Jumps (forward) hither: 0x0F42

Label_164:

0x0EED: E5 31		mov	A, 0x31					; ACC = [0x31]
0x0EEF: B4 1F 0A	cjne	A, #0x1F, Label_165			; If (ACC != 0x1F) then jumps (forward) hither: 0x0EFC

0x0EF2: E5 32		mov	A, 0x32					; ACC = [0x32]
0x0EF4: B4 03 05	cjne	A, #0x03, Label_165			; If (ACC != 0x03) then jumps (forward) hither: 0x0EFC

0x0EF7: 75 48 16	mov	0x48, #0x16				; [0x48] = 0x16
0x0EFA: 80 46		sjmp	Label_170				; Jumps (forward) hither: 0x0F42

Label_165:

0x0EFC: E5 31		mov	A, 0x31					; ACC = [0x31]
0x0EFE: B4 25 0A	cjne	A, #0x25, Label_166			; If (ACC != 0x25 {'%'}) then jumps (forward) hither: 0x0F0B

0x0F01: E5 32		mov	A, 0x32					; ACC = [0x32]
0x0F03: B4 03 05	cjne	A, #0x03, Label_166			; If (ACC != 0x03) then jumps (forward) hither: 0x0F0B

0x0F06: 75 48 16	mov	0x48, #0x16				; [0x48] = 0x16
0x0F09: 80 37		sjmp	Label_170				; Jumps (forward) hither: 0x0F42

Label_166:

0x0F0B: 80 57		sjmp	Label_175				; Jumps (forward) hither: 0x0F64

Label_167:

0x0F0D: 80 55		sjmp	Label_175				; Jumps (forward) hither: 0x0F64

Label_168:

0x0F0F: E5 31		mov	A, 0x31					; ACC = [0x31]
0x0F11: 64 06		xrl	A, #0x06				; ACC ^= 0x06
0x0F13: 70 20		jnz	Label_169				; If (ACC != 0) then jumps (forward) hither: 0x0F35

0x0F15: E5 32		mov	A, 0x32					; ACC = [0x32]
0x0F17: 64 03		xrl	A, #0x03				; ACC ^= 0x03
0x0F19: 70 1A		jnz	Label_169				; If (ACC != 0) then jumps (forward) hither: 0x0F35

0x0F1B: E5 36		mov	A, 0x36					; ACC = [0x36]
0x0F1D: 64 04		xrl	A, #0x04				; ACC ^= 0x04
0x0F1F: 70 46		jnz	Label_176				; If (ACC != 0) then jumps (forward) hither: 0x0F67

0x0F21: E5 35		mov	A, 0x35					; ACC = [0x35]
0x0F23: 64 10		xrl	A, #0x10				; ACC ^= 0x10
0x0F25: 70 40		jnz	Label_176				; If (ACC != 0) then jumps (forward) hither: 0x0F67

0x0F27: E5 33		mov	A, 0x33					; ACC = [0x33]
0x0F29: 64 01		xrl	A, #0x01				; ACC ^= 0x01
0x0F2B: 70 3A		jnz	Label_176				; If (ACC != 0) then jumps (forward) hither: 0x0F67

0x0F2D: 75 48 17	mov	0x48, #0x17				; [0x48] = 0x17
0x0F30: 75 49 04	mov	0x49, #0x04				; [0x49] = 0x04
0x0F33: 80 27		sjmp	Label_172				; Jumps (forward) hither: 0x0F5C

Label_169:

0x0F35: E5 31		mov	A, 0x31					; ACC = [0x31]
0x0F37: B4 20 0E	cjne	A, #0x20, Label_171			; If (ACC != 0x20 {' '}) then jumps (forward) hither: 0x0F48

0x0F3A: E5 32		mov	A, 0x32					; ACC = [0x32]
0x0F3C: B4 03 09	cjne	A, #0x03, Label_171			; If (ACC != 0x03) then jumps (forward) hither: 0x0F48

0x0F3F: 75 48 16	mov	0x48, #0x16				; [0x48] = 0x16

Label_170:

0x0F42: 75 49 04	mov	0x49, #0x04				; [0x49] = 0x04
0x0F45: E4		clr	A					; ACC = 0
0x0F46: 80 14		sjmp	Label_172				; Jumps (forward) hither: 0x0F5C

Label_171:

0x0F48: E5 33		mov	A, 0x33					; ACC = [0x33]
0x0F4A: 70 16		jnz	Label_174				; If (ACC != 0) then jumps (forward) hither: 0x0F62

0x0F4C: E5 31		mov	A, 0x31					; ACC = [0x31]
0x0F4E: 70 10		jnz	Label_173				; If (ACC != 0) then jumps (forward) hither: 0x0F60

0x0F50: E5 32		mov	A, 0x32					; ACC = [0x32]
0x0F52: B4 02 0B	cjne	A, #0x02, Label_173			; If (ACC != 0x02) then jumps (forward) hither: 0x0F60

0x0F55: 75 48 12	mov	0x48, #0x12				; [0x48] = 0x12
0x0F58: 75 49 05	mov	0x49, #0x05				; [0x49] = 0x05
0x0F5B: E4		clr	A					; ACC = 0

Label_172:

0x0F5C: 12 11 29	lcall	Function_034				; Calls (forward) this: 0x1129 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1129)
0x0F5F: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_173:

0x0F60: 80 02		sjmp	Label_175				; Jumps (forward) hither: 0x0F64

Label_174:

0x0F62: 80 00		sjmp	Label_175				; Jumps (forward) hither: 0x0F64

Label_175:

0x0F64: 12 27 29	lcall	Label_589				; Calls (forward) this: 0x2729 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2729)

Label_176:

0x0F67: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

recieve_tp_data:

0x0F68: 75 64 05	mov	0x64, #0x05				; [0x64] = 0x05
0x0F6B: 12 23 C4	lcall	process_tp_data?			; Calls (forward) this: 0x23C4 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x23C4)
0x0F6E: 78 B7		mov	R0, #0xB7				; R0 = 0xB7
0x0F70: E6		mov	A, @R0					; ACC = [R0]
0x0F71: 70 3B		jnz	Label_182				; If (ACC != 0) then jumps (forward) hither: 0x0FAE

0x0F73: E5 3E		mov	A, 0x3E					; ACC = [0x3E]
0x0F75: 60 05		jz	Label_177				; If (ACC == 0) then jumps (forward) hither: 0x0F7C

0x0F77: 78 BA		mov	R0, #0xBA				; R0 = 0xBA
0x0F79: E6		mov	A, @R0					; ACC = [R0]
0x0F7A: 70 14		jnz	Label_179				; If (ACC != 0) then jumps (forward) hither: 0x0F90

Label_177:

0x0F7C: 78 B9		mov	R0, #0xB9				; R0 = 0xB9
0x0F7E: E6		mov	A, @R0					; ACC = [R0]
0x0F7F: 60 2D		jz	Label_182				; If (ACC == 0) then jumps (forward) hither: 0x0FAE

0x0F81: 12 10 27	lcall	Function_026				; Calls (forward) this: 0x1027 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1027)
0x0F84: BF FB 03	cjne	R7, #0xFB, Label_178			; If (R7 != 0xFB) then jumps (forward) hither: 0x0F8A

0x0F87: 02 10 21	ljmp	Label_193				; Jumps (forward) hither: 0x1021

Label_178:

0x0F8A: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x0F8C: 7F 1C		mov	R7, #0x1C				; R7 = 0x1C
0x0F8E: 80 12		sjmp	Label_181				; Jumps (forward) hither: 0x0FA2

Label_179:

0x0F90: 78 B9		mov	R0, #0xB9				; R0 = 0xB9
0x0F92: E6		mov	A, @R0					; ACC = [R0]
0x0F93: 60 19		jz	Label_182				; If (ACC == 0) then jumps (forward) hither: 0x0FAE

0x0F95: 12 10 27	lcall	Function_026				; Calls (forward) this: 0x1027 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1027)
0x0F98: BF FB 03	cjne	R7, #0xFB, Label_180			; If (R7 != 0xFB) then jumps (forward) hither: 0x0F9E

0x0F9B: 02 10 21	ljmp	Label_193				; Jumps (forward) hither: 0x1021

Label_180:

0x0F9E: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x0FA0: 7F 1F		mov	R7, #0x1F				; R7 = 0x1F

Label_181:

0x0FA2: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x0FA5: 12 26 9F	lcall	i2c_stop				; Calls (forward) this: 0x269F (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x269F)
0x0FA8: D2 AF		setb	EA					; EA = H
0x0FAA: E4		clr	A					; ACC = 0
0x0FAB: 78 B9		mov	R0, #0xB9				; R0 = 0xB9
0x0FAD: F6		mov	@R0, A					; [R0] = ACC

Label_182:

0x0FAE: 20 B3 75	jb	P3_3, Label_194				; If (P3_3 == H) then jumps (forward) hither: 0x1026

0x0FB1: 78 B7		mov	R0, #0xB7				; R0 = 0xB7
0x0FB3: E6		mov	A, @R0					; ACC = [R0]
0x0FB4: 70 70		jnz	Label_194				; If (ACC != 0) then jumps (forward) hither: 0x1026

0x0FB6: 12 10 34	lcall	Function_027				; Calls (forward) this: 0x1034 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1034)
0x0FB9: BF FB 02	cjne	R7, #0xFB, Label_183			; If (R7 != 0xFB) then jumps (forward) hither: 0x0FBE

0x0FBC: 80 63		sjmp	Label_193				; Jumps (forward) hither: 0x1021

Label_183:

0x0FBE: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x0FC0: 7F 55		mov	R7, #0x55				; R7 = 0x55 {'U'}
0x0FC2: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x0FC5: 12 26 9F	lcall	i2c_stop				; Calls (forward) this: 0x269F (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x269F)
0x0FC8: 12 00 36	lcall	WAIT12					; Calls (backward) this: 0x0036 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x0036)
0x0FCB: E5 3E		mov	A, 0x3E					; ACC = [0x3E]
0x0FCD: 60 05		jz	Label_184				; If (ACC == 0) then jumps (forward) hither: 0x0FD4

0x0FCF: 78 BA		mov	R0, #0xBA				; R0 = 0xBA
0x0FD1: E6		mov	A, @R0					; ACC = [R0]
0x0FD2: 70 05		jnz	Label_185				; If (ACC != 0) then jumps (forward) hither: 0x0FD9

Label_184:

0x0FD4: 75 64 05	mov	0x64, #0x05				; [0x64] = 0x05
0x0FD7: 80 03		sjmp	Label_186				; Jumps (forward) hither: 0x0FDC

Label_185:

0x0FD9: 75 64 15	mov	0x64, #0x15				; [0x64] = 0x15

Label_186:

0x0FDC: 7B 00		mov	R3, #0x00				; R3 = 0x00 {'\0'}
0x0FDE: 7A 00		mov	R2, #0x00				; R2 = 0x00 {'\0'}
0x0FE0: 79 BF		mov	R1, #0xBF				; R1 = 0xBF
0x0FE2: 85 64 69	mov	0x69, 0x64				; [0x69] = [0x64]
0x0FE5: 7F 10		mov	R7, #0x10				; R7 = 0x10
0x0FE7: 12 1A FA	lcall	Function_080				; Calls (forward) this: 0x1AFA (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1AFA)
0x0FEA: EF		mov	A, R7					; ACC = R7
0x0FEB: 64 FA		xrl	A, #0xFA				; ACC ^= 0xFA
0x0FED: 70 23		jnz	Label_191				; If (ACC != 0) then jumps (forward) hither: 0x1012

0x0FEF: 78 BB		mov	R0, #0xBB				; R0 = 0xBB
0x0FF1: F6		mov	@R0, A					; [R0] = ACC
0x0FF2: 08		inc	R0					; ++R0 (0xBC)
0x0FF3: F6		mov	@R0, A					; [R0] = ACC
0x0FF4: D2 AF		setb	EA					; EA = H
0x0FF6: E5 3E		mov	A, 0x3E					; ACC = [0x3E]
0x0FF8: B4 01 14	cjne	A, #0x01, Label_190			; If (ACC != 0x01) then jumps (forward) hither: 0x100F

0x0FFB: 78 D4		mov	R0, #0xD4				; R0 = 0xD4
0x0FFD: E6		mov	A, @R0					; ACC = [R0]
0x0FFE: 70 12		jnz	Label_191				; If (ACC != 0) then jumps (forward) hither: 0x1012

Label_187:

0x1000: 78 BA		mov	R0, #0xBA				; R0 = 0xBA

Label_188:

0x1002: E6		mov	A, @R0					; ACC = [R0]
0x1003: 70 05		jnz	Label_189				; If (ACC != 0) then jumps (forward) hither: 0x100A

0x1005: 12 22 7B	lcall	Label_515				; Calls (forward) this: 0x227B (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x227B)
0x1008: 80 08		sjmp	Label_191				; Jumps (forward) hither: 0x1012

Label_189:

0x100A: 12 12 DF	lcall	format_tp_data?				; Calls (forward) this: 0x12DF (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x12DF)
0x100D: 80 03		sjmp	Label_191				; Jumps (forward) hither: 0x1012

Label_190:

0x100F: 12 22 F4	lcall	Label_525				; Calls (forward) this: 0x22F4 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x22F4)

Label_191:

0x1012: 12 10 34	lcall	Function_027				; Calls (forward) this: 0x1034 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1034)
0x1015: BF FB 02	cjne	R7, #0xFB, Label_192			; If (R7 != 0xFB) then jumps (forward) hither: 0x101A

0x1018: 80 07		sjmp	Label_193				; Jumps (forward) hither: 0x1021

Label_192:

0x101A: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x101C: 7F 1E		mov	R7, #0x1E				; R7 = 0x1E
0x101E: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)

Label_193:

0x1021: 12 26 9F	lcall	i2c_stop				; Calls (forward) this: 0x269F (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x269F)
0x1024: D2 AF		setb	EA					; EA = H

Label_194:

0x1026: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_026:

0x1027: C2 AF		clr	EA					; EA = L
0x1029: 12 26 54	lcall	i2c_start				; Calls (forward) this: 0x2654 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2654)
0x102C: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x102E: 7F 20		mov	R7, #0x20				; R7 = 0x20 {' '}
0x1030: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x1033: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_027:

0x1034: C2 AF		clr	EA					; EA = L
0x1036: 12 26 54	lcall	i2c_start				; Calls (forward) this: 0x2654 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2654)
0x1039: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x103B: 7F 20		mov	R7, #0x20				; R7 = 0x20 {' '}
0x103D: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x1040: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

send_tp_data_ep2:

0x1041: 8F 65		mov	0x65, R7				; [0x65] = R7
0x1043: 8D 66		mov	0x66, R5				; [0x66] = R5
0x1045: 8B 67		mov	0x67, R3				; [0x67] = R3
0x1047: E4		clr	A					; ACC = 0
0x1048: F5 6C		mov	0x6C, A					; [0x6C] = ACC

Label_195:

0x104A: E5 E7		mov	A, TXFLG2				; ACC = TXFLG2
0x104C: 30 E3 06	jnb	ACC_3, Label_196			; If (ACC_3 == L) then jumps (forward) hither: 0x1055

0x104F: E5 E7		mov	A, TXFLG2				; ACC = TXFLG2
0x1051: 54 03		anl	A, #0x03				; ACC &= 0x03
0x1053: 60 05		jz	Label_197				; If (ACC == 0) then jumps (forward) hither: 0x105A

Label_196:

0x1055: 12 27 A8	lcall	set_wdt_scalar00			; Calls (forward) this: 0x27A8 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27A8)
0x1058: 80 F0		sjmp	Label_195				; Jumps (backward) hither: 0x104A

Label_197:

0x105A: 30 24 03	jnb	0x24, Label_198				; If ([0x24] == L) then jumps (forward) hither: 0x1060

0x105D: 02 10 F6	ljmp	Label_203				; Jumps (forward) hither: 0x10F6

Label_198:

0x1060: 78 D5		mov	R0, #0xD5				; R0 = 0xD5
0x1062: E6		mov	A, @R0					; ACC = [R0]
0x1063: FF		mov	R7, A					; R7 = ACC
0x1064: 54 03		anl	A, #0x03				; ACC &= 0x03
0x1066: 70 03		jnz	Label_199				; If (ACC != 0) then jumps (forward) hither: 0x106B

0x1068: 02 10 F6	ljmp	Label_203				; Jumps (forward) hither: 0x10F6

Label_199:

0x106B: 78 CF		mov	R0, #0xCF				; R0 = 0xCF
0x106D: E6		mov	A, @R0					; ACC = [R0]
0x106E: 54 18		anl	A, #0x18				; ACC &= 0x18
0x1070: 60 07		jz	Label_200				; If (ACC == 0) then jumps (forward) hither: 0x1079

0x1072: EF		mov	A, R7					; ACC = R7
0x1073: 30 E1 03	jnb	ACC_1, Label_200			; If (ACC_1 == L) then jumps (forward) hither: 0x1079

0x1076: 75 6C 01	mov	0x6C, #0x01				; [0x6C] = 0x01

Label_200:

0x1079: C2 AF		clr	EA					; EA = L
0x107B: 75 E5 1E	mov	TXDAT2, #0x1E				; TXDAT2 = 0x1E
0x107E: 78 D5		mov	R0, #0xD5				; R0 = 0xD5
0x1080: E6		mov	A, @R0					; ACC = [R0]
0x1081: 30 E0 4C	jnb	ACC_0, Label_201			; If (ACC_0 == L) then jumps (forward) hither: 0x10D0

0x1084: AB 68		mov	R3, 0x68				; R3 = [0x68]
0x1086: AA 69		mov	R2, 0x69				; R2 = [0x69]
0x1088: A9 6A		mov	R1, 0x6A				; R1 = [0x6A]
0x108A: AE 02		mov	R6, R2<#0>				; R6 = R2<#0>
0x108C: AF 01		mov	R7, R1<#0>				; R7 = R1<#0>
0x108E: EF		mov	A, R7					; ACC = R7
0x108F: 4E		orl	A, R6					; ACC |= R6
0x1090: 60 3E		jz	Label_201				; If (ACC == 0) then jumps (forward) hither: 0x10D0

0x1092: E5 66		mov	A, 0x66					; ACC = [0x66]
0x1094: C4		swap	A					; ACC[76543210] = ACC[32107654]
0x1095: 54 F0		anl	A, #0xF0				; ACC &= 0xF0
0x1097: FF		mov	R7, A					; R7 = ACC
0x1098: E5 6C		mov	A, 0x6C					; ACC = [0x6C]
0x109A: C4		swap	A					; ACC[76543210] = ACC[32107654]
0x109B: 33		rlc	A					; ACC[76543210] = ACC[6543210C], CY = ACC[7]
0x109C: 33		rlc	A					; ACC[76543210] = ACC[6543210C], CY = ACC[7]
0x109D: 33		rlc	A					; ACC[76543210] = ACC[6543210C], CY = ACC[7]
0x109E: 54 80		anl	A, #0x80				; ACC &= 0x80
0x10A0: 4F		orl	A, R7					; ACC |= R7
0x10A1: FF		mov	R7, A					; R7 = ACC
0x10A2: E5 67		mov	A, 0x67					; ACC = [0x67]
0x10A4: 25 E0		add	A, ACC					; ACC += ACC
0x10A6: 25 E0		add	A, ACC					; ACC += ACC
0x10A8: 4F		orl	A, R7					; ACC |= R7
0x10A9: 45 65		orl	A, 0x65					; ACC |= [0x65]
0x10AB: 45 6B		orl	A, 0x6B					; ACC |= [0x6B]
0x10AD: F5 E5		mov	TXDAT2, A				; TXDAT2 = ACC
0x10AF: 90 00 01	mov	DPTR, #0x0001				; DPTR = 0x0001
0x10B2: 12 17 95	lcall	?C?CLDOPTR				; Calls (forward) this: 0x1795 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1795)
0x10B5: F5 E5		mov	TXDAT2, A				; TXDAT2 = ACC
0x10B7: 12 17 7C	lcall	?C?CLDPTR				; Calls (forward) this: 0x177C (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x177C)
0x10BA: F5 E5		mov	TXDAT2, A				; TXDAT2 = ACC
0x10BC: 90 00 03	mov	DPTR, #0x0003				; DPTR = 0x0003
0x10BF: 12 17 95	lcall	?C?CLDOPTR				; Calls (forward) this: 0x1795 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1795)
0x10C2: F5 E5		mov	TXDAT2, A				; TXDAT2 = ACC
0x10C4: 90 00 02	mov	DPTR, #0x0002				; DPTR = 0x0002
0x10C7: 12 17 95	lcall	?C?CLDOPTR				; Calls (forward) this: 0x1795 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1795)
0x10CA: 54 0F		anl	A, #0x0F				; ACC &= 0x0F
0x10CC: F5 E5		mov	TXDAT2, A				; TXDAT2 = ACC
0x10CE: 80 15		sjmp	Label_202				; Jumps (forward) hither: 0x10E5

Label_201:

0x10D0: E5 6C		mov	A, 0x6C					; ACC = [0x6C]
0x10D2: C4		swap	A					; ACC[76543210] = ACC[32107654]
0x10D3: 33		rlc	A					; ACC[76543210] = ACC[6543210C], CY = ACC[7]
0x10D4: 33		rlc	A					; ACC[76543210] = ACC[6543210C], CY = ACC[7]
0x10D5: 33		rlc	A					; ACC[76543210] = ACC[6543210C], CY = ACC[7]
0x10D6: 54 80		anl	A, #0x80				; ACC &= 0x80
0x10D8: 44 01		orl	A, #0x01				; ACC |= 0x01
0x10DA: F5 E5		mov	TXDAT2, A				; TXDAT2 = ACC
0x10DC: E4		clr	A					; ACC = 0
0x10DD: F5 E5		mov	TXDAT2, A				; TXDAT2 = ACC
0x10DF: F5 E5		mov	TXDAT2, A				; TXDAT2 = ACC
0x10E1: F5 E5		mov	TXDAT2, A				; TXDAT2 = ACC
0x10E3: F5 E5		mov	TXDAT2, A				; TXDAT2 = ACC

Label_202:

0x10E5: E4		clr	A					; ACC = 0
0x10E6: F5 E5		mov	TXDAT2, A				; TXDAT2 = ACC
0x10E8: F5 E5		mov	TXDAT2, A				; TXDAT2 = ACC
0x10EA: D2 AF		setb	EA					; EA = H
0x10EC: 75 E6 08	mov	TXCNT2, #0x08				; TXCNT2 = 0x08 {'\b'}
0x10EF: 43 E7 01	orl	TXFLG2, #0x01				; TXFLG2 |= 0x01
0x10F2: F5 3A		mov	0x3A, A					; [0x3A] = ACC
0x10F4: F5 45		mov	0x45, A					; [0x45] = ACC

Label_203:

0x10F6: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_028:

0x10F7: 53 DB EF	anl	IF2, #0xEF				; IF2 &= 0xEF
0x10FA: D2 13		setb	0x13					; [0x13] = H

;-------------------------------------------------------------------------------

Function_029:

0x10FC: AF 48		mov	R7, 0x48				; R7 = [0x48]
0x10FE: EF		mov	A, R7					; ACC = R7
0x10FF: 75 F0 03	mov	B, #0x03				; B = 0x03
0x1102: A4		mul	AB					; B:ACC = ACC * B
0x1103: 24 E2		add	A, #0xE2				; ACC += 0xE2
0x1105: F5 82		mov	DPL, A					; DPL = ACC
0x1107: E4		clr	A					; ACC = 0
0x1108: 34 04		addc	A, #0x04				; ACC += 0x04 + CY

;-------------------------------------------------------------------------------

Function_030:

0x110A: F5 83		mov	DPH, A					; DPH = ACC
0x110C: 74 01		mov	A, #0x01				; ACC = 0x01
0x110E: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x110F: FA		mov	R2, A					; R2 = ACC
0x1110: 74 02		mov	A, #0x02				; ACC = 0x02
0x1112: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x1113: F9		mov	R1, A					; R1 = ACC
0x1114: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_031:

0x1115: 75 49 02	mov	0x49, #0x02				; [0x49] = 0x02
0x1118: 75 EB 01	mov	TXCNT0, #0x01				; TXCNT0 = 0x01

;-------------------------------------------------------------------------------

Function_032:

0x111B: 43 B9 10	orl	IP2, #0x10				; IP2 |= 0x10
0x111E: 75 E9 06	mov	CRWCON, #0x06				; CRWCON = 0x06
0x1121: 43 EC 01	orl	TXFLG0, #0x01				; TXFLG0 |= 0x01
0x1124: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_033:

0x1125: 75 49 01	mov	0x49, #0x01				; [0x49] = 0x01
0x1128: E4		clr	A					; ACC = 0

;-------------------------------------------------------------------------------

Function_034:

0x1129: F5 EB		mov	TXCNT0, A				; TXCNT0 = ACC
0x112B: 43 B9 08	orl	IP2, #0x08				; IP2 |= 0x08 {'\b'}
0x112E: 75 E9 01	mov	CRWCON, #0x01				; CRWCON = 0x01
0x1131: 43 EC 01	orl	TXFLG0, #0x01				; TXFLG0 |= 0x01
0x1134: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_035:

0x1135: 85 2A 82	mov	DPL, 0x2A				; DPL = [0x2A]
0x1138: 85 29 83	mov	DPH, 0x29				; DPH = [0x29]
0x113B: E4		clr	A					; ACC = 0
0x113C: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x113D: 75 4B 00	mov	0x4B, #0x00				; [0x4B] = 0x00 {'\0'}
0x1140: F5 4C		mov	0x4C, A					; [0x4C] = ACC
0x1142: 75 47 07	mov	0x47, #0x07				; [0x47] = 0x07 {'\a'}
0x1145: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_036:

0x1146: E6		mov	A, @R0					; ACC = [R0]

;-------------------------------------------------------------------------------

Function_037:

0x1147: F5 EA		mov	TXDAT0, A				; TXDAT0 = ACC

;-------------------------------------------------------------------------------

Function_038:

0x1149: 75 49 02	mov	0x49, #0x02				; [0x49] = 0x02
0x114C: 75 EB 02	mov	TXCNT0, #0x02				; TXCNT0 = 0x02
0x114F: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_039:

0x1150: 14		dec	A					; --ACC
0x1151: F5 82		mov	DPL, A					; DPL = ACC
0x1153: 8C 83		mov	DPH, R4					; DPH = R4
0x1155: E4		clr	A					; ACC = 0
0x1156: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x1157: F5 EA		mov	TXDAT0, A				; TXDAT0 = ACC
0x1159: 0F		inc	R7					; ++R7
0x115A: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_040:

0x115B: C3		clr	C					; CY = L
0x115C: E5 4E		mov	A, 0x4E					; ACC = [0x4E]
0x115E: 94 08		subb	A, #0x08				; ACC -= 0x08 + CY {'\b'}
0x1160: E5 4D		mov	A, 0x4D					; ACC = [0x4D]
0x1162: 94 00		subb	A, #0x00				; ACC -= 0x00 + CY {'\0'}
0x1164: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_041:

0x1165: 75 4A 08	mov	0x4A, #0x08				; [0x4A] = 0x08 {'\b'}
0x1168: 74 F8		mov	A, #0xF8				; ACC = 0xF8
0x116A: 25 4E		add	A, 0x4E					; ACC += [0x4E]
0x116C: F5 4E		mov	0x4E, A					; [0x4E] = ACC
0x116E: 74 FF		mov	A, #0xFF				; ACC = 0xFF
0x1170: 35 4D		addc	A, 0x4D					; ACC += [0x4D] + CY
0x1172: F5 4D		mov	0x4D, A					; [0x4D] = ACC
0x1174: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_042:

0x1175: F5 83		mov	DPH, A					; DPH = ACC
0x1177: 74 01		mov	A, #0x01				; ACC = 0x01
0x1179: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x117A: FA		mov	R2, A					; R2 = ACC
0x117B: 74 02		mov	A, #0x02				; ACC = 0x02
0x117D: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x117E: F9		mov	R1, A					; R1 = ACC
0x117F: 02 17 E4	ljmp	?C?ICALL				; Jumps (forward) hither: 0x17E4

;-------------------------------------------------------------------------------

Function_043:

0x1182: E4		clr	A					; ACC = 0
0x1183: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x1184: 42 4F		orl	0x4F, A					; [0x4F] |= ACC
0x1186: 75 48 0F	mov	0x48, #0x0F				; [0x48] = 0x0F
0x1189: 75 49 01	mov	0x49, #0x01				; [0x49] = 0x01
0x118C: E4		clr	A					; ACC = 0
0x118D: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_044:

0x118E: 43 EF 04	orl	RXFLG0, #0x04				; RXFLG0 |= 0x04
0x1191: 53 EF FE	anl	RXFLG0, #0xFE				; RXFLG0 &= 0xFE
0x1194: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_045:

0x1195: E5 36		mov	A, 0x36					; ACC = [0x36]
0x1197: 45 35		orl	A, 0x35					; ACC |= [0x35]
0x1199: 45 34		orl	A, 0x34					; ACC |= [0x34]
0x119B: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_046:

0x119C: 05 2A		inc	0x2A					; ++[0x2A]
0x119E: E5 2A		mov	A, 0x2A					; ACC = [0x2A]
0x11A0: AC 29		mov	R4, 0x29				; R4 = [0x29]
0x11A2: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_204:

0x11A3: 00		nop
0x11A4: 00		nop
0x11A5: 00		nop
0x11A6: E5 96		mov	A, MODE_FG				; ACC = MODE_FG
0x11A8: 20 E1 0B	jb	ACC_1, Label_205			; If (ACC_1 == H) then jumps (forward) hither: 0x11B6

0x11AB: 20 E2 0E	jb	ACC_2, Label_207			; If (ACC_2 == H) then jumps (forward) hither: 0x11BC

0x11AE: 20 E3 0B	jb	ACC_3, Label_207			; If (ACC_3 == H) then jumps (forward) hither: 0x11BC

0x11B1: 20 E0 08	jb	ACC_0, Label_207			; If (ACC_0 == H) then jumps (forward) hither: 0x11BC

0x11B4: 80 00		sjmp	Label_205				; Jumps (forward) hither: 0x11B6

Label_205:

0x11B6: 78 FF		mov	R0, #0xFF				; R0 = 0xFF
0x11B8: E4		clr	A					; ACC = 0

Label_206:

0x11B9: F6		mov	@R0, A					; [R0] = ACC
0x11BA: D8 FD		djnz	R0, Label_206				; If (--R0 != 0) then jumps (backward) hither: 0x11B9

Label_207:

0x11BC: 75 81 D8	mov	SP, #0xD8				; SP = 0xD8
0x11BF: 02 11 FD	ljmp	0x11FD					; Jumps (forward) hither: 0x11FD

Label_208:

0x11C2: 02 26 7B	ljmp	Label_580				; Jumps (forward) hither: 0x267B

Label_209:

0x11C5: E4		clr	A					; ACC = 0
0x11C6: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x11C7: A3		inc	DPTR					; ++DPTR
0x11C8: F8		mov	R0, A					; R0 = ACC

Label_210:

0x11C9: E4		clr	A					; ACC = 0

Label_211:

0x11CA: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x11CB: A3		inc	DPTR					; ++DPTR
0x11CC: 40 03		jc	Label_212				; If (CY == H) then jumps (forward) hither: 0x11D1

0x11CE: F6		mov	@R0, A					; [R0] = ACC
0x11CF: 80 01		sjmp	Label_213				; Jumps (forward) hither: 0x11D2

Label_212:

0x11D1: F2		movx	@R0, A					; XRAM[R0] = ACC

Label_213:

0x11D2: 08		inc	R0					; ++R0
0x11D3: DF F4		djnz	R7, Label_210				; If (--R7 != 0) then jumps (backward) hither: 0x11C9

0x11D5: 80 29		sjmp	Label_220				; Jumps (forward) hither: 0x1200

Label_214:

0x11D7: E4		clr	A					; ACC = 0
0x11D8: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x11D9: A3		inc	DPTR					; ++DPTR
0x11DA: F8		mov	R0, A					; R0 = ACC
0x11DB: 54 07		anl	A, #0x07				; ACC &= 0x07 {'\a'}
0x11DD: 24 0C		add	A, #0x0C				; ACC += 0x0C {'\f'}
0x11DF: C8		xch	A, R0					; ACC <-> R0
0x11E0: C3		clr	C					; CY = L
0x11E1: 33		rlc	A					; ACC[76543210] = ACC[6543210C], CY = ACC[7]
0x11E2: C4		swap	A					; ACC[76543210] = ACC[32107654]
0x11E3: 54 0F		anl	A, #0x0F				; ACC &= 0x0F
0x11E5: 44 20		orl	A, #0x20				; ACC |= 0x20 {' '}
0x11E7: C8		xch	A, R0					; ACC <-> R0
0x11E8: 83		movc	A, @A+PC				; ACC = ROM[PC + 1 + ACC]
0x11E9: 40 04		jc	Label_215				; If (CY == H) then jumps (forward) hither: 0x11EF

0x11EB: F4		cpl	A					; ACC = ~ACC
0x11EC: 56		anl	A, @R0					; ACC &= [R0]
0x11ED: 80 01		sjmp	Label_216				; Jumps (forward) hither: 0x11F0

Label_215:

0x11EF: 46		orl	A, @R0					; ACC |= [R0]

Label_216:

0x11F0: F6		mov	@R0, A					; [R0] = ACC
0x11F1: DF E4		djnz	R7, Label_214				; If (--R7 != 0) then jumps (backward) hither: 0x11D7

0x11F3: 80 0B		sjmp	Label_220				; Jumps (forward) hither: 0x1200

Label_217:

0x11F5: 01 02		ajmp	Label_188				; Jumps (backward) hither: 0x1002 (PC += 2, PC(10-0) = 0x0002)

Label_218:

0x11F7: 04		inc	A					; ++ACC
0x11F8: 08		inc	R0					; ++R0
0x11F9: 10 20 40	jbc	0x20, Label_223				; If ([0x20] == H) then [0x20] = L and jumps (forward) hither: 0x123C

0x11FC: 80 90		sjmp	Function_044				; Jumps (backward) hither: 0x118E

Label_219:

0x11FE: 21 CA		ajmp	Label_211				; Jumps (backward) hither: 0x11CA (PC += 2, PC(10-0) = 0x01CA)

Label_220:

0x1200: E4		clr	A					; ACC = 0
0x1201: 7E 01		mov	R6, #0x01				; R6 = 0x01
0x1203: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x1204: 60 BC		jz	Label_208				; If (ACC == 0) then jumps (backward) hither: 0x11C2

0x1206: A3		inc	DPTR					; ++DPTR
0x1207: FF		mov	R7, A					; R7 = ACC
0x1208: 54 3F		anl	A, #0x3F				; ACC &= 0x3F {'?'}
0x120A: 30 E5 09	jnb	ACC_5, Label_221			; If (ACC_5 == L) then jumps (forward) hither: 0x1216

0x120D: 54 1F		anl	A, #0x1F				; ACC &= 0x1F
0x120F: FE		mov	R6, A					; R6 = ACC
0x1210: E4		clr	A					; ACC = 0
0x1211: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x1212: A3		inc	DPTR					; ++DPTR
0x1213: 60 01		jz	Label_221				; If (ACC == 0) then jumps (forward) hither: 0x1216

0x1215: 0E		inc	R6					; ++R6

Label_221:

0x1216: CF		xch	A, R7					; ACC <-> R7
0x1217: 54 C0		anl	A, #0xC0				; ACC &= 0xC0
0x1219: 25 E0		add	A, ACC					; ACC += ACC
0x121B: 60 A8		jz	Label_209				; If (ACC == 0) then jumps (backward) hither: 0x11C5

0x121D: 40 B8		jc	Label_214				; If (CY == H) then jumps (backward) hither: 0x11D7

0x121F: E4		clr	A					; ACC = 0
0x1220: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x1221: A3		inc	DPTR					; ++DPTR
0x1222: FA		mov	R2, A					; R2 = ACC
0x1223: E4		clr	A					; ACC = 0
0x1224: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x1225: A3		inc	DPTR					; ++DPTR
0x1226: F8		mov	R0, A					; R0 = ACC

Label_222:

0x1227: E4		clr	A					; ACC = 0
0x1228: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x1229: A3		inc	DPTR					; ++DPTR
0x122A: C8		xch	A, R0					; ACC <-> R0
0x122B: C5 82		xch	A, DPL					; ACC <-> DPL
0x122D: C8		xch	A, R0					; ACC <-> R0
0x122E: CA		xch	A, R2					; ACC <-> R2
0x122F: C5 83		xch	A, DPH					; ACC <-> DPH
0x1231: CA		xch	A, R2					; ACC <-> R2
0x1232: F0		movx	@DPTR, A				; XRAM[DPTR] = ACC
0x1233: A3		inc	DPTR					; ++DPTR
0x1234: C8		xch	A, R0					; ACC <-> R0
0x1235: C5 82		xch	A, DPL					; ACC <-> DPL
0x1237: C8		xch	A, R0					; ACC <-> R0
0x1238: CA		xch	A, R2					; ACC <-> R2
0x1239: C5 83		xch	A, DPH					; ACC <-> DPH
0x123B: CA		xch	A, R2					; ACC <-> R2

Label_223:

0x123C: DF E9		djnz	R7, Label_222				; If (--R7 != 0) then jumps (backward) hither: 0x1227

0x123E: DE E7		djnz	R6, Label_222				; If (--R6 != 0) then jumps (backward) hither: 0x1227

0x1240: 80 BE		sjmp	Label_220				; Jumps (backward) hither: 0x1200

;-------------------------------------------------------------------------------

Function_047:

0x1242: 12 26 68	lcall	Function_126				; Calls (forward) this: 0x2668 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2668)
0x1245: 78 B7		mov	R0, #0xB7				; R0 = 0xB7
0x1247: 76 01		mov	@R0, #0x01				; [R0] = 0x01
0x1249: E4		clr	A					; ACC = 0
0x124A: 78 BB		mov	R0, #0xBB				; R0 = 0xBB
0x124C: F6		mov	@R0, A					; [R0] = ACC
0x124D: 08		inc	R0					; ++R0 (0xBC)
0x124E: F6		mov	@R0, A					; [R0] = ACC
0x124F: 78 BD		mov	R0, #0xBD				; R0 = 0xBD
0x1251: F6		mov	@R0, A					; [R0] = ACC
0x1252: 08		inc	R0					; ++R0 (0xBE)
0x1253: F6		mov	@R0, A					; [R0] = ACC
0x1254: 12 26 54	lcall	i2c_start				; Calls (forward) this: 0x2654 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2654)
0x1257: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x1259: 7F A0		mov	R7, #0xA0				; R7 = 0xA0
0x125B: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x125E: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x1260: E4		clr	A					; ACC = 0
0x1261: FF		mov	R7, A					; R7 = ACC
0x1262: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x1265: 12 26 9F	lcall	i2c_stop				; Calls (forward) this: 0x269F (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x269F)
0x1268: 12 26 54	lcall	i2c_start				; Calls (forward) this: 0x2654 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2654)
0x126B: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x126D: 7F A1		mov	R7, #0xA1				; R7 = 0xA1
0x126F: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x1272: 7F 01		mov	R7, #0x01				; R7 = 0x01
0x1274: 12 1B AA	lcall	Function_083				; Calls (forward) this: 0x1BAA (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1BAA)
0x1277: 78 17		mov	R0, #0x17				; R0 = 0x17
0x1279: A6 07		mov	@R0, R7<#0>				; [R0] = R7<#0>
0x127B: 12 26 9F	lcall	i2c_stop				; Calls (forward) this: 0x269F (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x269F)
0x127E: 78 17		mov	R0, #0x17				; R0 = 0x17
0x1280: E6		mov	A, @R0					; ACC = [R0]
0x1281: B4 FF 02	cjne	A, #0xFF, Label_224			; If (ACC != 0xFF) then jumps (forward) hither: 0x1286

0x1284: E4		clr	A					; ACC = 0
0x1285: F6		mov	@R0, A					; [R0] = ACC

Label_224:

0x1286: 12 27 A8	lcall	set_wdt_scalar00			; Calls (forward) this: 0x27A8 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27A8)
0x1289: 12 27 10	lcall	Function_134				; Calls (forward) this: 0x2710 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2710)
0x128C: 20 03 05	jb	0x03, Label_225				; If ([0x03] == H) then jumps (forward) hither: 0x1294

0x128F: E4		clr	A					; ACC = 0
0x1290: F5 21		mov	0x21, A					; [0x21] = ACC
0x1292: 80 F2		sjmp	Label_224				; Jumps (backward) hither: 0x1286

Label_225:

0x1294: 12 17 0D	lcall	Function_063				; Calls (forward) this: 0x170D (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x170D)
0x1297: 12 1D E4	lcall	Function_092				; Calls (forward) this: 0x1DE4 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1DE4)
0x129A: 75 63 12	mov	0x63, #0x12				; [0x63] = 0x12

Label_226:

0x129D: E5 63		mov	A, 0x63					; ACC = [0x63]
0x129F: 60 07		jz	Label_227				; If (ACC == 0) then jumps (forward) hither: 0x12A8

0x12A1: 15 63		dec	0x63					; --[0x63]
0x12A3: 12 1C FC	lcall	Function_089				; Calls (forward) this: 0x1CFC (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1CFC)
0x12A6: 80 F5		sjmp	Label_226				; Jumps (backward) hither: 0x129D

Label_227:

0x12A8: 12 24 98	lcall	Function_119				; Calls (forward) this: 0x2498 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2498)
0x12AB: 78 6D		mov	R0, #0x6D				; R0 = 0x6D
0x12AD: E6		mov	A, @R0					; ACC = [R0]
0x12AE: B4 F1 09	cjne	A, #0xF1, Label_228			; If (ACC != 0xF1) then jumps (forward) hither: 0x12BA

0x12B1: E4		clr	A					; ACC = 0
0x12B2: F6		mov	@R0, A					; [R0] = ACC
0x12B3: C2 AF		clr	EA					; EA = L
0x12B5: 12 1E B1	lcall	Function_095				; Calls (forward) this: 0x1EB1 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1EB1)
0x12B8: D2 AF		setb	EA					; EA = H

Label_228:

0x12BA: 78 92		mov	R0, #0x92				; R0 = 0x92
0x12BC: E6		mov	A, @R0					; ACC = [R0]
0x12BD: 70 05		jnz	Label_229				; If (ACC != 0) then jumps (forward) hither: 0x12C4

0x12BF: 12 0F 68	lcall	recieve_tp_data				; Calls (backward) this: 0x0F68 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x0F68)
0x12C2: 80 03		sjmp	Label_230				; Jumps (forward) hither: 0x12C7

Label_229:

0x12C4: 12 09 75	lcall	Function_016				; Calls (backward) this: 0x0975 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x0975)

Label_230:

0x12C7: 30 0B 0E	jnb	0x0B, Label_231				; If ([0x0B] == L) then jumps (forward) hither: 0x12D8

0x12CA: C2 0B		clr	0x0B					; [0x0B] = L
0x12CC: 12 27 4B	lcall	Function_136				; Calls (forward) this: 0x274B (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x274B)
0x12CF: E5 12		mov	A, R2<#2>				; ACC = R2<#2>
0x12D1: 70 B3		jnz	Label_224				; If (ACC != 0) then jumps (backward) hither: 0x1286

0x12D3: 12 22 CC	lcall	Function_109				; Calls (forward) this: 0x22CC (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x22CC)
0x12D6: 80 AE		sjmp	Label_224				; Jumps (backward) hither: 0x1286

Label_231:

0x12D8: 30 0C AB	jnb	0x0C, Label_224				; If ([0x0C] == L) then jumps (backward) hither: 0x1286

0x12DB: C2 0C		clr	0x0C					; [0x0C] = L
0x12DD: 80 A7		sjmp	Label_224				; Jumps (backward) hither: 0x1286

;-------------------------------------------------------------------------------

format_tp_data?:

0x12DF: 78 CF		mov	R0, #0xCF				; R0 = 0xCF
0x12E1: E6		mov	A, @R0					; ACC = [R0]
0x12E2: FF		mov	R7, A					; R7 = ACC
0x12E3: 54 07		anl	A, #0x07				; ACC &= 0x07 {'\a'}
0x12E5: FE		mov	R6, A					; R6 = ACC
0x12E6: 70 05		jnz	Label_232				; If (ACC != 0) then jumps (forward) hither: 0x12ED

0x12E8: EF		mov	A, R7					; ACC = R7
0x12E9: 54 18		anl	A, #0x18				; ACC &= 0x18
0x12EB: 60 78		jz	Label_234				; If (ACC == 0) then jumps (forward) hither: 0x1365

Label_232:

0x12ED: EE		mov	A, R6					; ACC = R6
0x12EE: C3		clr	C					; CY = L
0x12EF: 94 01		subb	A, #0x01				; ACC -= 0x01 + CY
0x12F1: 50 07		jnc	Label_233				; If (CY == L) then jumps (forward) hither: 0x12FA

0x12F3: 78 CF		mov	R0, #0xCF				; R0 = 0xCF
0x12F5: E6		mov	A, @R0					; ACC = [R0]
0x12F6: 54 18		anl	A, #0x18				; ACC &= 0x18
0x12F8: 60 6B		jz	Label_234				; If (ACC == 0) then jumps (forward) hither: 0x1365

Label_233:

0x12FA: 78 C1		mov	R0, #0xC1				; R0 = 0xC1
0x12FC: E6		mov	A, @R0					; ACC = [R0]
0x12FD: FE		mov	R6, A					; R6 = ACC
0x12FE: C4		swap	A					; ACC[76543210] = ACC[32107654]
0x12FF: 13		rrc	A					; ACC[76543210] = ACC[C7654321], CY = ACC[0]
0x1300: 13		rrc	A					; ACC[76543210] = ACC[C7654321], CY = ACC[0]
0x1301: 54 02		anl	A, #0x02				; ACC &= 0x02
0x1303: FF		mov	R7, A					; R7 = ACC
0x1304: 78 CF		mov	R0, #0xCF				; R0 = 0xCF
0x1306: E6		mov	A, @R0					; ACC = [R0]
0x1307: 54 07		anl	A, #0x07				; ACC &= 0x07 {'\a'}
0x1309: FD		mov	R5, A					; R5 = ACC
0x130A: EE		mov	A, R6					; ACC = R6
0x130B: 12 16 C8	lcall	Function_057				; Calls (forward) this: 0x16C8 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x16C8)
0x130E: 75 69 00	mov	0x69, #0x00				; [0x69] = 0x00 {'\0'}
0x1311: 75 6A BF	mov	0x6A, #0xBF				; [0x6A] = 0xBF
0x1314: E6		mov	A, @R0					; ACC = [R0]
0x1315: FE		mov	R6, A					; R6 = ACC
0x1316: C4		swap	A					; ACC[76543210] = ACC[32107654]
0x1317: 13		rrc	A					; ACC[76543210] = ACC[C7654321], CY = ACC[0]
0x1318: 54 01		anl	A, #0x01				; ACC &= 0x01
0x131A: F5 6B		mov	0x6B, A					; [0x6B] = ACC
0x131C: 12 10 41	lcall	send_tp_data_ep2			; Calls (backward) this: 0x1041 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1041)
0x131F: 78 CF		mov	R0, #0xCF				; R0 = 0xCF
0x1321: E6		mov	A, @R0					; ACC = [R0]
0x1322: FE		mov	R6, A					; R6 = ACC
0x1323: 54 07		anl	A, #0x07				; ACC &= 0x07 {'\a'}
0x1325: C3		clr	C					; CY = L
0x1326: 94 02		subb	A, #0x02				; ACC -= 0x02 + CY
0x1328: 40 3B		jc	Label_234				; If (CY == H) then jumps (forward) hither: 0x1365

0x132A: 78 C5		mov	R0, #0xC5				; R0 = 0xC5
0x132C: 12 16 BF	lcall	Function_056				; Calls (forward) this: 0x16BF (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x16BF)
0x132F: 75 69 00	mov	0x69, #0x00				; [0x69] = 0x00 {'\0'}
0x1332: 75 6A C3	mov	0x6A, #0xC3				; [0x6A] = 0xC3
0x1335: 12 13 66	lcall	format_tp_data2?			; Calls (forward) this: 0x1366 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1366)
0x1338: 94 03		subb	A, #0x03				; ACC -= 0x03 + CY
0x133A: 40 29		jc	Label_234				; If (CY == H) then jumps (forward) hither: 0x1365

0x133C: 78 C9		mov	R0, #0xC9				; R0 = 0xC9
0x133E: 12 16 BF	lcall	Function_056				; Calls (forward) this: 0x16BF (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x16BF)
0x1341: 75 69 00	mov	0x69, #0x00				; [0x69] = 0x00 {'\0'}
0x1344: 75 6A C7	mov	0x6A, #0xC7				; [0x6A] = 0xC7
0x1347: 12 13 66	lcall	format_tp_data2?			; Calls (forward) this: 0x1366 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1366)
0x134A: 94 04		subb	A, #0x04				; ACC -= 0x04 + CY
0x134C: 40 17		jc	Label_234				; If (CY == H) then jumps (forward) hither: 0x1365

0x134E: 78 CD		mov	R0, #0xCD				; R0 = 0xCD
0x1350: 12 16 BF	lcall	Function_056				; Calls (forward) this: 0x16BF (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x16BF)
0x1353: 75 69 00	mov	0x69, #0x00				; [0x69] = 0x00 {'\0'}
0x1356: 75 6A CB	mov	0x6A, #0xCB				; [0x6A] = 0xCB
0x1359: EE		mov	A, R6					; ACC = R6
0x135A: C4		swap	A					; ACC[76543210] = ACC[32107654]
0x135B: 13		rrc	A					; ACC[76543210] = ACC[C7654321], CY = ACC[0]
0x135C: 54 01		anl	A, #0x01				; ACC &= 0x01
0x135E: F5 6B		mov	0x6B, A					; [0x6B] = ACC
0x1360: E4		clr	A					; ACC = 0
0x1361: FD		mov	R5, A					; R5 = ACC
0x1362: 12 10 41	lcall	send_tp_data_ep2			; Calls (backward) this: 0x1041 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1041)

Label_234:

0x1365: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

format_tp_data2?:

0x1366: EE		mov	A, R6					; ACC = R6
0x1367: C4		swap	A					; ACC[76543210] = ACC[32107654]
0x1368: 13		rrc	A					; ACC[76543210] = ACC[C7654321], CY = ACC[0]
0x1369: 54 01		anl	A, #0x01				; ACC &= 0x01
0x136B: F5 6B		mov	0x6B, A					; [0x6B] = ACC
0x136D: E4		clr	A					; ACC = 0
0x136E: FD		mov	R5, A					; R5 = ACC
0x136F: 12 10 41	lcall	send_tp_data_ep2			; Calls (backward) this: 0x1041 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1041)
0x1372: 78 CF		mov	R0, #0xCF				; R0 = 0xCF
0x1374: E6		mov	A, @R0					; ACC = [R0]
0x1375: FE		mov	R6, A					; R6 = ACC
0x1376: 54 07		anl	A, #0x07				; ACC &= 0x07 {'\a'}
0x1378: C3		clr	C					; CY = L
0x1379: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_048:

0x137A: E5 2F		mov	A, 0x2F					; ACC = [0x2F]
0x137C: B4 06 1F	cjne	A, #0x06, Label_235			; If (ACC != 0x06) then jumps (forward) hither: 0x139E

0x137F: E5 31		mov	A, 0x31					; ACC = [0x31]
0x1381: B4 CC 1A	cjne	A, #0xCC, Label_235			; If (ACC != 0xCC) then jumps (forward) hither: 0x139E

0x1384: E5 32		mov	A, 0x32					; ACC = [0x32]
0x1386: B4 CC 15	cjne	A, #0xCC, Label_235			; If (ACC != 0xCC) then jumps (forward) hither: 0x139E

0x1389: E5 35		mov	A, 0x35					; ACC = [0x35]
0x138B: B4 CC 10	cjne	A, #0xCC, Label_235			; If (ACC != 0xCC) then jumps (forward) hither: 0x139E

0x138E: E5 36		mov	A, 0x36					; ACC = [0x36]
0x1390: B4 CC 0B	cjne	A, #0xCC, Label_235			; If (ACC != 0xCC) then jumps (forward) hither: 0x139E

0x1393: 7B 00		mov	R3, #0x00				; R3 = 0x00 {'\0'}
0x1395: 7A 00		mov	R2, #0x00				; R2 = 0x00 {'\0'}
0x1397: 79 2F		mov	R1, #0x2F				; R1 = 0x2F {'/'}
0x1399: 12 0C B5	lcall	Function_019				; Calls (backward) this: 0x0CB5 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x0CB5)
0x139C: 80 6B		sjmp	Label_237				; Jumps (forward) hither: 0x1409

Label_235:

0x139E: E5 2F		mov	A, 0x2F					; ACC = [0x2F]
0x13A0: 64 EE		xrl	A, #0xEE				; ACC ^= 0xEE
0x13A2: 70 2D		jnz	Label_236				; If (ACC != 0) then jumps (forward) hither: 0x13D1

0x13A4: E5 31		mov	A, 0x31					; ACC = [0x31]
0x13A6: 64 CC		xrl	A, #0xCC				; ACC ^= 0xCC
0x13A8: 70 27		jnz	Label_236				; If (ACC != 0) then jumps (forward) hither: 0x13D1

0x13AA: E5 32		mov	A, 0x32					; ACC = [0x32]
0x13AC: B4 CC 22	cjne	A, #0xCC, Label_236			; If (ACC != 0xCC) then jumps (forward) hither: 0x13D1

0x13AF: E5 33		mov	A, 0x33					; ACC = [0x33]
0x13B1: B4 CC 1D	cjne	A, #0xCC, Label_236			; If (ACC != 0xCC) then jumps (forward) hither: 0x13D1

0x13B4: E5 34		mov	A, 0x34					; ACC = [0x34]
0x13B6: B4 CC 18	cjne	A, #0xCC, Label_236			; If (ACC != 0xCC) then jumps (forward) hither: 0x13D1

0x13B9: E5 35		mov	A, 0x35					; ACC = [0x35]
0x13BB: B4 CC 13	cjne	A, #0xCC, Label_236			; If (ACC != 0xCC) then jumps (forward) hither: 0x13D1

0x13BE: E5 36		mov	A, 0x36					; ACC = [0x36]
0x13C0: B4 CC 0E	cjne	A, #0xCC, Label_236			; If (ACC != 0xCC) then jumps (forward) hither: 0x13D1

0x13C3: 7B 00		mov	R3, #0x00				; R3 = 0x00 {'\0'}
0x13C5: 7A 00		mov	R2, #0x00				; R2 = 0x00 {'\0'}
0x13C7: 79 2F		mov	R1, #0x2F				; R1 = 0x2F {'/'}
0x13C9: 12 0C B5	lcall	Function_019				; Calls (backward) this: 0x0CB5 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x0CB5)
0x13CC: E4		clr	A					; ACC = 0
0x13CD: F5 49		mov	0x49, A					; [0x49] = ACC
0x13CF: 80 38		sjmp	Label_237				; Jumps (forward) hither: 0x1409

Label_236:

0x13D1: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x13D3: AF 2F		mov	R7, 0x2F				; R7 = [0x2F]
0x13D5: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x13D8: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x13DA: AF 30		mov	R7, 0x30				; R7 = [0x30]
0x13DC: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x13DF: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x13E1: AF 31		mov	R7, 0x31				; R7 = [0x31]
0x13E3: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x13E6: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x13E8: AF 32		mov	R7, 0x32				; R7 = [0x32]
0x13EA: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x13ED: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x13EF: AF 33		mov	R7, 0x33				; R7 = [0x33]
0x13F1: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x13F4: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x13F6: AF 34		mov	R7, 0x34				; R7 = [0x34]
0x13F8: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x13FB: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x13FD: AF 35		mov	R7, 0x35				; R7 = [0x35]
0x13FF: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x1402: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x1404: AF 36		mov	R7, 0x36				; R7 = [0x36]
0x1406: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)

Label_237:

0x1409: E4		clr	A					; ACC = 0
0x140A: F5 B9		mov	IP2, A					; IP2 = ACC
0x140C: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_049:

0x140D: E5 35		mov	A, 0x35					; ACC = [0x35]
0x140F: 64 02		xrl	A, #0x02				; ACC ^= 0x02
0x1411: 60 03		jz	Label_238				; If (ACC == 0) then jumps (forward) hither: 0x1416

0x1413: 02 14 93	ljmp	Label_256				; Jumps (forward) hither: 0x1493

Label_238:

0x1416: E5 36		mov	A, 0x36					; ACC = [0x36]
0x1418: 70 79		jnz	Label_256				; If (ACC != 0) then jumps (forward) hither: 0x1493

0x141A: E5 2F		mov	A, 0x2F					; ACC = [0x2F]
0x141C: 24 7F		add	A, #0x7F				; ACC += 0x7F {'^?'}
0x141E: 60 14		jz	Label_240				; If (ACC == 0) then jumps (forward) hither: 0x1434

0x1420: 14		dec	A					; --ACC
0x1421: 60 2A		jz	Label_245				; If (ACC == 0) then jumps (forward) hither: 0x144D

0x1423: 24 02		add	A, #0x02				; ACC += 0x02
0x1425: 70 6A		jnz	Label_255				; If (ACC != 0) then jumps (forward) hither: 0x1491

0x1427: E5 A4		mov	A, P2WK					; ACC = P2WK
0x1429: 70 04		jnz	Label_239				; If (ACC != 0) then jumps (forward) hither: 0x142F

0x142B: F5 EA		mov	TXDAT0, A				; TXDAT0 = ACC
0x142D: 80 46		sjmp	Label_249				; Jumps (forward) hither: 0x1475

Label_239:

0x142F: 75 EA 02	mov	TXDAT0, #0x02				; TXDAT0 = 0x02
0x1432: 80 41		sjmp	Label_249				; Jumps (forward) hither: 0x1475

Label_240:

0x1434: E5 34		mov	A, 0x34					; ACC = [0x34]
0x1436: 60 02		jz	Label_241				; If (ACC == 0) then jumps (forward) hither: 0x143A

0x1438: 80 59		sjmp	Label_256				; Jumps (forward) hither: 0x1493

Label_241:

0x143A: E5 33		mov	A, 0x33					; ACC = [0x33]
0x143C: 14		dec	A					; --ACC
0x143D: 60 05		jz	Label_242				; If (ACC == 0) then jumps (forward) hither: 0x1444

0x143F: 04		inc	A					; ++ACC
0x1440: 70 09		jnz	Label_244				; If (ACC != 0) then jumps (forward) hither: 0x144B

0x1442: 80 21		sjmp	Label_247				; Jumps (forward) hither: 0x1465

Label_242:

0x1444: 30 03 02	jnb	0x03, Label_243				; If ([0x03] == L) then jumps (forward) hither: 0x1449

0x1447: 80 1C		sjmp	Label_247				; Jumps (forward) hither: 0x1465

Label_243:

0x1449: 80 48		sjmp	Label_256				; Jumps (forward) hither: 0x1493

Label_244:

0x144B: 80 46		sjmp	Label_256				; Jumps (forward) hither: 0x1493

Label_245:

0x144D: E5 34		mov	A, 0x34					; ACC = [0x34]
0x144F: 60 02		jz	Label_246				; If (ACC == 0) then jumps (forward) hither: 0x1453

0x1451: 80 40		sjmp	Label_256				; Jumps (forward) hither: 0x1493

Label_246:

0x1453: E5 33		mov	A, 0x33					; ACC = [0x33]
0x1455: 24 80		add	A, #0x80				; ACC += 0x80
0x1457: 60 0C		jz	Label_247				; If (ACC == 0) then jumps (forward) hither: 0x1465

0x1459: 14		dec	A					; --ACC
0x145A: 60 0E		jz	Label_248				; If (ACC == 0) then jumps (forward) hither: 0x146A

0x145C: 14		dec	A					; --ACC
0x145D: 60 1B		jz	Label_251				; If (ACC == 0) then jumps (forward) hither: 0x147A

0x145F: 24 82		add	A, #0x82				; ACC += 0x82
0x1461: 70 2C		jnz	Label_254				; If (ACC != 0) then jumps (forward) hither: 0x148F

0x1463: 80 00		sjmp	Label_247				; Jumps (forward) hither: 0x1465

Label_247:

0x1465: E4		clr	A					; ACC = 0
0x1466: F5 EA		mov	TXDAT0, A				; TXDAT0 = ACC
0x1468: 80 1C		sjmp	Label_252				; Jumps (forward) hither: 0x1486

Label_248:

0x146A: 30 03 0B	jnb	0x03, Label_250				; If ([0x03] == L) then jumps (forward) hither: 0x1478

0x146D: E5 E4		mov	A, TXFLG1				; ACC = TXFLG1
0x146F: 54 02		anl	A, #0x02				; ACC &= 0x02
0x1471: C3		clr	C					; CY = L
0x1472: 13		rrc	A					; ACC[76543210] = ACC[C7654321], CY = ACC[0]
0x1473: F5 EA		mov	TXDAT0, A				; TXDAT0 = ACC

Label_249:

0x1475: E4		clr	A					; ACC = 0
0x1476: 80 0E		sjmp	Label_252				; Jumps (forward) hither: 0x1486

Label_250:

0x1478: 80 19		sjmp	Label_256				; Jumps (forward) hither: 0x1493

Label_251:

0x147A: 30 03 10	jnb	0x03, Label_253				; If ([0x03] == L) then jumps (forward) hither: 0x148D

0x147D: E5 E7		mov	A, TXFLG2				; ACC = TXFLG2
0x147F: 54 02		anl	A, #0x02				; ACC &= 0x02
0x1481: C3		clr	C					; CY = L
0x1482: 13		rrc	A					; ACC[76543210] = ACC[C7654321], CY = ACC[0]
0x1483: F5 EA		mov	TXDAT0, A				; TXDAT0 = ACC
0x1485: E4		clr	A					; ACC = 0

Label_252:

0x1486: 12 11 47	lcall	Function_037				; Calls (backward) this: 0x1147 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1147)
0x1489: 12 11 1B	lcall	Function_032				; Calls (backward) this: 0x111B (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x111B)
0x148C: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_253:

0x148D: 80 04		sjmp	Label_256				; Jumps (forward) hither: 0x1493

Label_254:

0x148F: 80 02		sjmp	Label_256				; Jumps (forward) hither: 0x1493

Label_255:

0x1491: 80 00		sjmp	Label_256				; Jumps (forward) hither: 0x1493

Label_256:

0x1493: 12 27 29	lcall	Label_589				; Calls (forward) this: 0x2729 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2729)
0x1496: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_050:

0x1497: E5 4E		mov	A, 0x4E					; ACC = [0x4E]
0x1499: 45 4D		orl	A, 0x4D					; ACC |= [0x4D]
0x149B: 60 70		jz	Label_266				; If (ACC == 0) then jumps (forward) hither: 0x150D

0x149D: 12 11 5B	lcall	Function_040				; Calls (backward) this: 0x115B (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x115B)
0x14A0: 40 05		jc	Label_257				; If (CY == H) then jumps (forward) hither: 0x14A7

0x14A2: 12 11 65	lcall	Function_041				; Calls (backward) this: 0x1165 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1165)
0x14A5: 80 08		sjmp	Label_258				; Jumps (forward) hither: 0x14AF

Label_257:

0x14A7: 85 4E 4A	mov	0x4A, 0x4E				; [0x4A] = [0x4E]
0x14AA: E4		clr	A					; ACC = 0
0x14AB: F5 4D		mov	0x4D, A					; [0x4D] = ACC
0x14AD: F5 4E		mov	0x4E, A					; [0x4E] = ACC

Label_258:

0x14AF: E5 4A		mov	A, 0x4A					; ACC = [0x4A]
0x14B1: 60 4F		jz	Label_265				; If (ACC == 0) then jumps (forward) hither: 0x1502

0x14B3: E5 47		mov	A, 0x47					; ACC = [0x47]
0x14B5: 60 4B		jz	Label_265				; If (ACC == 0) then jumps (forward) hither: 0x1502

0x14B7: E5 47		mov	A, 0x47					; ACC = [0x47]
0x14B9: 64 08		xrl	A, #0x08				; ACC ^= 0x08 {'\b'}
0x14BB: 70 31		jnz	Label_262				; If (ACC != 0) then jumps (forward) hither: 0x14EE

0x14BD: E5 4E		mov	A, 0x4E					; ACC = [0x4E]
0x14BF: 45 4D		orl	A, 0x4D					; ACC |= [0x4D]
0x14C1: 70 2B		jnz	Label_262				; If (ACC != 0) then jumps (forward) hither: 0x14EE

0x14C3: FF		mov	R7, A					; R7 = ACC

Label_259:

0x14C4: E5 4A		mov	A, 0x4A					; ACC = [0x4A]
0x14C6: 24 FE		add	A, #0xFE				; ACC += 0xFE
0x14C8: FE		mov	R6, A					; R6 = ACC
0x14C9: EF		mov	A, R7					; ACC = R7
0x14CA: C3		clr	C					; CY = L
0x14CB: 9E		subb	A, R6					; ACC -= R6 + CY
0x14CC: 50 0C		jnc	Label_261				; If (CY == L) then jumps (forward) hither: 0x14DA

0x14CE: 12 11 9C	lcall	Function_046				; Calls (backward) this: 0x119C (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x119C)
0x14D1: 70 02		jnz	Label_260				; If (ACC != 0) then jumps (forward) hither: 0x14D5

0x14D3: 05 29		inc	0x29					; ++[0x29]

Label_260:

0x14D5: 12 11 50	lcall	Function_039				; Calls (backward) this: 0x1150 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1150)
0x14D8: 80 EA		sjmp	Label_259				; Jumps (backward) hither: 0x14C4

Label_261:

0x14DA: 78 6D		mov	R0, #0x6D				; R0 = 0x6D
0x14DC: E6		mov	A, @R0					; ACC = [R0]
0x14DD: FE		mov	R6, A					; R6 = ACC
0x14DE: C4		swap	A					; ACC[76543210] = ACC[32107654]
0x14DF: 54 0F		anl	A, #0x0F				; ACC &= 0x0F
0x14E1: 24 30		add	A, #0x30				; ACC += 0x30 {'0'}
0x14E3: F5 EA		mov	TXDAT0, A				; TXDAT0 = ACC
0x14E5: EE		mov	A, R6					; ACC = R6
0x14E6: 54 0F		anl	A, #0x0F				; ACC &= 0x0F
0x14E8: 24 30		add	A, #0x30				; ACC += 0x30 {'0'}
0x14EA: F5 EA		mov	TXDAT0, A				; TXDAT0 = ACC
0x14EC: 80 14		sjmp	Label_265				; Jumps (forward) hither: 0x1502

Label_262:

0x14EE: E4		clr	A					; ACC = 0
0x14EF: FF		mov	R7, A					; R7 = ACC

Label_263:

0x14F0: EF		mov	A, R7					; ACC = R7
0x14F1: C3		clr	C					; CY = L
0x14F2: 95 4A		subb	A, 0x4A					; ACC -= [0x4A] + CY
0x14F4: 50 0C		jnc	Label_265				; If (CY == L) then jumps (forward) hither: 0x1502

0x14F6: 12 11 9C	lcall	Function_046				; Calls (backward) this: 0x119C (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x119C)
0x14F9: 70 02		jnz	Label_264				; If (ACC != 0) then jumps (forward) hither: 0x14FD

0x14FB: 05 29		inc	0x29					; ++[0x29]

Label_264:

0x14FD: 12 11 50	lcall	Function_039				; Calls (backward) this: 0x1150 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1150)
0x1500: 80 EE		sjmp	Label_263				; Jumps (backward) hither: 0x14F0

Label_265:

0x1502: 85 4A EB	mov	TXCNT0, 0x4A				; TXCNT0 = [0x4A]
0x1505: 12 11 1B	lcall	Function_032				; Calls (backward) this: 0x111B (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x111B)
0x1508: 20 12 11	jb	0x12, Label_269				; If ([0x12] == H) then jumps (forward) hither: 0x151C

0x150B: 80 08		sjmp	Label_267				; Jumps (forward) hither: 0x1515

Label_266:

0x150D: 30 11 09	jnb	0x11, Label_268				; If ([0x11] == L) then jumps (forward) hither: 0x1519

0x1510: C2 11		clr	0x11					; [0x11] = L
0x1512: E4		clr	A					; ACC = 0
0x1513: F5 EB		mov	TXCNT0, A				; TXCNT0 = ACC

Label_267:

0x1515: 43 EC 01	orl	TXFLG0, #0x01				; TXFLG0 |= 0x01
0x1518: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_268:

0x1519: 43 EC 02	orl	TXFLG0, #0x02				; TXFLG0 |= 0x02

Label_269:

0x151C: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_051:

0x151D: E4		clr	A					; ACC = 0
0x151E: F5 62		mov	0x62, A					; [0x62] = ACC
0x1520: E5 DF		mov	A, IRQFG2				; ACC = IRQFG2
0x1522: 30 E1 03	jnb	ACC_1, Label_270			; If (ACC_1 == L) then jumps (forward) hither: 0x1528

0x1525: E4		clr	A					; ACC = 0
0x1526: F5 DF		mov	IRQFG2, A				; IRQFG2 = ACC

Label_270:

0x1528: E5 DF		mov	A, IRQFG2				; ACC = IRQFG2
0x152A: 30 E2 6E	jnb	ACC_2, Label_279			; If (ACC_2 == L) then jumps (forward) hither: 0x159B

0x152D: 53 DF FB	anl	IRQFG2, #0xFB				; IRQFG2 &= 0xFB
0x1530: 12 27 A8	lcall	set_wdt_scalar00			; Calls (forward) this: 0x27A8 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27A8)
0x1533: 05 3A		inc	0x3A					; ++[0x3A]
0x1535: AF 3A		mov	R7, 0x3A				; R7 = [0x3A]
0x1537: EF		mov	A, R7					; ACC = R7
0x1538: C3		clr	C					; CY = L
0x1539: 95 43		subb	A, 0x43					; ACC -= [0x43] + CY
0x153B: 40 5B		jc	Label_278				; If (CY == H) then jumps (forward) hither: 0x1598

0x153D: 30 03 4C	jnb	0x03, Label_277				; If ([0x03] == L) then jumps (forward) hither: 0x158C

0x1540: E5 3F		mov	A, 0x3F					; ACC = [0x3F]
0x1542: 70 08		jnz	Label_271				; If (ACC != 0) then jumps (forward) hither: 0x154C

0x1544: E5 51		mov	A, 0x51					; ACC = [0x51]
0x1546: 65 37		xrl	A, 0x37					; ACC |= [0x37]
0x1548: 60 02		jz	Label_271				; If (ACC == 0) then jumps (forward) hither: 0x154C

0x154A: 80 16		sjmp	Label_273				; Jumps (forward) hither: 0x1562

Label_271:

0x154C: E4		clr	A					; ACC = 0
0x154D: FF		mov	R7, A					; R7 = ACC

Label_272:

0x154E: 74 99		mov	A, #0x99				; ACC = 0x99
0x1550: 2F		add	A, R7					; ACC += R7
0x1551: F9		mov	R1, A					; R1 = ACC
0x1552: 74 6E		mov	A, #0x6E				; ACC = 0x6E {'n'}
0x1554: 2F		add	A, R7					; ACC += R7
0x1555: F8		mov	R0, A					; R0 = ACC
0x1556: E6		mov	A, @R0					; ACC = [R0]
0x1557: 47		orl	A, @R1					; ACC |= [R1]
0x1558: 42 62		orl	0x62, A					; [0x62] |= ACC
0x155A: 0F		inc	R7					; ++R7
0x155B: BF 12 F0	cjne	R7, #0x12, Label_272			; If (R7 != 0x12) then jumps (backward) hither: 0x154E

0x155E: E5 62		mov	A, 0x62					; ACC = [0x62]
0x1560: 60 09		jz	Label_274				; If (ACC == 0) then jumps (forward) hither: 0x156B

Label_273:

0x1562: 53 96 BF	anl	MODE_FG, #0xBF				; MODE_FG &= 0xBF
0x1565: E4		clr	A					; ACC = 0
0x1566: F5 3A		mov	0x3A, A					; [0x3A] = ACC
0x1568: D2 AB		setb	ET1					; ET1 = H
0x156A: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_274:

0x156B: E4		clr	A					; ACC = 0
0x156C: F5 95		mov	WKT_CON, A				; WKT_CON = ACC
0x156E: 43 F3 10	orl	DFC, #0x10				; DFC |= 0x10
0x1571: E5 A4		mov	A, P2WK					; ACC = P2WK
0x1573: B4 FF 10	cjne	A, #0xFF, Label_275			; If (ACC != 0xFF) then jumps (forward) hither: 0x1586

0x1576: 75 A0 FF	mov	P2, #0xFF				; P2 = 0xFF
0x1579: E4		clr	A					; ACC = 0
0x157A: F5 80		mov	P0, A					; P0 = ACC
0x157C: F5 90		mov	P1, A					; P1 = ACC
0x157E: 43 B0 0D	orl	P3, #0x0D				; P3 |= 0x0D {'\r'}
0x1581: 53 B0 CF	anl	P3, #0xCF				; P3 &= 0xCF
0x1584: 80 03		sjmp	Label_276				; Jumps (forward) hither: 0x1589

Label_275:

0x1586: 12 25 BC	lcall	Label_571				; Calls (forward) this: 0x25BC (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x25BC)

Label_276:

0x1589: 12 21 0E	lcall	Function_104				; Calls (forward) this: 0x210E (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x210E)

Label_277:

0x158C: E4		clr	A					; ACC = 0
0x158D: F5 95		mov	WKT_CON, A				; WKT_CON = ACC
0x158F: 43 F3 10	orl	DFC, #0x10				; DFC |= 0x10
0x1592: 12 25 BC	lcall	Label_571				; Calls (forward) this: 0x25BC (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x25BC)
0x1595: 12 21 0E	lcall	Function_104				; Calls (forward) this: 0x210E (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x210E)

Label_278:

0x1598: D2 AB		setb	ET1					; ET1 = H
0x159A: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_279:

0x159B: E4		clr	A					; ACC = 0
0x159C: F5 DF		mov	IRQFG2, A				; IRQFG2 = ACC
0x159E: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_052:

0x159F: C2 AF		clr	EA					; EA = L
0x15A1: E5 EF		mov	A, RXFLG0				; ACC = RXFLG0
0x15A3: 54 18		anl	A, #0x18				; ACC &= 0x18
0x15A5: 60 07		jz	Label_280				; If (ACC == 0) then jumps (forward) hither: 0x15AE

0x15A7: E5 EF		mov	A, RXFLG0				; ACC = RXFLG0
0x15A9: 20 E4 6E	jb	ACC_4, Label_285			; If (ACC_4 == H) then jumps (forward) hither: 0x161A

0x15AC: 80 66		sjmp	Label_283				; Jumps (forward) hither: 0x1614

Label_280:

0x15AE: E5 EE		mov	A, RXCNT0				; ACC = RXCNT0
0x15B0: 64 08		xrl	A, #0x08				; ACC ^= 0x08 {'\b'}
0x15B2: 70 60		jnz	Label_283				; If (ACC != 0) then jumps (forward) hither: 0x1614

0x15B4: AF EE		mov	R7, RXCNT0				; R7 = RXCNT0
0x15B6: 12 24 02	lcall	Function_114				; Calls (forward) this: 0x2402 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2402)
0x15B9: 12 11 8E	lcall	Function_044				; Calls (backward) this: 0x118E (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x118E)
0x15BC: E5 EF		mov	A, RXFLG0				; ACC = RXFLG0
0x15BE: 20 E4 59	jb	ACC_4, Label_285			; If (ACC_4 == H) then jumps (forward) hither: 0x161A

0x15C1: E4		clr	A					; ACC = 0
0x15C2: F5 B9		mov	IP2, A					; IP2 = ACC
0x15C4: 53 DB 67	anl	IF2, #0x67				; IF2 &= 0x67 {'g'}
0x15C7: F5 49		mov	0x49, A					; [0x49] = ACC
0x15C9: F5 48		mov	0x48, A					; [0x48] = ACC
0x15CB: 53 22 F0	anl	0x22, #0xF0				; [0x22] &= 0xF0
0x15CE: F5 47		mov	0x47, A					; [0x47] = ACC
0x15D0: F5 E9		mov	CRWCON, A				; CRWCON = ACC
0x15D2: F5 3A		mov	0x3A, A					; [0x3A] = ACC
0x15D4: E5 2F		mov	A, 0x2F					; ACC = [0x2F]
0x15D6: 54 60		anl	A, #0x60				; ACC &= 0x60 {'`'}
0x15D8: 24 E0		add	A, #0xE0				; ACC += 0xE0
0x15DA: 60 1B		jz	Label_281				; If (ACC == 0) then jumps (forward) hither: 0x15F7

0x15DC: 24 20		add	A, #0x20				; ACC += 0x20 {' '}
0x15DE: 70 37		jnz	Label_284				; If (ACC != 0) then jumps (forward) hither: 0x1617

0x15E0: E5 30		mov	A, 0x30					; ACC = [0x30]
0x15E2: C3		clr	C					; CY = L
0x15E3: 94 0D		subb	A, #0x0D				; ACC -= 0x0D + CY {'\r'}
0x15E5: 50 33		jnc	Label_285				; If (CY == L) then jumps (forward) hither: 0x161A

0x15E7: AF 30		mov	R7, 0x30				; R7 = [0x30]
0x15E9: EF		mov	A, R7					; ACC = R7
0x15EA: 75 F0 03	mov	B, #0x03				; B = 0x03
0x15ED: A4		mul	AB					; B:ACC = ACC * B
0x15EE: 24 73		add	A, #0x73				; ACC += 0x73 {'s'}
0x15F0: F5 82		mov	DPL, A					; DPL = ACC
0x15F2: E4		clr	A					; ACC = 0
0x15F3: 34 04		addc	A, #0x04				; ACC += 0x04 + CY
0x15F5: 80 15		sjmp	Label_282				; Jumps (forward) hither: 0x160C

Label_281:

0x15F7: E5 30		mov	A, 0x30					; ACC = [0x30]
0x15F9: C3		clr	C					; CY = L
0x15FA: 94 0C		subb	A, #0x0C				; ACC -= 0x0C + CY {'\f'}
0x15FC: 50 1C		jnc	Label_285				; If (CY == L) then jumps (forward) hither: 0x161A

0x15FE: AF 30		mov	R7, 0x30				; R7 = [0x30]
0x1600: EF		mov	A, R7					; ACC = R7
0x1601: 75 F0 03	mov	B, #0x03				; B = 0x03
0x1604: A4		mul	AB					; B:ACC = ACC * B
0x1605: 24 9A		add	A, #0x9A				; ACC += 0x9A
0x1607: F5 82		mov	DPL, A					; DPL = ACC
0x1609: E4		clr	A					; ACC = 0
0x160A: 34 04		addc	A, #0x04				; ACC += 0x04 + CY

Label_282:

0x160C: 12 11 0A	lcall	Function_030				; Calls (backward) this: 0x110A (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x110A)
0x160F: 12 17 E4	lcall	?C?ICALL				; Calls (forward) this: 0x17E4 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x17E4)
0x1612: 80 06		sjmp	Label_285				; Jumps (forward) hither: 0x161A

Label_283:

0x1614: 12 11 8E	lcall	Function_044				; Calls (backward) this: 0x118E (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x118E)

Label_284:

0x1617: 12 27 29	lcall	Label_589				; Calls (forward) this: 0x2729 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2729)

Label_285:

0x161A: 53 EF FB	anl	RXFLG0, #0xFB				; RXFLG0 &= 0xFB
0x161D: D2 AF		setb	EA					; EA = H
0x161F: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_286:

0x1620: AF 36		mov	R7, 0x36				; R7 = [0x36]
0x1622: EF		mov	A, R7					; ACC = R7
0x1623: FE		mov	R6, A					; R6 = ACC
0x1624: AD 35		mov	R5, 0x35				; R5 = [0x35]
0x1626: 7C 00		mov	R4, #0x00				; R4 = 0x00 {'\0'}
0x1628: E4		clr	A					; ACC = 0
0x1629: 2D		add	A, R5					; ACC += R5
0x162A: FF		mov	R7, A					; R7 = ACC
0x162B: EC		mov	A, R4					; ACC = R4
0x162C: 3E		addc	A, R6					; ACC += R6 + CY
0x162D: FE		mov	R6, A					; R6 = ACC
0x162E: 75 49 02	mov	0x49, #0x02				; [0x49] = 0x02
0x1631: F5 4D		mov	0x4D, A					; [0x4D] = ACC
0x1633: 8F 4E		mov	0x4E, R7				; [0x4E] = R7
0x1635: E5 47		mov	A, 0x47					; ACC = [0x47]
0x1637: 60 0F		jz	Label_287				; If (ACC == 0) then jumps (forward) hither: 0x1648

0x1639: C3		clr	C					; CY = L
0x163A: E5 4C		mov	A, 0x4C					; ACC = [0x4C]
0x163C: 9F		subb	A, R7					; ACC -= R7 + CY
0x163D: E5 4B		mov	A, 0x4B					; ACC = [0x4B]
0x163F: 9E		subb	A, R6					; ACC -= R6 + CY
0x1640: 50 06		jnc	Label_287				; If (CY == L) then jumps (forward) hither: 0x1648

0x1642: 85 4B 4D	mov	0x4D, 0x4B				; [0x4D] = [0x4B]
0x1645: 85 4C 4E	mov	0x4E, 0x4C				; [0x4E] = [0x4C]

Label_287:

0x1648: 12 11 5B	lcall	Function_040				; Calls (backward) this: 0x115B (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x115B)
0x164B: 40 0D		jc	Label_289				; If (CY == H) then jumps (forward) hither: 0x165A

0x164D: E5 49		mov	A, 0x49					; ACC = [0x49]
0x164F: 64 02		xrl	A, #0x02				; ACC ^= 0x02
0x1651: 60 05		jz	Label_288				; If (ACC == 0) then jumps (forward) hither: 0x1658

0x1653: E5 49		mov	A, 0x49					; ACC = [0x49]
0x1655: B4 04 02	cjne	A, #0x04, Label_289			; If (ACC != 0x04) then jumps (forward) hither: 0x165A

Label_288:

0x1658: 05 49		inc	0x49					; ++[0x49]

Label_289:

0x165A: E5 4E		mov	A, 0x4E					; ACC = [0x4E]
0x165C: 54 07		anl	A, #0x07				; ACC &= 0x07 {'\a'}
0x165E: 70 04		jnz	Label_290				; If (ACC != 0) then jumps (forward) hither: 0x1664

0x1660: D2 11		setb	0x11					; [0x11] = H
0x1662: 80 02		sjmp	Label_291				; Jumps (forward) hither: 0x1666

Label_290:

0x1664: C2 11		clr	0x11					; [0x11] = L

Label_291:

0x1666: 12 11 5B	lcall	Function_040				; Calls (backward) this: 0x115B (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x115B)
0x1669: 40 05		jc	Label_292				; If (CY == H) then jumps (forward) hither: 0x1670

0x166B: 12 11 65	lcall	Function_041				; Calls (backward) this: 0x1165 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1165)
0x166E: 80 08		sjmp	Label_293				; Jumps (forward) hither: 0x1678

Label_292:

0x1670: 85 4E 4A	mov	0x4A, 0x4E				; [0x4A] = [0x4E]
0x1673: E4		clr	A					; ACC = 0
0x1674: F5 4D		mov	0x4D, A					; [0x4D] = ACC
0x1676: F5 4E		mov	0x4E, A					; [0x4E] = ACC

Label_293:

0x1678: E5 4A		mov	A, 0x4A					; ACC = [0x4A]
0x167A: 60 18		jz	Label_296				; If (ACC == 0) then jumps (forward) hither: 0x1694

0x167C: E5 47		mov	A, 0x47					; ACC = [0x47]
0x167E: 60 14		jz	Label_296				; If (ACC == 0) then jumps (forward) hither: 0x1694

0x1680: E4		clr	A					; ACC = 0
0x1681: FF		mov	R7, A					; R7 = ACC

Label_294:

0x1682: EF		mov	A, R7					; ACC = R7
0x1683: C3		clr	C					; CY = L
0x1684: 95 4A		subb	A, 0x4A					; ACC -= [0x4A] + CY
0x1686: 50 0C		jnc	Label_296				; If (CY == L) then jumps (forward) hither: 0x1694

0x1688: 12 11 9C	lcall	Function_046				; Calls (backward) this: 0x119C (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x119C)
0x168B: 70 02		jnz	Label_295				; If (ACC != 0) then jumps (forward) hither: 0x168F

0x168D: 05 29		inc	0x29					; ++[0x29]

Label_295:

0x168F: 12 11 50	lcall	Function_039				; Calls (backward) this: 0x1150 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1150)
0x1692: 80 EE		sjmp	Label_294				; Jumps (backward) hither: 0x1682

Label_296:

0x1694: 85 4A EB	mov	TXCNT0, 0x4A				; TXCNT0 = [0x4A]
0x1697: 12 11 1B	lcall	Function_032				; Calls (backward) this: 0x111B (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x111B)
0x169A: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_053:

0x169B: 90 24 01	mov	DPTR, #0x2401				; DPTR = 0x2401
0x169E: E4		clr	A					; ACC = 0
0x169F: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x16A0: FF		mov	R7, A					; R7 = ACC
0x16A1: 7B 00		mov	R3, #0x00				; R3 = 0x00 {'\0'}
0x16A3: 7A 00		mov	R2, #0x00				; R2 = 0x00 {'\0'}
0x16A5: 79 AB		mov	R1, #0xAB				; R1 = 0xAB
0x16A7: 75 69 01	mov	0x69, #0x01				; [0x69] = 0x01
0x16AA: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_054:

0x16AB: 90 24 01	mov	DPTR, #0x2401				; DPTR = 0x2401
0x16AE: E4		clr	A					; ACC = 0
0x16AF: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x16B0: 7A 23		mov	R2, #0x23				; R2 = 0x23 {'#'}
0x16B2: 79 E4		mov	R1, #0xE4				; R1 = 0xE4
0x16B4: 90 23 E3	mov	DPTR, #0x23E3				; DPTR = 0x23E3

;-------------------------------------------------------------------------------

Function_055:

0x16B7: FF		mov	R7, A					; R7 = ACC
0x16B8: 7B FF		mov	R3, #0xFF				; R3 = 0xFF
0x16BA: E4		clr	A					; ACC = 0
0x16BB: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x16BC: F5 69		mov	0x69, A					; [0x69] = ACC
0x16BE: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_056:

0x16BF: E6		mov	A, @R0					; ACC = [R0]
0x16C0: FD		mov	R5, A					; R5 = ACC
0x16C1: C4		swap	A					; ACC[76543210] = ACC[32107654]
0x16C2: 13		rrc	A					; ACC[76543210] = ACC[C7654321], CY = ACC[0]
0x16C3: 13		rrc	A					; ACC[76543210] = ACC[C7654321], CY = ACC[0]
0x16C4: 54 02		anl	A, #0x02				; ACC &= 0x02
0x16C6: FF		mov	R7, A					; R7 = ACC
0x16C7: ED		mov	A, R5					; ACC = R5

;-------------------------------------------------------------------------------

Function_057:

0x16C8: C4		swap	A					; ACC[76543210] = ACC[32107654]
0x16C9: 54 07		anl	A, #0x07				; ACC &= 0x07 {'\a'}
0x16CB: FB		mov	R3, A					; R3 = ACC
0x16CC: 75 68 00	mov	0x68, #0x00				; [0x68] = 0x00 {'\0'}
0x16CF: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_058:

0x16D0: 90 24 01	mov	DPTR, #0x2401				; DPTR = 0x2401
0x16D3: E4		clr	A					; ACC = 0
0x16D4: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x16D5: FF		mov	R7, A					; R7 = ACC
0x16D6: 7B FF		mov	R3, #0xFF				; R3 = 0xFF
0x16D8: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_059:

0x16D9: 78 C0		mov	R0, #0xC0				; R0 = 0xC0
0x16DB: E6		mov	A, @R0					; ACC = [R0]
0x16DC: C4		swap	A					; ACC[76543210] = ACC[32107654]
0x16DD: 54 03		anl	A, #0x03				; ACC &= 0x03
0x16DF: F5 E5		mov	TXDAT2, A				; TXDAT2 = ACC
0x16E1: 08		inc	R0					; ++R0 (0xC1)
0x16E2: E6		mov	A, @R0					; ACC = [R0]
0x16E3: F5 E5		mov	TXDAT2, A				; TXDAT2 = ACC
0x16E5: 08		inc	R0					; ++R0 (0xC2)
0x16E6: E6		mov	A, @R0					; ACC = [R0]
0x16E7: F5 E5		mov	TXDAT2, A				; TXDAT2 = ACC
0x16E9: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_060:

0x16EA: 78 D6		mov	R0, #0xD6				; R0 = 0xD6
0x16EC: EF		mov	A, R7					; ACC = R7
0x16ED: F6		mov	@R0, A					; [R0] = ACC
0x16EE: D2 AF		setb	EA					; EA = H
0x16F0: 78 92		mov	R0, #0x92				; R0 = 0x92
0x16F2: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_061:

0x16F3: AB 5E		mov	R3, 0x5E				; R3 = [0x5E]
0x16F5: AA 5F		mov	R2, 0x5F				; R2 = [0x5F]
0x16F7: A9 60		mov	R1, 0x60				; R1 = [0x60]
0x16F9: 90 00 03	mov	DPTR, #0x0003				; DPTR = 0x0003
0x16FC: 12 17 C2	lcall	?C?CSTOPTR				; Calls (forward) this: 0x17C2 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x17C2)
0x16FF: 90 00 04	mov	DPTR, #0x0004				; DPTR = 0x0004
0x1702: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_062:

0x1703: 90 00 05	mov	DPTR, #0x0005				; DPTR = 0x0005
0x1706: 12 17 95	lcall	?C?CLDOPTR				; Calls (forward) this: 0x1795 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1795)
0x1709: FF		mov	R7, A					; R7 = ACC
0x170A: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x170C: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_063:

0x170D: 78 17		mov	R0, #0x17				; R0 = 0x17
0x170F: E6		mov	A, @R0					; ACC = [R0]
0x1710: FE		mov	R6, A					; R6 = ACC
0x1711: 30 E0 04	jnb	ACC_0, Label_297			; If (ACC_0 == L) then jumps (forward) hither: 0x1718

0x1714: C2 B1		clr	P3_1					; P3_1 = L
0x1716: 80 02		sjmp	Label_298				; Jumps (forward) hither: 0x171A

Label_297:

0x1718: D2 B1		setb	P3_1					; P3_1 = H

Label_298:

0x171A: EE		mov	A, R6					; ACC = R6
0x171B: 30 E1 04	jnb	ACC_1, Label_299			; If (ACC_1 == L) then jumps (forward) hither: 0x1722

0x171E: C2 B6		clr	P3_6					; P3_6 = L
0x1720: 80 02		sjmp	Label_300				; Jumps (forward) hither: 0x1724

Label_299:

0x1722: D2 B6		setb	P3_6					; P3_6 = H

Label_300:

0x1724: EE		mov	A, R6					; ACC = R6
0x1725: 30 E2 04	jnb	ACC_2, Label_301			; If (ACC_2 == L) then jumps (forward) hither: 0x172C

0x1728: C2 B7		clr	P3_7					; P3_7 = L
0x172A: 80 02		sjmp	Label_302				; Jumps (forward) hither: 0x172E

Label_301:

0x172C: D2 B7		setb	P3_7					; P3_7 = H

Label_302:

0x172E: E5 E4		mov	A, TXFLG1				; ACC = TXFLG1
0x1730: 30 E3 48	jnb	ACC_3, Label_308			; If (ACC_3 == L) then jumps (forward) hither: 0x177B

0x1733: E5 E4		mov	A, TXFLG1				; ACC = TXFLG1
0x1735: 54 03		anl	A, #0x03				; ACC &= 0x03
0x1737: 70 42		jnz	Label_308				; If (ACC != 0) then jumps (forward) hither: 0x177B

0x1739: 30 22 3F	jnb	0x22, Label_308				; If ([0x22] == L) then jumps (forward) hither: 0x177B

0x173C: C2 22		clr	0x22					; [0x22] = L
0x173E: E5 96		mov	A, MODE_FG				; ACC = MODE_FG
0x1740: 30 E4 04	jnb	ACC_4, Label_303			; If (ACC_4 == L) then jumps (forward) hither: 0x1747

0x1743: 53 96 EF	anl	MODE_FG, #0xEF				; MODE_FG &= 0xEF
0x1746: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_303:

0x1747: C2 AF		clr	EA					; EA = L
0x1749: 78 AC		mov	R0, #0xAC				; R0 = 0xAC
0x174B: E6		mov	A, @R0					; ACC = [R0]
0x174C: F5 E2		mov	TXDAT1, A				; TXDAT1 = ACC
0x174E: E4		clr	A					; ACC = 0
0x174F: F5 E2		mov	TXDAT1, A				; TXDAT1 = ACC
0x1751: 30 08 0A	jnb	0x08, Label_305				; If ([0x08] == L) then jumps (forward) hither: 0x175E

0x1754: FF		mov	R7, A					; R7 = ACC

Label_304:

0x1755: 75 E2 01	mov	TXDAT1, #0x01				; TXDAT1 = 0x01
0x1758: 0F		inc	R7					; ++R7
0x1759: BF 06 F9	cjne	R7, #0x06, Label_304			; If (R7 != 0x06) then jumps (backward) hither: 0x1755

0x175C: 80 0D		sjmp	Label_307				; Jumps (forward) hither: 0x176B

Label_305:

0x175E: E4		clr	A					; ACC = 0
0x175F: FF		mov	R7, A					; R7 = ACC

Label_306:

0x1760: 74 AD		mov	A, #0xAD				; ACC = 0xAD
0x1762: 2F		add	A, R7					; ACC += R7
0x1763: F8		mov	R0, A					; R0 = ACC
0x1764: E6		mov	A, @R0					; ACC = [R0]
0x1765: F5 E2		mov	TXDAT1, A				; TXDAT1 = ACC
0x1767: 0F		inc	R7					; ++R7
0x1768: BF 06 F5	cjne	R7, #0x06, Label_306			; If (R7 != 0x06) then jumps (backward) hither: 0x1760

Label_307:

0x176B: D2 AF		setb	EA					; EA = H
0x176D: 75 E3 08	mov	TXCNT1, #0x08				; TXCNT1 = 0x08 {'\b'}
0x1770: 43 E4 01	orl	TXFLG1, #0x01				; TXFLG1 |= 0x01
0x1773: 85 3C 3D	mov	0x3D, 0x3C				; [0x3D] = [0x3C]
0x1776: E4		clr	A					; ACC = 0
0x1777: F5 3A		mov	0x3A, A					; [0x3A] = ACC
0x1779: F5 45		mov	0x45, A					; [0x45] = ACC

Label_308:

0x177B: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

?C?CLDPTR:

0x177C: BB 01 06	cjne	R3, #0x01, Label_309			; If (R3 != 0x01) then jumps (forward) hither: 0x1785

0x177F: 89 82		mov	DPL, R1					; DPL = R1
0x1781: 8A 83		mov	DPH, R2					; DPH = R2
0x1783: E0		movx	A, @DPTR				; ACC = XRAM[DPTR]
0x1784: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_309:

0x1785: 50 02		jnc	Label_310				; If (CY == L) then jumps (forward) hither: 0x1789

0x1787: E7		mov	A, @R1					; ACC = [R1]
0x1788: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_310:

0x1789: BB FE 02	cjne	R3, #0xFE, Label_311			; If (R3 != 0xFE) then jumps (forward) hither: 0x178E

0x178C: E3		movx	A, @R1					; ACC = XRAM[R1]
0x178D: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_311:

0x178E: 89 82		mov	DPL, R1					; DPL = R1
0x1790: 8A 83		mov	DPH, R2					; DPH = R2
0x1792: E4		clr	A					; ACC = 0
0x1793: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x1794: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

?C?CLDOPTR:

0x1795: BB 01 0C	cjne	R3, #0x01, Label_312			; If (R3 != 0x01) then jumps (forward) hither: 0x17A4

0x1798: E5 82		mov	A, DPL					; ACC = DPL
0x179A: 29		add	A, R1					; ACC += R1
0x179B: F5 82		mov	DPL, A					; DPL = ACC
0x179D: E5 83		mov	A, DPH					; ACC = DPH
0x179F: 3A		addc	A, R2					; ACC += R2 + CY
0x17A0: F5 83		mov	DPH, A					; DPH = ACC
0x17A2: E0		movx	A, @DPTR				; ACC = XRAM[DPTR]
0x17A3: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_312:

0x17A4: 50 06		jnc	Label_313				; If (CY == L) then jumps (forward) hither: 0x17AC

0x17A6: E9		mov	A, R1					; ACC = R1
0x17A7: 25 82		add	A, DPL					; ACC += DPL
0x17A9: F8		mov	R0, A					; R0 = ACC
0x17AA: E6		mov	A, @R0					; ACC = [R0]
0x17AB: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_313:

0x17AC: BB FE 06	cjne	R3, #0xFE, Label_314			; If (R3 != 0xFE) then jumps (forward) hither: 0x17B5

0x17AF: E9		mov	A, R1					; ACC = R1
0x17B0: 25 82		add	A, DPL					; ACC += DPL
0x17B2: F8		mov	R0, A					; R0 = ACC
0x17B3: E2		movx	A, @R0					; ACC = XRAM[R0]
0x17B4: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_314:

0x17B5: E5 82		mov	A, DPL					; ACC = DPL
0x17B7: 29		add	A, R1					; ACC += R1
0x17B8: F5 82		mov	DPL, A					; DPL = ACC
0x17BA: E5 83		mov	A, DPH					; ACC = DPH
0x17BC: 3A		addc	A, R2					; ACC += R2 + CY
0x17BD: F5 83		mov	DPH, A					; DPH = ACC
0x17BF: E4		clr	A					; ACC = 0
0x17C0: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x17C1: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

?C?CSTOPTR:

0x17C2: F8		mov	R0, A					; R0 = ACC
0x17C3: BB 01 0D	cjne	R3, #0x01, Label_315			; If (R3 != 0x01) then jumps (forward) hither: 0x17D3

0x17C6: E5 82		mov	A, DPL					; ACC = DPL
0x17C8: 29		add	A, R1					; ACC += R1
0x17C9: F5 82		mov	DPL, A					; DPL = ACC
0x17CB: E5 83		mov	A, DPH					; ACC = DPH
0x17CD: 3A		addc	A, R2					; ACC += R2 + CY
0x17CE: F5 83		mov	DPH, A					; DPH = ACC
0x17D0: E8		mov	A, R0					; ACC = R0
0x17D1: F0		movx	@DPTR, A				; XRAM[DPTR] = ACC
0x17D2: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_315:

0x17D3: 50 06		jnc	Label_316				; If (CY == L) then jumps (forward) hither: 0x17DB

0x17D5: E9		mov	A, R1					; ACC = R1
0x17D6: 25 82		add	A, DPL					; ACC += DPL
0x17D8: C8		xch	A, R0					; ACC <-> R0
0x17D9: F6		mov	@R0, A					; [R0] = ACC
0x17DA: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_316:

0x17DB: BB FE 05	cjne	R3, #0xFE, Label_317			; If (R3 != 0xFE) then jumps (forward) hither: 0x17E3

0x17DE: E9		mov	A, R1					; ACC = R1
0x17DF: 25 82		add	A, DPL					; ACC += DPL
0x17E1: C8		xch	A, R0					; ACC <-> R0
0x17E2: F2		movx	@R0, A					; XRAM[R0] = ACC

Label_317:

0x17E3: 22		ret						; PCH = [SP--], PCL = [SP--]

?C?ICALL:

0x17E4: 8A 83		mov	DPH, R2					; DPH = R2
0x17E6: 89 82		mov	DPL, R1					; DPL = R1
0x17E8: E4		clr	A					; ACC = 0
0x17E9: 73		jmp	@A+DPTR					; Jumps hither: [DPTR + ACC]

;-------------------------------------------------------------------------------

Function_064:

0x17EA: 12 25 BC	lcall	Label_571				; Calls (forward) this: 0x25BC (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x25BC)
0x17ED: E5 26		mov	A, 0x26					; ACC = [0x26]
0x17EF: C3		clr	C					; CY = L
0x17F0: 94 12		subb	A, #0x12				; ACC -= 0x12 + CY
0x17F2: 50 5A		jnc	Label_323				; If (CY == L) then jumps (forward) hither: 0x184E

0x17F4: E5 26		mov	A, 0x26					; ACC = [0x26]
0x17F6: 90 22 3E	mov	DPTR, #0x223E				; DPTR = 0x223E
0x17F9: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x17FA: FF		mov	R7, A					; R7 = ACC
0x17FB: C3		clr	C					; CY = L
0x17FC: 94 04		subb	A, #0x04				; ACC -= 0x04 + CY
0x17FE: 50 4A		jnc	Label_322				; If (CY == L) then jumps (forward) hither: 0x184A

0x1800: EF		mov	A, R7					; ACC = R7
0x1801: 64 02		xrl	A, #0x02				; ACC ^= 0x02
0x1803: 60 45		jz	Label_322				; If (ACC == 0) then jumps (forward) hither: 0x184A

0x1805: EF		mov	A, R7					; ACC = R7
0x1806: 70 07		jnz	Label_318				; If (ACC != 0) then jumps (forward) hither: 0x180F

0x1808: 12 26 F5	lcall	Function_131				; Calls (forward) this: 0x26F5 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x26F5)
0x180B: F5 80		mov	P0, A					; P0 = ACC
0x180D: 80 20		sjmp	Label_321				; Jumps (forward) hither: 0x182F

Label_318:

0x180F: E5 26		mov	A, 0x26					; ACC = [0x26]
0x1811: 90 22 3E	mov	DPTR, #0x223E				; DPTR = 0x223E
0x1814: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x1815: B4 01 07	cjne	A, #0x01, Label_319			; If (ACC != 0x01) then jumps (forward) hither: 0x181F

0x1818: 12 26 F5	lcall	Function_131				; Calls (forward) this: 0x26F5 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x26F5)
0x181B: F5 90		mov	P1, A					; P1 = ACC
0x181D: 80 10		sjmp	Label_321				; Jumps (forward) hither: 0x182F

Label_319:

0x181F: 12 26 F5	lcall	Function_131				; Calls (forward) this: 0x26F5 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x26F5)
0x1822: B4 EF 06	cjne	A, #0xEF, Label_320			; If (ACC != 0xEF) then jumps (forward) hither: 0x182B

0x1825: C2 B4		clr	P3_4					; P3_4 = L
0x1827: D2 B5		setb	P3_5					; P3_5 = H
0x1829: 80 04		sjmp	Label_321				; Jumps (forward) hither: 0x182F

Label_320:

0x182B: D2 B4		setb	P3_4					; P3_4 = H
0x182D: C2 B5		clr	P3_5					; P3_5 = L

Label_321:

0x182F: 12 27 AF	lcall	WAIT6					; Calls (forward) this: 0x27AF (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27AF)
0x1832: 85 A0 39	mov	0x39, P2				; [0x39] = P2
0x1835: 12 27 AF	lcall	WAIT6					; Calls (forward) this: 0x27AF (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27AF)
0x1838: E5 39		mov	A, 0x39					; ACC = [0x39]
0x183A: B5 A0 F2	cjne	A, P2, Label_321			; If (ACC != P2) then jumps (backward) hither: 0x182F

0x183D: AF A0		mov	R7, P2					; R7 = P2
0x183F: 12 25 A3	lcall	Function_121				; Calls (forward) this: 0x25A3 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x25A3)
0x1842: EF		mov	A, R7					; ACC = R7
0x1843: F4		cpl	A					; ACC = ~ACC
0x1844: F5 39		mov	0x39, A					; [0x39] = ACC
0x1846: C2 0F		clr	0x0F					; [0x0F] = L
0x1848: 80 06		sjmp	Label_324				; Jumps (forward) hither: 0x1850

Label_322:

0x184A: D2 0F		setb	0x0F					; [0x0F] = H
0x184C: 80 02		sjmp	Label_324				; Jumps (forward) hither: 0x1850

Label_323:

0x184E: D2 0F		setb	0x0F					; [0x0F] = H

Label_324:

0x1850: 02 25 BC	ljmp	Label_571				; Jumps (forward) hither: 0x25BC

;-------------------------------------------------------------------------------

Function_065:

0x1853: C2 AF		clr	EA					; EA = L
0x1855: 12 26 54	lcall	i2c_start				; Calls (forward) this: 0x2654 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2654)
0x1858: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x185A: 7F 20		mov	R7, #0x20				; R7 = 0x20 {' '}
0x185C: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x185F: BF FA 0E	cjne	R7, #0xFA, Label_325			; If (R7 != 0xFA) then jumps (forward) hither: 0x1870

0x1862: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x1864: 7F D1		mov	R7, #0xD1				; R7 = 0xD1
0x1866: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x1869: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x186B: 7F 05		mov	R7, #0x05				; R7 = 0x05
0x186D: 12 19 23	lcall	i2c_sendbyte				; Calls (forward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)

Label_325:

0x1870: 12 26 9F	lcall	i2c_stop				; Calls (forward) this: 0x269F (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x269F)
0x1873: D2 AF		setb	EA					; EA = H
0x1875: 43 9D 0D	orl	P3CON, #0x0D				; P3CON |= 0x0D {'\r'}
0x1878: 7F 16		mov	R7, #0x16				; R7 = 0x16
0x187A: 12 24 5E	lcall	Function_117				; Calls (forward) this: 0x245E (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x245E)
0x187D: E4		clr	A					; ACC = 0
0x187E: 78 AB		mov	R0, #0xAB				; R0 = 0xAB
0x1880: F6		mov	@R0, A					; [R0] = ACC
0x1881: 78 D7		mov	R0, #0xD7				; R0 = 0xD7
0x1883: F6		mov	@R0, A					; [R0] = ACC

Label_326:

0x1884: 12 16 AB	lcall	Function_054				; Calls (backward) this: 0x16AB (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x16AB)
0x1887: 12 1E 2C	lcall	Function_093				; Calls (forward) this: 0x1E2C (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1E2C)
0x188A: 78 D8		mov	R0, #0xD8				; R0 = 0xD8
0x188C: EF		mov	A, R7					; ACC = R7
0x188D: F6		mov	@R0, A					; [R0] = ACC
0x188E: BF FB 02	cjne	R7, #0xFB, Label_327			; If (R7 != 0xFB) then jumps (forward) hither: 0x1893

0x1891: 80 17		sjmp	Label_329				; Jumps (forward) hither: 0x18AA

Label_327:

0x1893: 12 16 9B	lcall	Function_053				; Calls (backward) this: 0x169B (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x169B)
0x1896: 12 1A FA	lcall	Function_080				; Calls (forward) this: 0x1AFA (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1AFA)
0x1899: 78 D8		mov	R0, #0xD8				; R0 = 0xD8
0x189B: EF		mov	A, R7					; ACC = R7
0x189C: F6		mov	@R0, A					; [R0] = ACC
0x189D: BF FB 02	cjne	R7, #0xFB, Label_328			; If (R7 != 0xFB) then jumps (forward) hither: 0x18A2

0x18A0: 80 08		sjmp	Label_329				; Jumps (forward) hither: 0x18AA

Label_328:

0x18A2: 78 AB		mov	R0, #0xAB				; R0 = 0xAB
0x18A4: E6		mov	A, @R0					; ACC = [R0]
0x18A5: 60 03		jz	Label_329				; If (ACC == 0) then jumps (forward) hither: 0x18AA

0x18A7: 7F FA		mov	R7, #0xFA				; R7 = 0xFA
0x18A9: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_329:

0x18AA: 7F 05		mov	R7, #0x05				; R7 = 0x05
0x18AC: 12 24 5E	lcall	Function_117				; Calls (forward) this: 0x245E (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x245E)
0x18AF: 78 D7		mov	R0, #0xD7				; R0 = 0xD7
0x18B1: 06		inc	@R0					; ++[R0]
0x18B2: E6		mov	A, @R0					; ACC = [R0]
0x18B3: C3		clr	C					; CY = L
0x18B4: 94 C8		subb	A, #0xC8				; ACC -= 0xC8 + CY
0x18B6: 40 CC		jc	Label_326				; If (CY == H) then jumps (backward) hither: 0x1884

0x18B8: 7F FB		mov	R7, #0xFB				; R7 = 0xFB
0x18BA: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_066:

0x18BB: E5 64		mov	A, 0x64					; ACC = [0x64]
0x18BD: 25 E0		add	A, ACC					; ACC += ACC
0x18BF: 24 41		add	A, #0x41				; ACC += 0x41 {'A'}
0x18C1: F5 82		mov	DPL, A					; DPL = ACC
0x18C3: E4		clr	A					; ACC = 0
0x18C4: 34 09		addc	A, #0x09				; ACC += 0x09 + CY {'\t'}
0x18C6: F5 83		mov	DPH, A					; DPH = ACC
0x18C8: E4		clr	A					; ACC = 0
0x18C9: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x18CA: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_067:

0x18CB: F5 83		mov	DPH, A					; DPH = ACC
0x18CD: E4		clr	A					; ACC = 0
0x18CE: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]

;-------------------------------------------------------------------------------

Function_068:

0x18CF: FD		mov	R5, A					; R5 = ACC
0x18D0: A2 0A		mov	C, 0x0A					; CY = [0x0A]
0x18D2: E4		clr	A					; ACC = 0
0x18D3: 33		rlc	A					; ACC[76543210] = ACC[6543210C], CY = ACC[7]
0x18D4: FF		mov	R7, A					; R7 = ACC
0x18D5: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_069:

0x18D6: A2 0A		mov	C, 0x0A					; CY = [0x0A]
0x18D8: E4		clr	A					; ACC = 0
0x18D9: 33		rlc	A					; ACC[76543210] = ACC[6543210C], CY = ACC[7]
0x18DA: FF		mov	R7, A					; R7 = ACC
0x18DB: AD 64		mov	R5, 0x64				; R5 = [0x64]
0x18DD: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_070:

0x18DE: E5 64		mov	A, 0x64					; ACC = [0x64]
0x18E0: 25 E0		add	A, ACC					; ACC += ACC
0x18E2: 24 35		add	A, #0x35				; ACC += 0x35 {'5'}
0x18E4: F5 82		mov	DPL, A					; DPL = ACC
0x18E6: E4		clr	A					; ACC = 0
0x18E7: 34 09		addc	A, #0x09				; ACC += 0x09 + CY {'\t'}
0x18E9: F5 83		mov	DPH, A					; DPH = ACC
0x18EB: E4		clr	A					; ACC = 0
0x18EC: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x18ED: FD		mov	R5, A					; R5 = ACC
0x18EE: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_071:

0x18EF: E5 64		mov	A, 0x64					; ACC = [0x64]
0x18F1: 25 E0		add	A, ACC					; ACC += ACC

;-------------------------------------------------------------------------------

Function_072:

0x18F3: 24 58		add	A, #0x58				; ACC += 0x58 {'X'}
0x18F5: F5 82		mov	DPL, A					; DPL = ACC
0x18F7: E4		clr	A					; ACC = 0
0x18F8: 34 09		addc	A, #0x09				; ACC += 0x09 + CY {'\t'}
0x18FA: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_073:

0x18FB: E4		clr	A					; ACC = 0
0x18FC: F5 10		mov	R0<#2>, A				; R0<#2> = ACC
0x18FE: F5 11		mov	R1<#2>, A				; R1<#2> = ACC
0x1900: 78 17		mov	R0, #0x17				; R0 = 0x17
0x1902: E6		mov	A, @R0					; ACC = [R0]
0x1903: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_074:

0x1904: E5 64		mov	A, 0x64					; ACC = [0x64]
0x1906: 25 E0		add	A, ACC					; ACC += ACC
0x1908: 24 36		add	A, #0x36				; ACC += 0x36 {'6'}
0x190A: F5 82		mov	DPL, A					; DPL = ACC
0x190C: E4		clr	A					; ACC = 0
0x190D: 34 09		addc	A, #0x09				; ACC += 0x09 + CY {'\t'}
0x190F: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_075:

0x1910: E5 64		mov	A, 0x64					; ACC = [0x64]
0x1912: 25 E0		add	A, ACC					; ACC += ACC
0x1914: 24 42		add	A, #0x42				; ACC += 0x42 {'B'}
0x1916: F5 82		mov	DPL, A					; DPL = ACC
0x1918: E4		clr	A					; ACC = 0
0x1919: 34 09		addc	A, #0x09				; ACC += 0x09 + CY {'\t'}
0x191B: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_076:

0x191C: E4		clr	A					; ACC = 0
0x191D: F5 10		mov	R0<#2>, A				; R0<#2> = ACC
0x191F: F5 11		mov	R1<#2>, A				; R1<#2> = ACC
0x1921: EF		mov	A, R7					; ACC = R7
0x1922: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

i2c_sendbyte:

0x1923: E4		clr	A					; ACC = 0
0x1924: F5 6B		mov	0x6B, A					; [0x6B] = ACC
0x1926: FE		mov	R6, A					; R6 = ACC

Label_330:

0x1927: EF		mov	A, R7					; ACC = R7
0x1928: 30 E7 05	jnb	ACC_7, Label_331			; If (ACC_7 == L) then jumps (forward) hither: 0x1930

0x192B: 43 9D 01	orl	P3CON, #0x01				; P3CON |= 0x01
0x192E: 80 05		sjmp	Label_332				; Jumps (forward) hither: 0x1935

Label_331:

0x1930: 53 9D FE	anl	P3CON, #0xFE				; P3CON &= 0xFE
0x1933: C2 B0		clr	P3_0					; P3_0 = L

Label_332:

0x1935: 00		nop
0x1936: 00		nop
0x1937: 00		nop
0x1938: 00		nop
0x1939: 00		nop
0x193A: 00		nop
0x193B: 43 9D 04	orl	P3CON, #0x04				; P3CON |= 0x04
0x193E: EF		mov	A, R7					; ACC = R7
0x193F: 25 E0		add	A, ACC					; ACC += ACC
0x1941: FF		mov	R7, A					; R7 = ACC
0x1942: 00		nop
0x1943: 00		nop
0x1944: 00		nop
0x1945: 00		nop
0x1946: 00		nop
0x1947: 00		nop
0x1948: 00		nop
0x1949: 00		nop
0x194A: 00		nop
0x194B: 00		nop
0x194C: 00		nop
0x194D: 00		nop
0x194E: 53 9D FB	anl	P3CON, #0xFB				; P3CON &= 0xFB
0x1951: C2 B2		clr	P3_2					; P3_2 = L
0x1953: 0E		inc	R6					; ++R6
0x1954: BE 08 D0	cjne	R6, #0x08, Label_330			; If (R6 != 0x08 {'\b'}) then jumps (backward) hither: 0x1927

0x1957: 00		nop
0x1958: 00		nop
0x1959: 00		nop
0x195A: 00		nop
0x195B: 00		nop
0x195C: 00		nop
0x195D: 00		nop
0x195E: 00		nop
0x195F: 00		nop
0x1960: 00		nop
0x1961: 00		nop
0x1962: 00		nop
0x1963: 43 9D 01	orl	P3CON, #0x01				; P3CON |= 0x01
0x1966: 00		nop
0x1967: 00		nop
0x1968: 00		nop
0x1969: 00		nop
0x196A: 00		nop
0x196B: 00		nop
0x196C: 43 9D 04	orl	P3CON, #0x04				; P3CON |= 0x04
0x196F: 12 27 AF	lcall	WAIT6					; Calls (forward) this: 0x27AF (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27AF)
0x1972: A2 B0		mov	C, P3_0					; CY = P3_0
0x1974: E4		clr	A					; ACC = 0
0x1975: 33		rlc	A					; ACC[76543210] = ACC[6543210C], CY = ACC[7]
0x1976: FD		mov	R5, A					; R5 = ACC
0x1977: 53 9D FB	anl	P3CON, #0xFB				; P3CON &= 0xFB
0x197A: C2 B2		clr	P3_2					; P3_2 = L
0x197C: BD 01 03	cjne	R5, #0x01, Label_333			; If (R5 != 0x01) then jumps (forward) hither: 0x1982

0x197F: 7F FB		mov	R7, #0xFB				; R7 = 0xFB
0x1981: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_333:

0x1982: 7F FA		mov	R7, #0xFA				; R7 = 0xFA
0x1984: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_077:

0x1985: E4		clr	A					; ACC = 0
0x1986: F5 94		mov	PREWDT, A				; PREWDT = ACC
0x1988: 75 93 55	mov	CLRWDT, #0x55				; CLRWDT = 0x55 {'U'}
0x198B: 15 2E		dec	0x2E					; --[0x2E]
0x198D: E5 2E		mov	A, 0x2E					; ACC = [0x2E]
0x198F: 70 52		jnz	Label_340				; If (ACC != 0) then jumps (forward) hither: 0x19E3

0x1991: E5 12		mov	A, R2<#2>				; ACC = R2<#2>
0x1993: D3		setb	C					; CY = H
0x1994: 94 00		subb	A, #0x00				; ACC -= 0x00 + CY {'\0'}
0x1996: 40 33		jc	Label_338				; If (CY == H) then jumps (forward) hither: 0x19CB

0x1998: 05 11		inc	R1<#2>					; ++R1<#2>
0x199A: E5 11		mov	A, R1<#2>				; ACC = R1<#2>
0x199C: 70 02		jnz	Label_334				; If (ACC != 0) then jumps (forward) hither: 0x19A0

0x199E: 05 10		inc	R0<#2>					; ++R0<#2>

Label_334:

0x19A0: 64 50		xrl	A, #0x50				; ACC ^= 0x50 {'P'}
0x19A2: 45 10		orl	A, R0<#2>				; ACC |= R0<#2>
0x19A4: 70 2C		jnz	Label_339				; If (ACC != 0) then jumps (forward) hither: 0x19D2

0x19A6: F5 10		mov	R0<#2>, A				; R0<#2> = ACC
0x19A8: F5 11		mov	R1<#2>, A				; R1<#2> = ACC
0x19AA: 53 9E F8	anl	P4CON, #0xF8				; P4CON &= 0xF8
0x19AD: 78 14		mov	R0, #0x14				; R0 = 0x14
0x19AF: E6		mov	A, @R0					; ACC = [R0]
0x19B0: FF		mov	R7, A					; R7 = ACC
0x19B1: 70 04		jnz	Label_335				; If (ACC != 0) then jumps (forward) hither: 0x19B7

0x19B3: B2 C0		cpl	P4_0					; P4_0 = ~P4_0
0x19B5: 80 10		sjmp	Label_337				; Jumps (forward) hither: 0x19C7

Label_335:

0x19B7: EF		mov	A, R7					; ACC = R7
0x19B8: B4 01 04	cjne	A, #0x01, Label_336			; If (ACC != 0x01) then jumps (forward) hither: 0x19BF

0x19BB: B2 C1		cpl	P4_1					; P4_1 = ~P4_1
0x19BD: 80 08		sjmp	Label_337				; Jumps (forward) hither: 0x19C7

Label_336:

0x19BF: EF		mov	A, R7					; ACC = R7
0x19C0: B4 02 04	cjne	A, #0x02, Label_337			; If (ACC != 0x02) then jumps (forward) hither: 0x19C7

0x19C3: B2 C0		cpl	P4_0					; P4_0 = ~P4_0
0x19C5: B2 C1		cpl	P4_1					; P4_1 = ~P4_1

Label_337:

0x19C7: 15 12		dec	R2<#2>					; --R2<#2>
0x19C9: 80 07		sjmp	Label_339				; Jumps (forward) hither: 0x19D2

Label_338:

0x19CB: E4		clr	A					; ACC = 0
0x19CC: F5 12		mov	R2<#2>, A				; R2<#2> = ACC
0x19CE: F5 10		mov	R0<#2>, A				; R0<#2> = ACC
0x19D0: F5 11		mov	R1<#2>, A				; R1<#2> = ACC

Label_339:

0x19D2: D2 0B		setb	0x0B					; [0x0B] = H
0x19D4: 75 2E 14	mov	0x2E, #0x14				; [0x2E] = 0x14
0x19D7: 30 03 09	jnb	0x03, Label_340				; If ([0x03] == L) then jumps (forward) hither: 0x19E3

0x19DA: E5 45		mov	A, 0x45					; ACC = [0x45]
0x19DC: D3		setb	C					; CY = H
0x19DD: 94 00		subb	A, #0x00				; ACC -= 0x00 + CY {'\0'}
0x19DF: 40 02		jc	Label_340				; If (CY == H) then jumps (forward) hither: 0x19E3

0x19E1: 15 45		dec	0x45					; --[0x45]

Label_340:

0x19E3: D2 0C		setb	0x0C					; [0x0C] = H
0x19E5: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_078:

0x19E6: C2 AF		clr	EA					; EA = L
0x19E8: E5 EF		mov	A, RXFLG0				; ACC = RXFLG0
0x19EA: 30 E4 02	jnb	ACC_4, Label_341			; If (ACC_4 == L) then jumps (forward) hither: 0x19EF

0x19ED: 80 29		sjmp	Label_343				; Jumps (forward) hither: 0x1A18

Label_341:

0x19EF: 43 EF 04	orl	RXFLG0, #0x04				; RXFLG0 |= 0x04
0x19F2: E5 EE		mov	A, RXCNT0				; ACC = RXCNT0
0x19F4: 60 27		jz	Label_344				; If (ACC == 0) then jumps (forward) hither: 0x1A1D

0x19F6: E5 EE		mov	A, RXCNT0				; ACC = RXCNT0
0x19F8: C3		clr	C					; CY = L
0x19F9: 94 09		subb	A, #0x09				; ACC -= 0x09 + CY {'\t'}
0x19FB: 40 0E		jc	Label_342				; If (CY == H) then jumps (forward) hither: 0x1A0B

0x19FD: 12 11 8E	lcall	Function_044				; Calls (backward) this: 0x118E (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x118E)
0x1A00: 43 EC 02	orl	TXFLG0, #0x02				; TXFLG0 |= 0x02
0x1A03: 43 EF 02	orl	RXFLG0, #0x02				; RXFLG0 |= 0x02
0x1A06: 12 27 B6	lcall	Label_597				; Calls (forward) this: 0x27B6 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27B6)
0x1A09: 80 1D		sjmp	Label_345				; Jumps (forward) hither: 0x1A28

Label_342:

0x1A0B: AF EE		mov	R7, RXCNT0				; R7 = RXCNT0
0x1A0D: 12 24 02	lcall	Function_114				; Calls (forward) this: 0x2402 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2402)
0x1A10: 53 EF FE	anl	RXFLG0, #0xFE				; RXFLG0 &= 0xFE
0x1A13: E5 EF		mov	A, RXFLG0				; ACC = RXFLG0
0x1A15: 30 E4 15	jnb	ACC_4, Label_346			; If (ACC_4 == L) then jumps (forward) hither: 0x1A2D

Label_343:

0x1A18: 53 DB F7	anl	IF2, #0xF7				; IF2 &= 0xF7
0x1A1B: 80 0B		sjmp	Label_345				; Jumps (forward) hither: 0x1A28

Label_344:

0x1A1D: 53 EF FE	anl	RXFLG0, #0xFE				; RXFLG0 &= 0xFE
0x1A20: E5 EF		mov	A, RXFLG0				; ACC = RXFLG0
0x1A22: 30 E4 08	jnb	ACC_4, Label_346			; If (ACC_4 == L) then jumps (forward) hither: 0x1A2D

0x1A25: 53 DB F7	anl	IF2, #0xF7				; IF2 &= 0xF7

Label_345:

0x1A28: 53 EF FB	anl	RXFLG0, #0xFB				; RXFLG0 &= 0xFB
0x1A2B: 80 12		sjmp	Label_347				; Jumps (forward) hither: 0x1A3F

Label_346:

0x1A2D: 12 27 03	lcall	Function_133				; Calls (forward) this: 0x2703 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2703)
0x1A30: EF		mov	A, R7					; ACC = R7
0x1A31: 75 F0 03	mov	B, #0x03				; B = 0x03
0x1A34: A4		mul	AB					; B:ACC = ACC * B
0x1A35: 24 D0		add	A, #0xD0				; ACC += 0xD0
0x1A37: F5 82		mov	DPL, A					; DPL = ACC
0x1A39: E4		clr	A					; ACC = 0
0x1A3A: 34 04		addc	A, #0x04				; ACC += 0x04 + CY
0x1A3C: 12 11 75	lcall	Function_042				; Calls (backward) this: 0x1175 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1175)

Label_347:

0x1A3F: 53 EF FB	anl	RXFLG0, #0xFB				; RXFLG0 &= 0xFB
0x1A42: D2 AF		setb	EA					; EA = H
0x1A44: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_079:

0x1A45: E5 2F		mov	A, 0x2F					; ACC = [0x2F]
0x1A47: 64 05		xrl	A, #0x05				; ACC ^= 0x05
0x1A49: 70 31		jnz	Label_350				; If (ACC != 0) then jumps (forward) hither: 0x1A7C

0x1A4B: E5 30		mov	A, 0x30					; ACC = [0x30]
0x1A4D: B4 75 18	cjne	A, #0x75, Label_348			; If (ACC != 0x75 {'u'}) then jumps (forward) hither: 0x1A68

0x1A50: E5 34		mov	A, 0x34					; ACC = [0x34]
0x1A52: 45 33		orl	A, 0x33					; ACC |= [0x33]
0x1A54: 45 32		orl	A, 0x32					; ACC |= [0x32]
0x1A56: 45 31		orl	A, 0x31					; ACC |= [0x31]
0x1A58: 70 22		jnz	Label_350				; If (ACC != 0) then jumps (forward) hither: 0x1A7C

0x1A5A: C2 AF		clr	EA					; EA = L
0x1A5C: 74 5A		mov	A, #0x5A				; ACC = 0x5A {'Z'}
0x1A5E: 75 F0 A5	mov	B, #0xA5				; B = 0xA5
0x1A61: 12 00 1E	lcall	Function_003				; Calls (backward) this: 0x001E (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x001E)
0x1A64: D2 AF		setb	EA					; EA = H
0x1A66: 80 14		sjmp	Label_350				; Jumps (forward) hither: 0x1A7C

Label_348:

0x1A68: E5 30		mov	A, 0x30					; ACC = [0x30]
0x1A6A: B4 A0 06	cjne	A, #0xA0, Label_349			; If (ACC != 0xA0) then jumps (forward) hither: 0x1A73

0x1A6D: 78 92		mov	R0, #0x92				; R0 = 0x92
0x1A6F: 76 0B		mov	@R0, #0x0B				; [R0] = 0x0B
0x1A71: 80 09		sjmp	Label_350				; Jumps (forward) hither: 0x1A7C

Label_349:

0x1A73: E5 30		mov	A, 0x30					; ACC = [0x30]
0x1A75: B4 A1 04	cjne	A, #0xA1, Label_350			; If (ACC != 0xA1) then jumps (forward) hither: 0x1A7C

0x1A78: 78 93		mov	R0, #0x93				; R0 = 0x93
0x1A7A: A6 31		mov	@R0, 0x31				; [R0] = [0x31]

Label_350:

0x1A7C: E5 2F		mov	A, 0x2F					; ACC = [0x2F]
0x1A7E: B4 23 04	cjne	A, #0x23, Label_351			; If (ACC != 0x23 {'#'}) then jumps (forward) hither: 0x1A85

0x1A81: 78 D5		mov	R0, #0xD5				; R0 = 0xD5
0x1A83: A6 30		mov	@R0, 0x30				; [R0] = [0x30]

Label_351:

0x1A85: E5 2F		mov	A, 0x2F					; ACC = [0x2F]
0x1A87: B4 25 06	cjne	A, #0x25, Label_352			; If (ACC != 0x25 {'%'}) then jumps (forward) hither: 0x1A90

0x1A8A: 78 D4		mov	R0, #0xD4				; R0 = 0xD4
0x1A8C: A6 30		mov	@R0, 0x30				; [R0] = [0x30]
0x1A8E: 80 0D		sjmp	Label_353				; Jumps (forward) hither: 0x1A9D

Label_352:

0x1A90: E5 2F		mov	A, 0x2F					; ACC = [0x2F]
0x1A92: B4 22 08	cjne	A, #0x22, Label_353			; If (ACC != 0x22 {'"'}) then jumps (forward) hither: 0x1A9D

0x1A95: 78 BA		mov	R0, #0xBA				; R0 = 0xBA
0x1A97: A6 30		mov	@R0, 0x30				; [R0] = [0x30]
0x1A99: 78 B9		mov	R0, #0xB9				; R0 = 0xB9
0x1A9B: 76 01		mov	@R0, #0x01				; [R0] = 0x01

Label_353:

0x1A9D: 02 27 B6	ljmp	Label_597				; Jumps (forward) hither: 0x27B6

Label_354:

0x1AA0: E5 32		mov	A, 0x32					; ACC = [0x32]
0x1AA2: 70 52		jnz	Label_366				; If (ACC != 0) then jumps (forward) hither: 0x1AF6

0x1AA4: E5 2F		mov	A, 0x2F					; ACC = [0x2F]
0x1AA6: 24 FE		add	A, #0xFE				; ACC += 0xFE
0x1AA8: 60 10		jz	Label_356				; If (ACC == 0) then jumps (forward) hither: 0x1ABA

0x1AAA: 24 02		add	A, #0x02				; ACC += 0x02
0x1AAC: 70 46		jnz	Label_365				; If (ACC != 0) then jumps (forward) hither: 0x1AF4

0x1AAE: E5 31		mov	A, 0x31					; ACC = [0x31]
0x1AB0: B4 01 05	cjne	A, #0x01, Label_355			; If (ACC != 0x01) then jumps (forward) hither: 0x1AB8

0x1AB3: 75 48 03	mov	0x48, #0x03				; [0x48] = 0x03
0x1AB6: 80 32		sjmp	Label_361				; Jumps (forward) hither: 0x1AEA

Label_355:

0x1AB8: 80 3C		sjmp	Label_366				; Jumps (forward) hither: 0x1AF6

Label_356:

0x1ABA: E5 34		mov	A, 0x34					; ACC = [0x34]
0x1ABC: 45 31		orl	A, 0x31					; ACC |= [0x31]
0x1ABE: 70 32		jnz	Label_364				; If (ACC != 0) then jumps (forward) hither: 0x1AF2

0x1AC0: E5 33		mov	A, 0x33					; ACC = [0x33]
0x1AC2: 24 80		add	A, #0x80				; ACC += 0x80
0x1AC4: 60 0F		jz	Label_357				; If (ACC == 0) then jumps (forward) hither: 0x1AD5

0x1AC6: 14		dec	A					; --ACC
0x1AC7: 60 11		jz	Label_358				; If (ACC == 0) then jumps (forward) hither: 0x1ADA

0x1AC9: 14		dec	A					; --ACC
0x1ACA: 60 18		jz	Label_360				; If (ACC == 0) then jumps (forward) hither: 0x1AE4

0x1ACC: 24 82		add	A, #0x82				; ACC += 0x82
0x1ACE: 70 20		jnz	Label_363				; If (ACC != 0) then jumps (forward) hither: 0x1AF0

0x1AD0: 75 48 04	mov	0x48, #0x04				; [0x48] = 0x04
0x1AD3: 80 15		sjmp	Label_361				; Jumps (forward) hither: 0x1AEA

Label_357:

0x1AD5: 75 48 05	mov	0x48, #0x05				; [0x48] = 0x05
0x1AD8: 80 10		sjmp	Label_361				; Jumps (forward) hither: 0x1AEA

Label_358:

0x1ADA: 30 03 05	jnb	0x03, Label_359				; If ([0x03] == L) then jumps (forward) hither: 0x1AE2

0x1ADD: 75 48 06	mov	0x48, #0x06				; [0x48] = 0x06
0x1AE0: 80 08		sjmp	Label_361				; Jumps (forward) hither: 0x1AEA

Label_359:

0x1AE2: 80 12		sjmp	Label_366				; Jumps (forward) hither: 0x1AF6

Label_360:

0x1AE4: 30 03 07	jnb	0x03, Label_362				; If ([0x03] == L) then jumps (forward) hither: 0x1AEE

0x1AE7: 75 48 0A	mov	0x48, #0x0A				; [0x48] = 0x0A {'\n'}

Label_361:

0x1AEA: 12 11 25	lcall	Function_033				; Calls (backward) this: 0x1125 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1125)
0x1AED: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_362:

0x1AEE: 80 06		sjmp	Label_366				; Jumps (forward) hither: 0x1AF6

Label_363:

0x1AF0: 80 04		sjmp	Label_366				; Jumps (forward) hither: 0x1AF6

Label_364:

0x1AF2: 80 02		sjmp	Label_366				; Jumps (forward) hither: 0x1AF6

Label_365:

0x1AF4: 80 00		sjmp	Label_366				; Jumps (forward) hither: 0x1AF6

Label_366:

0x1AF6: 12 27 29	lcall	Label_589				; Calls (forward) this: 0x2729 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2729)
0x1AF9: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_080:

0x1AFA: 8F 65		mov	0x65, R7				; [0x65] = R7
0x1AFC: 8B 66		mov	0x66, R3				; [0x66] = R3
0x1AFE: 8A 67		mov	0x67, R2				; [0x67] = R2
0x1B00: 89 68		mov	0x68, R1				; [0x68] = R1
0x1B02: 12 26 54	lcall	i2c_start				; Calls (forward) this: 0x2654 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2654)
0x1B05: E5 65		mov	A, 0x65					; ACC = [0x65]
0x1B07: 25 E0		add	A, ACC					; ACC += ACC
0x1B09: 44 01		orl	A, #0x01				; ACC |= 0x01
0x1B0B: FF		mov	R7, A					; R7 = ACC
0x1B0C: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x1B0E: 12 19 23	lcall	i2c_sendbyte				; Calls (backward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x1B11: EF		mov	A, R7					; ACC = R7
0x1B12: 64 FA		xrl	A, #0xFA				; ACC ^= 0xFA
0x1B14: 70 1C		jnz	Label_369				; If (ACC != 0) then jumps (forward) hither: 0x1B32

0x1B16: F5 6A		mov	0x6A, A					; [0x6A] = ACC

Label_367:

0x1B18: E5 69		mov	A, 0x69					; ACC = [0x69]
0x1B1A: 14		dec	A					; --ACC
0x1B1B: FF		mov	R7, A					; R7 = ACC
0x1B1C: E5 6A		mov	A, 0x6A					; ACC = [0x6A]
0x1B1E: C3		clr	C					; CY = L
0x1B1F: 9F		subb	A, R7					; ACC -= R7 + CY
0x1B20: 50 09		jnc	Label_368				; If (CY == L) then jumps (forward) hither: 0x1B2B

0x1B22: E4		clr	A					; ACC = 0
0x1B23: FF		mov	R7, A					; R7 = ACC
0x1B24: 12 1B 3E	lcall	Function_081				; Calls (forward) this: 0x1B3E (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1B3E)
0x1B27: 05 6A		inc	0x6A					; ++[0x6A]
0x1B29: 80 ED		sjmp	Label_367				; Jumps (backward) hither: 0x1B18

Label_368:

0x1B2B: 7F 01		mov	R7, #0x01				; R7 = 0x01
0x1B2D: 12 1B 3E	lcall	Function_081				; Calls (forward) this: 0x1B3E (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1B3E)
0x1B30: 80 06		sjmp	Label_370				; Jumps (forward) hither: 0x1B38

Label_369:

0x1B32: 12 26 9F	lcall	i2c_stop				; Calls (forward) this: 0x269F (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x269F)
0x1B35: 7F FB		mov	R7, #0xFB				; R7 = 0xFB
0x1B37: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_370:

0x1B38: 12 26 9F	lcall	i2c_stop				; Calls (forward) this: 0x269F (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x269F)
0x1B3B: 7F FA		mov	R7, #0xFA				; R7 = 0xFA
0x1B3D: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_081:

0x1B3E: 12 1B AA	lcall	Function_083				; Calls (forward) this: 0x1BAA (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1BAA)
0x1B41: AB 66		mov	R3, 0x66				; R3 = [0x66]
0x1B43: AA 67		mov	R2, 0x67				; R2 = [0x67]
0x1B45: A9 68		mov	R1, 0x68				; R1 = [0x68]
0x1B47: 85 6A 82	mov	DPL, 0x6A				; DPL = [0x6A]
0x1B4A: 75 83 00	mov	DPH, #0x00				; DPH = 0x00 {'\0'}
0x1B4D: EF		mov	A, R7					; ACC = R7
0x1B4E: 12 17 C2	lcall	?C?CSTOPTR				; Calls (backward) this: 0x17C2 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x17C2)
0x1B51: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_082:

0x1B52: 12 26 2B	lcall	Function_124				; Calls (forward) this: 0x262B (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x262B)
0x1B55: 40 4F		jc	Label_379				; If (CY == H) then jumps (forward) hither: 0x1BA6

0x1B57: 12 11 95	lcall	Function_045				; Calls (backward) this: 0x1195 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1195)
0x1B5A: 70 48		jnz	Label_378				; If (ACC != 0) then jumps (forward) hither: 0x1BA4

0x1B5C: E5 33		mov	A, 0x33					; ACC = [0x33]
0x1B5E: 70 09		jnz	Label_371				; If (ACC != 0) then jumps (forward) hither: 0x1B69

0x1B60: E5 31		mov	A, 0x31					; ACC = [0x31]
0x1B62: 70 42		jnz	Label_379				; If (ACC != 0) then jumps (forward) hither: 0x1BA6

0x1B64: 75 48 0D	mov	0x48, #0x0D				; [0x48] = 0x0D {'\r'}
0x1B67: 80 10		sjmp	Label_372				; Jumps (forward) hither: 0x1B79

Label_371:

0x1B69: E5 33		mov	A, 0x33					; ACC = [0x33]
0x1B6B: 64 01		xrl	A, #0x01				; ACC ^= 0x01
0x1B6D: 70 33		jnz	Label_377				; If (ACC != 0) then jumps (forward) hither: 0x1BA2

0x1B6F: E5 31		mov	A, 0x31					; ACC = [0x31]
0x1B71: 70 0B		jnz	Label_373				; If (ACC != 0) then jumps (forward) hither: 0x1B7E

0x1B73: 43 4F 03	orl	0x4F, #0x03				; [0x4F] |= 0x03
0x1B76: 75 48 0F	mov	0x48, #0x0F				; [0x48] = 0x0F

Label_372:

0x1B79: 75 49 01	mov	0x49, #0x01				; [0x49] = 0x01
0x1B7C: 80 1E		sjmp	Label_375				; Jumps (forward) hither: 0x1B9C

Label_373:

0x1B7E: 90 27 25	mov	DPTR, #0x2725				; DPTR = 0x2725
0x1B81: E4		clr	A					; ACC = 0
0x1B82: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x1B83: B5 31 08	cjne	A, 0x31, Label_374			; If (ACC != [0x31]) then jumps (forward) hither: 0x1B8E

0x1B86: 90 27 1D	mov	DPTR, #0x271D				; DPTR = 0x271D
0x1B89: 12 11 82	lcall	Function_043				; Calls (backward) this: 0x1182 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1182)
0x1B8C: 80 0E		sjmp	Label_375				; Jumps (forward) hither: 0x1B9C

Label_374:

0x1B8E: 90 27 26	mov	DPTR, #0x2726				; DPTR = 0x2726
0x1B91: E4		clr	A					; ACC = 0
0x1B92: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x1B93: B5 31 0A	cjne	A, 0x31, Label_376			; If (ACC != [0x31]) then jumps (forward) hither: 0x1BA0

0x1B96: 90 27 1E	mov	DPTR, #0x271E				; DPTR = 0x271E
0x1B99: 12 11 82	lcall	Function_043				; Calls (backward) this: 0x1182 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1182)

Label_375:

0x1B9C: 12 11 29	lcall	Function_034				; Calls (backward) this: 0x1129 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1129)
0x1B9F: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_376:

0x1BA0: 80 04		sjmp	Label_379				; Jumps (forward) hither: 0x1BA6

Label_377:

0x1BA2: 80 02		sjmp	Label_379				; Jumps (forward) hither: 0x1BA6

Label_378:

0x1BA4: 80 00		sjmp	Label_379				; Jumps (forward) hither: 0x1BA6

Label_379:

0x1BA6: 12 27 29	lcall	Label_589				; Calls (forward) this: 0x2729 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2729)
0x1BA9: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_083:

0x1BAA: E4		clr	A					; ACC = 0
0x1BAB: F5 6B		mov	0x6B, A					; [0x6B] = ACC
0x1BAD: 43 9D 01	orl	P3CON, #0x01				; P3CON |= 0x01
0x1BB0: FE		mov	R6, A					; R6 = ACC

Label_380:

0x1BB1: 43 9D 04	orl	P3CON, #0x04				; P3CON |= 0x04
0x1BB4: E5 6B		mov	A, 0x6B					; ACC = [0x6B]
0x1BB6: 25 E0		add	A, ACC					; ACC += ACC
0x1BB8: F5 6B		mov	0x6B, A					; [0x6B] = ACC
0x1BBA: A2 B0		mov	C, P3_0					; CY = P3_0
0x1BBC: E4		clr	A					; ACC = 0
0x1BBD: 33		rlc	A					; ACC[76543210] = ACC[6543210C], CY = ACC[7]
0x1BBE: 42 6B		orl	0x6B, A					; [0x6B] |= ACC
0x1BC0: 00		nop
0x1BC1: 00		nop
0x1BC2: 00		nop
0x1BC3: 00		nop
0x1BC4: 00		nop
0x1BC5: 00		nop
0x1BC6: 00		nop
0x1BC7: 00		nop
0x1BC8: 00		nop
0x1BC9: 00		nop
0x1BCA: 00		nop
0x1BCB: 00		nop
0x1BCC: 53 9D FB	anl	P3CON, #0xFB				; P3CON &= 0xFB
0x1BCF: C2 B2		clr	P3_2					; P3_2 = L
0x1BD1: 00		nop
0x1BD2: 00		nop
0x1BD3: 00		nop
0x1BD4: 00		nop
0x1BD5: 00		nop
0x1BD6: 00		nop
0x1BD7: 00		nop
0x1BD8: 00		nop
0x1BD9: 00		nop
0x1BDA: 00		nop
0x1BDB: 00		nop
0x1BDC: 00		nop
0x1BDD: 0E		inc	R6					; ++R6
0x1BDE: BE 08 D0	cjne	R6, #0x08, Label_380			; If (R6 != 0x08 {'\b'}) then jumps (backward) hither: 0x1BB1

0x1BE1: EF		mov	A, R7					; ACC = R7
0x1BE2: 60 05		jz	Label_381				; If (ACC == 0) then jumps (forward) hither: 0x1BE9

0x1BE4: 43 9D 01	orl	P3CON, #0x01				; P3CON |= 0x01
0x1BE7: 80 05		sjmp	Label_382				; Jumps (forward) hither: 0x1BEE

Label_381:

0x1BE9: 53 9D FE	anl	P3CON, #0xFE				; P3CON &= 0xFE
0x1BEC: C2 B0		clr	P3_0					; P3_0 = L

Label_382:

0x1BEE: 12 27 AF	lcall	WAIT6					; Calls (forward) this: 0x27AF (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27AF)
0x1BF1: 43 9D 04	orl	P3CON, #0x04				; P3CON |= 0x04
0x1BF4: 12 27 AF	lcall	WAIT6					; Calls (forward) this: 0x27AF (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27AF)
0x1BF7: 53 9D FB	anl	P3CON, #0xFB				; P3CON &= 0xFB
0x1BFA: C2 B2		clr	P3_2					; P3_2 = L
0x1BFC: AF 6B		mov	R7, 0x6B				; R7 = [0x6B]
0x1BFE: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_084:

0x1BFF: EF		mov	A, R7					; ACC = R7
0x1C00: 60 1F		jz	Label_385				; If (ACC == 0) then jumps (forward) hither: 0x1C21

0x1C02: E4		clr	A					; ACC = 0
0x1C03: FE		mov	R6, A					; R6 = ACC

Label_383:

0x1C04: 74 AD		mov	A, #0xAD				; ACC = 0xAD
0x1C06: 2E		add	A, R6					; ACC += R6
0x1C07: F8		mov	R0, A					; R0 = ACC
0x1C08: E6		mov	A, @R0					; ACC = [R0]
0x1C09: 70 09		jnz	Label_384				; If (ACC != 0) then jumps (forward) hither: 0x1C14

0x1C0B: 74 AD		mov	A, #0xAD				; ACC = 0xAD
0x1C0D: 2E		add	A, R6					; ACC += R6
0x1C0E: F8		mov	R0, A					; R0 = ACC
0x1C0F: A6 05		mov	@R0, R5<#0>				; [R0] = R5<#0>
0x1C11: D2 22		setb	0x22					; [0x22] = H
0x1C13: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_384:

0x1C14: 74 AD		mov	A, #0xAD				; ACC = 0xAD
0x1C16: 2E		add	A, R6					; ACC += R6
0x1C17: F8		mov	R0, A					; R0 = ACC
0x1C18: E6		mov	A, @R0					; ACC = [R0]
0x1C19: 6D		xrl	A, R5					; ACC ^= R5
0x1C1A: 60 37		jz	Label_390				; If (ACC == 0) then jumps (forward) hither: 0x1C53

0x1C1C: 0E		inc	R6					; ++R6
0x1C1D: BE 06 E4	cjne	R6, #0x06, Label_383			; If (R6 != 0x06) then jumps (backward) hither: 0x1C04

0x1C20: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_385:

0x1C21: E4		clr	A					; ACC = 0
0x1C22: FE		mov	R6, A					; R6 = ACC

Label_386:

0x1C23: 74 AD		mov	A, #0xAD				; ACC = 0xAD
0x1C25: 2E		add	A, R6					; ACC += R6
0x1C26: F8		mov	R0, A					; R0 = ACC
0x1C27: E6		mov	A, @R0					; ACC = [R0]
0x1C28: 6D		xrl	A, R5					; ACC ^= R5
0x1C29: 70 24		jnz	Label_389				; If (ACC != 0) then jumps (forward) hither: 0x1C4F

0x1C2B: EE		mov	A, R6					; ACC = R6
0x1C2C: C3		clr	C					; CY = L
0x1C2D: 94 05		subb	A, #0x05				; ACC -= 0x05 + CY
0x1C2F: 50 17		jnc	Label_388				; If (CY == L) then jumps (forward) hither: 0x1C48

0x1C31: AF 06		mov	R7, R6<#0>				; R7 = R6<#0>

Label_387:

0x1C33: EF		mov	A, R7					; ACC = R7
0x1C34: C3		clr	C					; CY = L
0x1C35: 94 05		subb	A, #0x05				; ACC -= 0x05 + CY
0x1C37: 50 0F		jnc	Label_388				; If (CY == L) then jumps (forward) hither: 0x1C48

0x1C39: 74 AE		mov	A, #0xAE				; ACC = 0xAE
0x1C3B: 2F		add	A, R7					; ACC += R7
0x1C3C: F8		mov	R0, A					; R0 = ACC
0x1C3D: E6		mov	A, @R0					; ACC = [R0]
0x1C3E: FC		mov	R4, A					; R4 = ACC
0x1C3F: 74 AD		mov	A, #0xAD				; ACC = 0xAD
0x1C41: 2F		add	A, R7					; ACC += R7
0x1C42: F8		mov	R0, A					; R0 = ACC
0x1C43: A6 04		mov	@R0, R4<#0>				; [R0] = R4<#0>
0x1C45: 0F		inc	R7					; ++R7
0x1C46: 80 EB		sjmp	Label_387				; Jumps (backward) hither: 0x1C33

Label_388:

0x1C48: E4		clr	A					; ACC = 0
0x1C49: 78 B2		mov	R0, #0xB2				; R0 = 0xB2
0x1C4B: F6		mov	@R0, A					; [R0] = ACC
0x1C4C: D2 22		setb	0x22					; [0x22] = H
0x1C4E: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_389:

0x1C4F: 0E		inc	R6					; ++R6
0x1C50: BE 06 D0	cjne	R6, #0x06, Label_386			; If (R6 != 0x06) then jumps (backward) hither: 0x1C23

Label_390:

0x1C53: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_085:

0x1C54: 12 16 D0	lcall	Function_058				; Calls (backward) this: 0x16D0 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x16D0)
0x1C57: 7A 23		mov	R2, #0x23				; R2 = 0x23 {'#'}
0x1C59: 79 E7		mov	R1, #0xE7				; R1 = 0xE7
0x1C5B: 90 23 E6	mov	DPTR, #0x23E6				; DPTR = 0x23E6
0x1C5E: 12 1C 9C	lcall	Function_086				; Calls (forward) this: 0x1C9C (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1C9C)
0x1C61: BF FB 03	cjne	R7, #0xFB, Label_391			; If (R7 != 0xFB) then jumps (forward) hither: 0x1C67

0x1C64: 7F FB		mov	R7, #0xFB				; R7 = 0xFB
0x1C66: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_391:

0x1C67: 7F 05		mov	R7, #0x05				; R7 = 0x05
0x1C69: 12 24 5E	lcall	Function_117				; Calls (forward) this: 0x245E (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x245E)
0x1C6C: 12 16 D0	lcall	Function_058				; Calls (backward) this: 0x16D0 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x16D0)
0x1C6F: 7A 23		mov	R2, #0x23				; R2 = 0x23 {'#'}
0x1C71: 79 EB		mov	R1, #0xEB				; R1 = 0xEB
0x1C73: 90 23 EA	mov	DPTR, #0x23EA				; DPTR = 0x23EA
0x1C76: 12 1C 9C	lcall	Function_086				; Calls (forward) this: 0x1C9C (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1C9C)
0x1C79: BF FB 03	cjne	R7, #0xFB, Label_392			; If (R7 != 0xFB) then jumps (forward) hither: 0x1C7F

0x1C7C: 7F FB		mov	R7, #0xFB				; R7 = 0xFB
0x1C7E: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_392:

0x1C7F: 12 16 9B	lcall	Function_053				; Calls (backward) this: 0x169B (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x169B)
0x1C82: 12 1A FA	lcall	Function_080				; Calls (backward) this: 0x1AFA (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1AFA)
0x1C85: 78 D7		mov	R0, #0xD7				; R0 = 0xD7
0x1C87: EF		mov	A, R7					; ACC = R7
0x1C88: F6		mov	@R0, A					; [R0] = ACC
0x1C89: BF FB 03	cjne	R7, #0xFB, Label_393			; If (R7 != 0xFB) then jumps (forward) hither: 0x1C8F

0x1C8C: 7F FB		mov	R7, #0xFB				; R7 = 0xFB
0x1C8E: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_393:

0x1C8F: 78 AB		mov	R0, #0xAB				; R0 = 0xAB
0x1C91: E6		mov	A, @R0					; ACC = [R0]
0x1C92: 64 55		xrl	A, #0x55				; ACC ^= 0x55 {'U'}
0x1C94: 60 03		jz	Label_394				; If (ACC == 0) then jumps (forward) hither: 0x1C99

0x1C96: 7F FB		mov	R7, #0xFB				; R7 = 0xFB
0x1C98: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_394:

0x1C99: 7F FA		mov	R7, #0xFA				; R7 = 0xFA
0x1C9B: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_086:

0x1C9C: E4		clr	A					; ACC = 0
0x1C9D: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x1C9E: F5 69		mov	0x69, A					; [0x69] = ACC
0x1CA0: 12 1E 2C	lcall	Function_093				; Calls (forward) this: 0x1E2C (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1E2C)
0x1CA3: 78 D7		mov	R0, #0xD7				; R0 = 0xD7
0x1CA5: EF		mov	A, R7					; ACC = R7
0x1CA6: F6		mov	@R0, A					; [R0] = ACC
0x1CA7: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_087:

0x1CA8: 12 16 D0	lcall	Function_058				; Calls (backward) this: 0x16D0 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x16D0)
0x1CAB: 7A 23		mov	R2, #0x23				; R2 = 0x23 {'#'}
0x1CAD: 79 EE		mov	R1, #0xEE				; R1 = 0xEE
0x1CAF: 90 23 ED	mov	DPTR, #0x23ED				; DPTR = 0x23ED
0x1CB2: 12 1C F0	lcall	Function_088				; Calls (forward) this: 0x1CF0 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1CF0)
0x1CB5: BF FB 03	cjne	R7, #0xFB, Label_395			; If (R7 != 0xFB) then jumps (forward) hither: 0x1CBB

0x1CB8: 7F FB		mov	R7, #0xFB				; R7 = 0xFB
0x1CBA: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_395:

0x1CBB: 7F 19		mov	R7, #0x19				; R7 = 0x19
0x1CBD: 12 24 5E	lcall	Function_117				; Calls (forward) this: 0x245E (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x245E)
0x1CC0: 12 16 D0	lcall	Function_058				; Calls (backward) this: 0x16D0 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x16D0)
0x1CC3: 7A 23		mov	R2, #0x23				; R2 = 0x23 {'#'}
0x1CC5: 79 F2		mov	R1, #0xF2				; R1 = 0xF2
0x1CC7: 90 23 F1	mov	DPTR, #0x23F1				; DPTR = 0x23F1
0x1CCA: 12 1C F0	lcall	Function_088				; Calls (forward) this: 0x1CF0 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1CF0)
0x1CCD: BF FB 03	cjne	R7, #0xFB, Label_396			; If (R7 != 0xFB) then jumps (forward) hither: 0x1CD3

0x1CD0: 7F FB		mov	R7, #0xFB				; R7 = 0xFB
0x1CD2: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_396:

0x1CD3: 12 16 9B	lcall	Function_053				; Calls (backward) this: 0x169B (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x169B)
0x1CD6: 12 1A FA	lcall	Function_080				; Calls (backward) this: 0x1AFA (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1AFA)
0x1CD9: 78 D7		mov	R0, #0xD7				; R0 = 0xD7
0x1CDB: EF		mov	A, R7					; ACC = R7
0x1CDC: F6		mov	@R0, A					; [R0] = ACC
0x1CDD: BF FB 03	cjne	R7, #0xFB, Label_397			; If (R7 != 0xFB) then jumps (forward) hither: 0x1CE3

0x1CE0: 7F FB		mov	R7, #0xFB				; R7 = 0xFB
0x1CE2: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_397:

0x1CE3: 78 AB		mov	R0, #0xAB				; R0 = 0xAB
0x1CE5: E6		mov	A, @R0					; ACC = [R0]
0x1CE6: 64 55		xrl	A, #0x55				; ACC ^= 0x55 {'U'}
0x1CE8: 60 03		jz	Label_398				; If (ACC == 0) then jumps (forward) hither: 0x1CED

0x1CEA: 7F FB		mov	R7, #0xFB				; R7 = 0xFB
0x1CEC: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_398:

0x1CED: 7F FA		mov	R7, #0xFA				; R7 = 0xFA
0x1CEF: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_088:

0x1CF0: E4		clr	A					; ACC = 0
0x1CF1: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x1CF2: F5 69		mov	0x69, A					; [0x69] = ACC
0x1CF4: 12 1E 2C	lcall	Function_093				; Calls (forward) this: 0x1E2C (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1E2C)
0x1CF7: 78 D7		mov	R0, #0xD7				; R0 = 0xD7
0x1CF9: EF		mov	A, R7					; ACC = R7
0x1CFA: F6		mov	@R0, A					; [R0] = ACC
0x1CFB: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_089:

0x1CFC: 20 09 4C	jb	0x09, Label_406				; If ([0x09] == H) then jumps (forward) hither: 0x1D4B

0x1CFF: 12 17 EA	lcall	Function_064				; Calls (backward) this: 0x17EA (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x17EA)
0x1D02: 30 0F 02	jnb	0x0F, Label_399				; If ([0x0F] == L) then jumps (forward) hither: 0x1D07

0x1D05: 80 41		sjmp	Label_405				; Jumps (forward) hither: 0x1D48

Label_399:

0x1D07: E5 27		mov	A, 0x27					; ACC = [0x27]
0x1D09: 70 17		jnz	Label_401				; If (ACC != 0) then jumps (forward) hither: 0x1D22

0x1D0B: 74 6E		mov	A, #0x6E				; ACC = 0x6E {'n'}
0x1D0D: 25 26		add	A, 0x26					; ACC += [0x26]
0x1D0F: F8		mov	R0, A					; R0 = ACC
0x1D10: A6 39		mov	@R0, 0x39				; [R0] = [0x39]
0x1D12: 05 26		inc	0x26					; ++[0x26]
0x1D14: E5 26		mov	A, 0x26					; ACC = [0x26]
0x1D16: C3		clr	C					; CY = L
0x1D17: 94 12		subb	A, #0x12				; ACC -= 0x12 + CY
0x1D19: 50 01		jnc	Label_400				; If (CY == L) then jumps (forward) hither: 0x1D1C

0x1D1B: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_400:

0x1D1C: 05 27		inc	0x27					; ++[0x27]
0x1D1E: E4		clr	A					; ACC = 0
0x1D1F: F5 26		mov	0x26, A					; [0x26] = ACC
0x1D21: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_401:

0x1D22: 74 6E		mov	A, #0x6E				; ACC = 0x6E {'n'}
0x1D24: 25 26		add	A, 0x26					; ACC += [0x26]
0x1D26: F8		mov	R0, A					; R0 = ACC
0x1D27: E6		mov	A, @R0					; ACC = [R0]
0x1D28: 65 39		xrl	A, 0x39					; ACC |= [0x39]
0x1D2A: 60 02		jz	Label_402				; If (ACC == 0) then jumps (forward) hither: 0x1D2E

0x1D2C: 80 1A		sjmp	Label_405				; Jumps (forward) hither: 0x1D48

Label_402:

0x1D2E: 05 26		inc	0x26					; ++[0x26]
0x1D30: E5 26		mov	A, 0x26					; ACC = [0x26]
0x1D32: C3		clr	C					; CY = L
0x1D33: 94 12		subb	A, #0x12				; ACC -= 0x12 + CY
0x1D35: 50 01		jnc	Label_403				; If (CY == L) then jumps (forward) hither: 0x1D38

0x1D37: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_403:

0x1D38: 12 1F 66	lcall	Function_097				; Calls (forward) this: 0x1F66 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1F66)
0x1D3B: 92 08		mov	0x08, C					; [0x08] = CY
0x1D3D: 30 08 02	jnb	0x08, Label_404				; If ([0x08] == L) then jumps (forward) hither: 0x1D42

0x1D40: 80 06		sjmp	Label_405				; Jumps (forward) hither: 0x1D48

Label_404:

0x1D42: 20 09 03	jb	0x09, Label_405				; If ([0x09] == H) then jumps (forward) hither: 0x1D48

0x1D45: 12 1F 2B	lcall	Function_096				; Calls (forward) this: 0x1F2B (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1F2B)

Label_405:

0x1D48: 12 28 04	lcall	Function_144				; Calls (forward) this: 0x2804 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2804)

Label_406:

0x1D4B: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_090:

0x1D4C: 12 26 16	lcall	Function_123				; Calls (forward) this: 0x2616 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2616)
0x1D4F: 40 44		jc	Label_413				; If (CY == H) then jumps (forward) hither: 0x1D95

0x1D51: E5 36		mov	A, 0x36					; ACC = [0x36]
0x1D53: 45 34		orl	A, 0x34					; ACC |= [0x34]
0x1D55: 70 3C		jnz	Label_412				; If (ACC != 0) then jumps (forward) hither: 0x1D93

0x1D57: E5 35		mov	A, 0x35					; ACC = [0x35]
0x1D59: 64 01		xrl	A, #0x01				; ACC ^= 0x01
0x1D5B: 70 36		jnz	Label_412				; If (ACC != 0) then jumps (forward) hither: 0x1D93

0x1D5D: E5 33		mov	A, 0x33					; ACC = [0x33]
0x1D5F: 70 09		jnz	Label_407				; If (ACC != 0) then jumps (forward) hither: 0x1D6A

0x1D61: E5 31		mov	A, 0x31					; ACC = [0x31]
0x1D63: 70 30		jnz	Label_413				; If (ACC != 0) then jumps (forward) hither: 0x1D95

0x1D65: 85 3C EA	mov	TXDAT0, 0x3C				; TXDAT0 = [0x3C]
0x1D68: 80 21		sjmp	Label_409				; Jumps (forward) hither: 0x1D8B

Label_407:

0x1D6A: E5 33		mov	A, 0x33					; ACC = [0x33]
0x1D6C: 64 01		xrl	A, #0x01				; ACC ^= 0x01
0x1D6E: 70 21		jnz	Label_411				; If (ACC != 0) then jumps (forward) hither: 0x1D91

0x1D70: 90 27 25	mov	DPTR, #0x2725				; DPTR = 0x2725
0x1D73: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x1D74: B5 31 07	cjne	A, 0x31, Label_408			; If (ACC != [0x31]) then jumps (forward) hither: 0x1D7E

0x1D77: 78 95		mov	R0, #0x95				; R0 = 0x95
0x1D79: E6		mov	A, @R0					; ACC = [R0]
0x1D7A: F5 EA		mov	TXDAT0, A				; TXDAT0 = ACC
0x1D7C: 80 0D		sjmp	Label_409				; Jumps (forward) hither: 0x1D8B

Label_408:

0x1D7E: 90 27 26	mov	DPTR, #0x2726				; DPTR = 0x2726
0x1D81: E4		clr	A					; ACC = 0
0x1D82: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x1D83: B5 31 09	cjne	A, 0x31, Label_410			; If (ACC != [0x31]) then jumps (forward) hither: 0x1D8F

0x1D86: 78 96		mov	R0, #0x96				; R0 = 0x96
0x1D88: E6		mov	A, @R0					; ACC = [R0]
0x1D89: F5 EA		mov	TXDAT0, A				; TXDAT0 = ACC

Label_409:

0x1D8B: 12 11 15	lcall	Function_031				; Calls (backward) this: 0x1115 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1115)
0x1D8E: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_410:

0x1D8F: 80 04		sjmp	Label_413				; Jumps (forward) hither: 0x1D95

Label_411:

0x1D91: 80 02		sjmp	Label_413				; Jumps (forward) hither: 0x1D95

Label_412:

0x1D93: 80 00		sjmp	Label_413				; Jumps (forward) hither: 0x1D95

Label_413:

0x1D95: 12 27 29	lcall	Label_589				; Calls (forward) this: 0x2729 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2729)
0x1D98: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_091:

0x1D99: E5 36		mov	A, 0x36					; ACC = [0x36]
0x1D9B: 45 35		orl	A, 0x35					; ACC |= [0x35]
0x1D9D: 45 32		orl	A, 0x32					; ACC |= [0x32]
0x1D9F: 70 3F		jnz	Label_420				; If (ACC != 0) then jumps (forward) hither: 0x1DE0

0x1DA1: E5 2F		mov	A, 0x2F					; ACC = [0x2F]
0x1DA3: 70 0C		jnz	Label_415				; If (ACC != 0) then jumps (forward) hither: 0x1DB1

0x1DA5: E5 31		mov	A, 0x31					; ACC = [0x31]
0x1DA7: B4 01 05	cjne	A, #0x01, Label_414			; If (ACC != 0x01) then jumps (forward) hither: 0x1DAF

0x1DAA: 75 48 07	mov	0x48, #0x07				; [0x48] = 0x07 {'\a'}
0x1DAD: 80 29		sjmp	Label_417				; Jumps (forward) hither: 0x1DD8

Label_414:

0x1DAF: 80 2F		sjmp	Label_420				; Jumps (forward) hither: 0x1DE0

Label_415:

0x1DB1: E5 2F		mov	A, 0x2F					; ACC = [0x2F]
0x1DB3: 64 02		xrl	A, #0x02				; ACC ^= 0x02
0x1DB5: 70 27		jnz	Label_419				; If (ACC != 0) then jumps (forward) hither: 0x1DDE

0x1DB7: E5 34		mov	A, 0x34					; ACC = [0x34]
0x1DB9: 45 31		orl	A, 0x31					; ACC |= [0x31]
0x1DBB: 70 21		jnz	Label_419				; If (ACC != 0) then jumps (forward) hither: 0x1DDE

0x1DBD: E5 33		mov	A, 0x33					; ACC = [0x33]
0x1DBF: 54 7F		anl	A, #0x7F				; ACC &= 0x7F {'^?'}
0x1DC1: 60 1B		jz	Label_419				; If (ACC == 0) then jumps (forward) hither: 0x1DDE

0x1DC3: 30 03 18	jnb	0x03, Label_419				; If ([0x03] == L) then jumps (forward) hither: 0x1DDE

0x1DC6: E5 33		mov	A, 0x33					; ACC = [0x33]
0x1DC8: B4 81 05	cjne	A, #0x81, Label_416			; If (ACC != 0x81) then jumps (forward) hither: 0x1DD0

0x1DCB: 75 48 08	mov	0x48, #0x08				; [0x48] = 0x08 {'\b'}
0x1DCE: 80 08		sjmp	Label_417				; Jumps (forward) hither: 0x1DD8

Label_416:

0x1DD0: E5 33		mov	A, 0x33					; ACC = [0x33]
0x1DD2: B4 82 07	cjne	A, #0x82, Label_418			; If (ACC != 0x82) then jumps (forward) hither: 0x1DDC

0x1DD5: 75 48 0B	mov	0x48, #0x0B				; [0x48] = 0x0B

Label_417:

0x1DD8: 12 11 25	lcall	Function_033				; Calls (backward) this: 0x1125 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1125)
0x1DDB: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_418:

0x1DDC: 80 02		sjmp	Label_420				; Jumps (forward) hither: 0x1DE0

Label_419:

0x1DDE: 80 00		sjmp	Label_420				; Jumps (forward) hither: 0x1DE0

Label_420:

0x1DE0: 12 27 29	lcall	Label_589				; Calls (forward) this: 0x2729 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2729)
0x1DE3: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_092:

0x1DE4: E5 E7		mov	A, TXFLG2				; ACC = TXFLG2
0x1DE6: 30 E3 42	jnb	ACC_3, Label_423			; If (ACC_3 == L) then jumps (forward) hither: 0x1E2B

0x1DE9: E5 E7		mov	A, TXFLG2				; ACC = TXFLG2
0x1DEB: 54 03		anl	A, #0x03				; ACC &= 0x03
0x1DED: 70 3C		jnz	Label_423				; If (ACC != 0) then jumps (forward) hither: 0x1E2B

0x1DEF: E5 45		mov	A, 0x45					; ACC = [0x45]
0x1DF1: 70 38		jnz	Label_423				; If (ACC != 0) then jumps (forward) hither: 0x1E2B

0x1DF3: 30 20 11	jnb	0x20, Label_421				; If ([0x20] == L) then jumps (forward) hither: 0x1E07

0x1DF6: C2 20		clr	0x20					; [0x20] = L
0x1DF8: C2 AF		clr	EA					; EA = L
0x1DFA: 75 E5 02	mov	TXDAT2, #0x02				; TXDAT2 = 0x02
0x1DFD: 78 B3		mov	R0, #0xB3				; R0 = 0xB3
0x1DFF: E6		mov	A, @R0					; ACC = [R0]
0x1E00: F5 E5		mov	TXDAT2, A				; TXDAT2 = ACC
0x1E02: 75 E6 02	mov	TXCNT2, #0x02				; TXCNT2 = 0x02
0x1E05: 80 1A		sjmp	Label_422				; Jumps (forward) hither: 0x1E21

Label_421:

0x1E07: 30 21 21	jnb	0x21, Label_423				; If ([0x21] == L) then jumps (forward) hither: 0x1E2B

0x1E0A: C2 21		clr	0x21					; [0x21] = L
0x1E0C: C2 AF		clr	EA					; EA = L
0x1E0E: 75 E5 03	mov	TXDAT2, #0x03				; TXDAT2 = 0x03
0x1E11: 78 B4		mov	R0, #0xB4				; R0 = 0xB4
0x1E13: E6		mov	A, @R0					; ACC = [R0]
0x1E14: F5 E5		mov	TXDAT2, A				; TXDAT2 = ACC
0x1E16: 08		inc	R0					; ++R0 (0xB5)
0x1E17: E6		mov	A, @R0					; ACC = [R0]
0x1E18: F5 E5		mov	TXDAT2, A				; TXDAT2 = ACC
0x1E1A: 08		inc	R0					; ++R0 (0xB6)
0x1E1B: E6		mov	A, @R0					; ACC = [R0]
0x1E1C: F5 E5		mov	TXDAT2, A				; TXDAT2 = ACC
0x1E1E: 75 E6 04	mov	TXCNT2, #0x04				; TXCNT2 = 0x04

Label_422:

0x1E21: D2 AF		setb	EA					; EA = H
0x1E23: 43 E7 01	orl	TXFLG2, #0x01				; TXFLG2 |= 0x01
0x1E26: E4		clr	A					; ACC = 0
0x1E27: F5 3A		mov	0x3A, A					; [0x3A] = ACC
0x1E29: F5 45		mov	0x45, A					; [0x45] = ACC

Label_423:

0x1E2B: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_093:

0x1E2C: 8F 65		mov	0x65, R7				; [0x65] = R7
0x1E2E: 8B 66		mov	0x66, R3				; [0x66] = R3
0x1E30: 8A 67		mov	0x67, R2				; [0x67] = R2
0x1E32: 89 68		mov	0x68, R1				; [0x68] = R1
0x1E34: 12 26 54	lcall	i2c_start				; Calls (forward) this: 0x2654 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2654)
0x1E37: E5 65		mov	A, 0x65					; ACC = [0x65]
0x1E39: 25 E0		add	A, ACC					; ACC += ACC
0x1E3B: FF		mov	R7, A					; R7 = ACC
0x1E3C: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x1E3E: 12 19 23	lcall	i2c_sendbyte				; Calls (backward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x1E41: BF FA 23	cjne	R7, #0xFA, Label_425			; If (R7 != 0xFA) then jumps (forward) hither: 0x1E67

Label_424:

0x1E44: AF 69		mov	R7, 0x69				; R7 = [0x69]
0x1E46: 15 69		dec	0x69					; --[0x69]
0x1E48: EF		mov	A, R7					; ACC = R7
0x1E49: 60 22		jz	Label_426				; If (ACC == 0) then jumps (forward) hither: 0x1E6D

0x1E4B: AB 66		mov	R3, 0x66				; R3 = [0x66]
0x1E4D: AA 67		mov	R2, 0x67				; R2 = [0x67]
0x1E4F: A9 68		mov	R1, 0x68				; R1 = [0x68]
0x1E51: 12 17 7C	lcall	?C?CLDPTR				; Calls (backward) this: 0x177C (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x177C)
0x1E54: FF		mov	R7, A					; R7 = ACC
0x1E55: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x1E57: 12 19 23	lcall	i2c_sendbyte				; Calls (backward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x1E5A: 74 01		mov	A, #0x01				; ACC = 0x01
0x1E5C: 25 68		add	A, 0x68					; ACC += [0x68]
0x1E5E: F5 68		mov	0x68, A					; [0x68] = ACC
0x1E60: E4		clr	A					; ACC = 0
0x1E61: 35 67		addc	A, 0x67					; ACC += [0x67] + CY
0x1E63: F5 67		mov	0x67, A					; [0x67] = ACC
0x1E65: 80 DD		sjmp	Label_424				; Jumps (backward) hither: 0x1E44

Label_425:

0x1E67: 12 26 9F	lcall	i2c_stop				; Calls (forward) this: 0x269F (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x269F)
0x1E6A: 7F FB		mov	R7, #0xFB				; R7 = 0xFB
0x1E6C: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_426:

0x1E6D: 12 26 9F	lcall	i2c_stop				; Calls (forward) this: 0x269F (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x269F)
0x1E70: 7F FA		mov	R7, #0xFA				; R7 = 0xFA
0x1E72: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_094:

0x1E73: E4		clr	A					; ACC = 0
0x1E74: 78 AB		mov	R0, #0xAB				; R0 = 0xAB
0x1E76: F6		mov	@R0, A					; [R0] = ACC
0x1E77: 78 D7		mov	R0, #0xD7				; R0 = 0xD7
0x1E79: F6		mov	@R0, A					; [R0] = ACC

Label_427:

0x1E7A: 12 16 AB	lcall	Function_054				; Calls (backward) this: 0x16AB (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x16AB)
0x1E7D: 12 1E 2C	lcall	Function_093				; Calls (backward) this: 0x1E2C (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1E2C)
0x1E80: 78 D8		mov	R0, #0xD8				; R0 = 0xD8
0x1E82: EF		mov	A, R7					; ACC = R7
0x1E83: F6		mov	@R0, A					; [R0] = ACC
0x1E84: BF FB 02	cjne	R7, #0xFB, Label_428			; If (R7 != 0xFB) then jumps (forward) hither: 0x1E89

0x1E87: 80 17		sjmp	Label_430				; Jumps (forward) hither: 0x1EA0

Label_428:

0x1E89: 12 16 9B	lcall	Function_053				; Calls (backward) this: 0x169B (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x169B)
0x1E8C: 12 1A FA	lcall	Function_080				; Calls (backward) this: 0x1AFA (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1AFA)
0x1E8F: 78 D8		mov	R0, #0xD8				; R0 = 0xD8
0x1E91: EF		mov	A, R7					; ACC = R7
0x1E92: F6		mov	@R0, A					; [R0] = ACC
0x1E93: BF FB 02	cjne	R7, #0xFB, Label_429			; If (R7 != 0xFB) then jumps (forward) hither: 0x1E98

0x1E96: 80 08		sjmp	Label_430				; Jumps (forward) hither: 0x1EA0

Label_429:

0x1E98: 78 AB		mov	R0, #0xAB				; R0 = 0xAB
0x1E9A: E6		mov	A, @R0					; ACC = [R0]
0x1E9B: 60 03		jz	Label_430				; If (ACC == 0) then jumps (forward) hither: 0x1EA0

0x1E9D: 7F FA		mov	R7, #0xFA				; R7 = 0xFA
0x1E9F: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_430:

0x1EA0: 7F 05		mov	R7, #0x05				; R7 = 0x05
0x1EA2: 12 24 5E	lcall	Function_117				; Calls (forward) this: 0x245E (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x245E)
0x1EA5: 78 D7		mov	R0, #0xD7				; R0 = 0xD7
0x1EA7: 06		inc	@R0					; ++[R0]
0x1EA8: E6		mov	A, @R0					; ACC = [R0]
0x1EA9: C3		clr	C					; CY = L
0x1EAA: 94 08		subb	A, #0x08				; ACC -= 0x08 + CY {'\b'}
0x1EAC: 40 CC		jc	Label_427				; If (CY == H) then jumps (backward) hither: 0x1E7A

0x1EAE: 7F FB		mov	R7, #0xFB				; R7 = 0xFB
0x1EB0: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_095:

0x1EB1: 12 26 54	lcall	i2c_start				; Calls (forward) this: 0x2654 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2654)
0x1EB4: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x1EB6: 7F 20		mov	R7, #0x20				; R7 = 0x20 {' '}
0x1EB8: 12 19 23	lcall	i2c_sendbyte				; Calls (backward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x1EBB: BF FB 02	cjne	R7, #0xFB, Label_431			; If (R7 != 0xFB) then jumps (forward) hither: 0x1EC0

0x1EBE: 80 1A		sjmp	Label_432				; Jumps (forward) hither: 0x1EDA

Label_431:

0x1EC0: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x1EC2: 7F 1D		mov	R7, #0x1D				; R7 = 0x1D
0x1EC4: 12 19 23	lcall	i2c_sendbyte				; Calls (backward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x1EC7: 12 26 9F	lcall	i2c_stop				; Calls (forward) this: 0x269F (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x269F)
0x1ECA: 12 00 36	lcall	WAIT12					; Calls (backward) this: 0x0036 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x0036)
0x1ECD: 12 26 54	lcall	i2c_start				; Calls (forward) this: 0x2654 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2654)
0x1ED0: 7D 01		mov	R5, #0x01				; R5 = 0x01
0x1ED2: 7F 21		mov	R7, #0x21				; R7 = 0x21 {'!'}
0x1ED4: 12 19 23	lcall	i2c_sendbyte				; Calls (backward) this: 0x1923 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1923)
0x1ED7: BF FB 08	cjne	R7, #0xFB, Label_433			; If (R7 != 0xFB) then jumps (forward) hither: 0x1EE2

Label_432:

0x1EDA: 12 26 9F	lcall	i2c_stop				; Calls (forward) this: 0x269F (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x269F)
0x1EDD: E4		clr	A					; ACC = 0
0x1EDE: 78 6D		mov	R0, #0x6D				; R0 = 0x6D
0x1EE0: F6		mov	@R0, A					; [R0] = ACC
0x1EE1: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_433:

0x1EE2: 7F 01		mov	R7, #0x01				; R7 = 0x01
0x1EE4: 12 1B AA	lcall	Function_083				; Calls (backward) this: 0x1BAA (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1BAA)
0x1EE7: 78 6D		mov	R0, #0x6D				; R0 = 0x6D
0x1EE9: A6 07		mov	@R0, R7<#0>				; [R0] = R7<#0>
0x1EEB: 12 26 9F	lcall	i2c_stop				; Calls (forward) this: 0x269F (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x269F)
0x1EEE: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_434:

0x1EEF: ED		mov	A, R5					; ACC = R5
0x1EF0: 24 50		add	A, #0x50				; ACC += 0x50 {'P'}
0x1EF2: 13		rrc	A					; ACC[76543210] = ACC[C7654321], CY = ACC[0]
0x1EF3: 13		rrc	A					; ACC[76543210] = ACC[C7654321], CY = ACC[0]
0x1EF4: 13		rrc	A					; ACC[76543210] = ACC[C7654321], CY = ACC[0]
0x1EF5: 54 1F		anl	A, #0x1F				; ACC &= 0x1F
0x1EF7: FE		mov	R6, A					; R6 = ACC
0x1EF8: 53 06 1F	anl	R6<#0>, #0x1F				; R6<#0> &= 0x1F
0x1EFB: 0E		inc	R6					; ++R6
0x1EFC: ED		mov	A, R5					; ACC = R5
0x1EFD: 54 07		anl	A, #0x07				; ACC &= 0x07 {'\a'}
0x1EFF: 90 27 1D	mov	DPTR, #0x271D				; DPTR = 0x271D
0x1F02: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x1F03: FB		mov	R3, A					; R3 = ACC
0x1F04: FC		mov	R4, A					; R4 = ACC
0x1F05: EF		mov	A, R7					; ACC = R7
0x1F06: 60 10		jz	Label_435				; If (ACC == 0) then jumps (forward) hither: 0x1F18

0x1F08: 74 B3		mov	A, #0xB3				; ACC = 0xB3
0x1F0A: 2E		add	A, R6					; ACC += R6
0x1F0B: F8		mov	R0, A					; R0 = ACC
0x1F0C: E6		mov	A, @R0					; ACC = [R0]
0x1F0D: 5C		anl	A, R4					; ACC &= R4
0x1F0E: 70 1A		jnz	Label_437				; If (ACC != 0) then jumps (forward) hither: 0x1F2A

0x1F10: 74 B3		mov	A, #0xB3				; ACC = 0xB3
0x1F12: 2E		add	A, R6					; ACC += R6
0x1F13: F8		mov	R0, A					; R0 = ACC
0x1F14: E6		mov	A, @R0					; ACC = [R0]
0x1F15: 4C		orl	A, R4					; ACC |= R4
0x1F16: 80 0F		sjmp	Label_436				; Jumps (forward) hither: 0x1F27

Label_435:

0x1F18: 74 B3		mov	A, #0xB3				; ACC = 0xB3
0x1F1A: 2E		add	A, R6					; ACC += R6
0x1F1B: F8		mov	R0, A					; R0 = ACC
0x1F1C: E6		mov	A, @R0					; ACC = [R0]
0x1F1D: 5C		anl	A, R4					; ACC &= R4
0x1F1E: 60 0A		jz	Label_437				; If (ACC == 0) then jumps (forward) hither: 0x1F2A

0x1F20: 74 B3		mov	A, #0xB3				; ACC = 0xB3
0x1F22: 2E		add	A, R6					; ACC += R6
0x1F23: F8		mov	R0, A					; R0 = ACC
0x1F24: EB		mov	A, R3					; ACC = R3
0x1F25: F4		cpl	A					; ACC = ~ACC
0x1F26: 56		anl	A, @R0					; ACC &= [R0]

Label_436:

0x1F27: F6		mov	@R0, A					; [R0] = ACC
0x1F28: D2 21		setb	0x21					; [0x21] = H

Label_437:

0x1F2A: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_096:

0x1F2B: E4		clr	A					; ACC = 0
0x1F2C: F5 64		mov	0x64, A					; [0x64] = ACC
0x1F2E: F5 64		mov	0x64, A					; [0x64] = ACC

Label_438:

0x1F30: 74 99		mov	A, #0x99				; ACC = 0x99
0x1F32: 25 64		add	A, 0x64					; ACC += [0x64]
0x1F34: F8		mov	R0, A					; R0 = ACC
0x1F35: E6		mov	A, @R0					; ACC = [R0]
0x1F36: FF		mov	R7, A					; R7 = ACC
0x1F37: 74 6E		mov	A, #0x6E				; ACC = 0x6E {'n'}
0x1F39: 25 64		add	A, 0x64					; ACC += [0x64]
0x1F3B: F8		mov	R0, A					; R0 = ACC
0x1F3C: E6		mov	A, @R0					; ACC = [R0]
0x1F3D: FE		mov	R6, A					; R6 = ACC
0x1F3E: B5 07 02	cjne	A, R7<#0>, Label_439			; If (ACC != R7<#0>) then jumps (forward) hither: 0x1F43

0x1F41: 80 19		sjmp	Label_441				; Jumps (forward) hither: 0x1F5C

Label_439:

0x1F43: EE		mov	A, R6					; ACC = R6
0x1F44: 6F		xrl	A, R7					; ACC ^= R7
0x1F45: FF		mov	R7, A					; R7 = ACC
0x1F46: AD 64		mov	R5, 0x64				; R5 = [0x64]
0x1F48: 12 0D A0	lcall	Function_024				; Calls (backward) this: 0x0DA0 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x0DA0)
0x1F4B: 50 01		jnc	Label_440				; If (CY == L) then jumps (forward) hither: 0x1F4E

0x1F4D: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_440:

0x1F4E: 74 6E		mov	A, #0x6E				; ACC = 0x6E {'n'}
0x1F50: 25 64		add	A, 0x64					; ACC += [0x64]
0x1F52: F8		mov	R0, A					; R0 = ACC
0x1F53: E6		mov	A, @R0					; ACC = [R0]
0x1F54: FF		mov	R7, A					; R7 = ACC
0x1F55: 74 99		mov	A, #0x99				; ACC = 0x99
0x1F57: 25 64		add	A, 0x64					; ACC += [0x64]
0x1F59: F8		mov	R0, A					; R0 = ACC
0x1F5A: A6 07		mov	@R0, R7<#0>				; [R0] = R7<#0>

Label_441:

0x1F5C: 05 64		inc	0x64					; ++[0x64]
0x1F5E: E5 64		mov	A, 0x64					; ACC = [0x64]
0x1F60: C3		clr	C					; CY = L
0x1F61: 94 12		subb	A, #0x12				; ACC -= 0x12 + CY
0x1F63: 40 CB		jc	Label_438				; If (CY == H) then jumps (backward) hither: 0x1F30

0x1F65: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_097:

0x1F66: E4		clr	A					; ACC = 0
0x1F67: FF		mov	R7, A					; R7 = ACC
0x1F68: FE		mov	R6, A					; R6 = ACC

Label_442:

0x1F69: 74 6E		mov	A, #0x6E				; ACC = 0x6E {'n'}
0x1F6B: 2E		add	A, R6					; ACC += R6
0x1F6C: F8		mov	R0, A					; R0 = ACC
0x1F6D: E6		mov	A, @R0					; ACC = [R0]
0x1F6E: FD		mov	R5, A					; R5 = ACC
0x1F6F: 5F		anl	A, R7					; ACC &= R7
0x1F70: FC		mov	R4, A					; R4 = ACC
0x1F71: ED		mov	A, R5					; ACC = R5
0x1F72: 42 07		orl	R7<#0>, A				; R7<#0> |= ACC
0x1F74: EC		mov	A, R4					; ACC = R4
0x1F75: 60 23		jz	Label_443				; If (ACC == 0) then jumps (forward) hither: 0x1F9A

0x1F77: C3		clr	C					; CY = L
0x1F78: 13		rrc	A					; ACC[76543210] = ACC[C7654321], CY = ACC[0]
0x1F79: 54 55		anl	A, #0x55				; ACC &= 0x55 {'U'}
0x1F7B: FD		mov	R5, A					; R5 = ACC
0x1F7C: EC		mov	A, R4					; ACC = R4
0x1F7D: 54 55		anl	A, #0x55				; ACC &= 0x55 {'U'}
0x1F7F: 2D		add	A, R5					; ACC += R5
0x1F80: FC		mov	R4, A					; R4 = ACC
0x1F81: 13		rrc	A					; ACC[76543210] = ACC[C7654321], CY = ACC[0]
0x1F82: 13		rrc	A					; ACC[76543210] = ACC[C7654321], CY = ACC[0]
0x1F83: 54 33		anl	A, #0x33				; ACC &= 0x33 {'3'}
0x1F85: FD		mov	R5, A					; R5 = ACC
0x1F86: EC		mov	A, R4					; ACC = R4
0x1F87: 54 33		anl	A, #0x33				; ACC &= 0x33 {'3'}
0x1F89: 2D		add	A, R5					; ACC += R5
0x1F8A: FC		mov	R4, A					; R4 = ACC
0x1F8B: C4		swap	A					; ACC[76543210] = ACC[32107654]
0x1F8C: 54 0F		anl	A, #0x0F				; ACC &= 0x0F
0x1F8E: FD		mov	R5, A					; R5 = ACC
0x1F8F: EC		mov	A, R4					; ACC = R4
0x1F90: 54 0F		anl	A, #0x0F				; ACC &= 0x0F
0x1F92: 2D		add	A, R5					; ACC += R5
0x1F93: D3		setb	C					; CY = H
0x1F94: 94 01		subb	A, #0x01				; ACC -= 0x01 + CY
0x1F96: 40 02		jc	Label_443				; If (CY == H) then jumps (forward) hither: 0x1F9A

0x1F98: D3		setb	C					; CY = H
0x1F99: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_443:

0x1F9A: 0E		inc	R6					; ++R6
0x1F9B: BE 12 CB	cjne	R6, #0x12, Label_442			; If (R6 != 0x12) then jumps (backward) hither: 0x1F69

0x1F9E: C3		clr	C					; CY = L
0x1F9F: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_098:

0x1FA0: E4		clr	A					; ACC = 0
0x1FA1: F5 27		mov	0x27, A					; [0x27] = ACC
0x1FA3: F5 26		mov	0x26, A					; [0x26] = ACC
0x1FA5: 78 81		mov	R0, #0x81				; R0 = 0x81
0x1FA7: F6		mov	@R0, A					; [R0] = ACC
0x1FA8: 18		dec	R0					; --R0 (0x80)
0x1FA9: F6		mov	@R0, A					; [R0] = ACC
0x1FAA: F5 39		mov	0x39, A					; [0x39] = ACC
0x1FAC: F5 38		mov	0x38, A					; [0x38] = ACC
0x1FAE: F5 51		mov	0x51, A					; [0x51] = ACC
0x1FB0: F5 37		mov	0x37, A					; [0x37] = ACC
0x1FB2: F5 3B		mov	0x3B, A					; [0x3B] = ACC
0x1FB4: F5 3F		mov	0x3F, A					; [0x3F] = ACC
0x1FB6: F5 40		mov	0x40, A					; [0x40] = ACC
0x1FB8: F5 41		mov	0x41, A					; [0x41] = ACC
0x1FBA: F5 42		mov	0x42, A					; [0x42] = ACC
0x1FBC: F5 43		mov	0x43, A					; [0x43] = ACC
0x1FBE: F5 44		mov	0x44, A					; [0x44] = ACC
0x1FC0: F5 45		mov	0x45, A					; [0x45] = ACC
0x1FC2: 78 6D		mov	R0, #0x6D				; R0 = 0x6D
0x1FC4: F6		mov	@R0, A					; [R0] = ACC
0x1FC5: 78 93		mov	R0, #0x93				; R0 = 0x93
0x1FC7: 76 FC		mov	@R0, #0xFC				; [R0] = 0xFC
0x1FC9: 78 92		mov	R0, #0x92				; R0 = 0x92
0x1FCB: F6		mov	@R0, A					; [R0] = ACC
0x1FCC: 78 D4		mov	R0, #0xD4				; R0 = 0xD4
0x1FCE: F6		mov	@R0, A					; [R0] = ACC
0x1FCF: 78 D5		mov	R0, #0xD5				; R0 = 0xD5
0x1FD1: 76 03		mov	@R0, #0x03				; [R0] = 0x03
0x1FD3: 78 BA		mov	R0, #0xBA				; R0 = 0xBA
0x1FD5: F6		mov	@R0, A					; [R0] = ACC
0x1FD6: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_099:

0x1FD7: 30 03 2F	jnb	0x03, Label_447				; If ([0x03] == L) then jumps (forward) hither: 0x2009

0x1FDA: 12 11 95	lcall	Function_045				; Calls (backward) this: 0x1195 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1195)
0x1FDD: 45 32		orl	A, 0x32					; ACC |= [0x32]
0x1FDF: 45 31		orl	A, 0x31					; ACC |= [0x31]
0x1FE1: 70 26		jnz	Label_447				; If (ACC != 0) then jumps (forward) hither: 0x2009

0x1FE3: E5 2F		mov	A, 0x2F					; ACC = [0x2F]
0x1FE5: 64 01		xrl	A, #0x01				; ACC ^= 0x01
0x1FE7: 70 20		jnz	Label_447				; If (ACC != 0) then jumps (forward) hither: 0x2009

0x1FE9: E5 33		mov	A, 0x33					; ACC = [0x33]
0x1FEB: 70 08		jnz	Label_444				; If (ACC != 0) then jumps (forward) hither: 0x1FF5

0x1FED: 75 48 09	mov	0x48, #0x09				; [0x48] = 0x09 {'\t'}
0x1FF0: 75 49 01	mov	0x49, #0x01				; [0x49] = 0x01
0x1FF3: 80 0C		sjmp	Label_445				; Jumps (forward) hither: 0x2001

Label_444:

0x1FF5: E5 33		mov	A, 0x33					; ACC = [0x33]
0x1FF7: B4 01 0D	cjne	A, #0x01, Label_446			; If (ACC != 0x01) then jumps (forward) hither: 0x2007

0x1FFA: 75 48 0C	mov	0x48, #0x0C				; [0x48] = 0x0C {'\f'}
0x1FFD: 75 49 01	mov	0x49, #0x01				; [0x49] = 0x01
0x2000: E4		clr	A					; ACC = 0

Label_445:

0x2001: F5 EB		mov	TXCNT0, A				; TXCNT0 = ACC
0x2003: 12 11 1B	lcall	Function_032				; Calls (backward) this: 0x111B (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x111B)
0x2006: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_446:

0x2007: 80 00		sjmp	Label_447				; Jumps (forward) hither: 0x2009

Label_447:

0x2009: 12 27 29	lcall	Label_589				; Calls (forward) this: 0x2729 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2729)
0x200C: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_100:

0x200D: 85 31 3B	mov	0x3B, 0x31				; [0x3B] = [0x31]
0x2010: E5 3B		mov	A, 0x3B					; ACC = [0x3B]

Label_448:

0x2012: 60 14		jz	Label_450				; If (ACC == 0) then jumps (forward) hither: 0x2028

Label_449:

0x2014: 53 E4 FD	anl	TXFLG1, #0xFD				; TXFLG1 &= 0xFD
0x2017: 43 E4 0C	orl	TXFLG1, #0x0C				; TXFLG1 |= 0x0C {'\f'}
0x201A: 53 E7 FD	anl	TXFLG2, #0xFD				; TXFLG2 &= 0xFD
0x201D: 43 E7 0C	orl	TXFLG2, #0x0C				; TXFLG2 |= 0x0C {'\f'}
0x2020: 53 20 F0	anl	0x20, #0xF0				; [0x20] &= 0xF0
0x2023: 43 20 88	orl	0x20, #0x88				; [0x20] |= 0x88
0x2026: 80 18		sjmp	Label_452				; Jumps (forward) hither: 0x2040

Label_450:

0x2028: 53 E4 F7	anl	TXFLG1, #0xF7				; TXFLG1 &= 0xF7
0x202B: 53 E7 F7	anl	TXFLG2, #0xF7				; TXFLG2 &= 0xF7
0x202E: E5 F2		mov	A, DADDR				; ACC = DADDR
0x2030: 60 08		jz	Label_451				; If (ACC == 0) then jumps (forward) hither: 0x203A

0x2032: 53 20 F0	anl	0x20, #0xF0				; [0x20] &= 0xF0
0x2035: 43 20 84	orl	0x20, #0x84				; [0x20] |= 0x84
0x2038: 80 06		sjmp	Label_452				; Jumps (forward) hither: 0x2040

Label_451:

0x203A: 53 20 F0	anl	0x20, #0xF0				; [0x20] &= 0xF0
0x203D: 43 20 82	orl	0x20, #0x82				; [0x20] |= 0x82

Label_452:

0x2040: 02 27 B6	ljmp	Label_597				; Jumps (forward) hither: 0x27B6

Label_453:

0x2043: E5 4F		mov	A, 0x4F					; ACC = [0x4F]
0x2045: 54 03		anl	A, #0x03				; ACC &= 0x03
0x2047: FF		mov	R7, A					; R7 = ACC
0x2048: BF 03 14	cjne	R7, #0x03, Label_455			; If (R7 != 0x03) then jumps (forward) hither: 0x205F

0x204B: E4		clr	A					; ACC = 0
0x204C: FF		mov	R7, A					; R7 = ACC

Label_454:

0x204D: 74 95		mov	A, #0x95				; ACC = 0x95
0x204F: 2F		add	A, R7					; ACC += R7
0x2050: F8		mov	R0, A					; R0 = ACC
0x2051: A6 32		mov	@R0, 0x32				; [R0] = [0x32]
0x2053: 74 97		mov	A, #0x97				; ACC = 0x97
0x2055: 2F		add	A, R7					; ACC += R7
0x2056: F8		mov	R0, A					; R0 = ACC
0x2057: A6 32		mov	@R0, 0x32				; [R0] = [0x32]
0x2059: 0F		inc	R7					; ++R7
0x205A: BF 02 F0	cjne	R7, #0x02, Label_454			; If (R7 != 0x02) then jumps (backward) hither: 0x204D

0x205D: 80 17		sjmp	Label_457				; Jumps (forward) hither: 0x2076

Label_455:

0x205F: E5 4F		mov	A, 0x4F					; ACC = [0x4F]
0x2061: 30 E0 0A	jnb	ACC_0, Label_456			; If (ACC_0 == L) then jumps (forward) hither: 0x206E

0x2064: 78 95		mov	R0, #0x95				; R0 = 0x95
0x2066: A6 32		mov	@R0, 0x32				; [R0] = [0x32]
0x2068: 78 97		mov	R0, #0x97				; R0 = 0x97
0x206A: A6 32		mov	@R0, 0x32				; [R0] = [0x32]
0x206C: 80 08		sjmp	Label_457				; Jumps (forward) hither: 0x2076

Label_456:

0x206E: 78 96		mov	R0, #0x96				; R0 = 0x96
0x2070: A6 32		mov	@R0, 0x32				; [R0] = [0x32]
0x2072: 78 98		mov	R0, #0x98				; R0 = 0x98
0x2074: A6 32		mov	@R0, 0x32				; [R0] = [0x32]

Label_457:

0x2076: 02 27 B6	ljmp	Label_597				; Jumps (forward) hither: 0x27B6

;-------------------------------------------------------------------------------

Function_101:

0x2079: E4		clr	A					; ACC = 0
0x207A: FF		mov	R7, A					; R7 = ACC

Label_458:

0x207B: 74 2F		mov	A, #0x2F				; ACC = 0x2F {'/'}
0x207D: 2F		add	A, R7					; ACC += R7
0x207E: F8		mov	R0, A					; R0 = ACC
0x207F: E4		clr	A					; ACC = 0
0x2080: F6		mov	@R0, A					; [R0] = ACC
0x2081: 0F		inc	R7					; ++R7
0x2082: BF 08 F6	cjne	R7, #0x08, Label_458			; If (R7 != 0x08 {'\b'}) then jumps (backward) hither: 0x207B

0x2085: E4		clr	A					; ACC = 0
0x2086: 78 AC		mov	R0, #0xAC				; R0 = 0xAC
0x2088: F6		mov	@R0, A					; [R0] = ACC
0x2089: FF		mov	R7, A					; R7 = ACC

Label_459:

0x208A: 74 AD		mov	A, #0xAD				; ACC = 0xAD
0x208C: 2F		add	A, R7					; ACC += R7
0x208D: F8		mov	R0, A					; R0 = ACC
0x208E: E4		clr	A					; ACC = 0
0x208F: F6		mov	@R0, A					; [R0] = ACC
0x2090: 0F		inc	R7					; ++R7
0x2091: BF 06 F6	cjne	R7, #0x06, Label_459			; If (R7 != 0x06) then jumps (backward) hither: 0x208A

0x2094: E4		clr	A					; ACC = 0
0x2095: FF		mov	R7, A					; R7 = ACC

Label_460:

0x2096: 74 B3		mov	A, #0xB3				; ACC = 0xB3
0x2098: 2F		add	A, R7					; ACC += R7
0x2099: F8		mov	R0, A					; R0 = ACC
0x209A: E4		clr	A					; ACC = 0
0x209B: F6		mov	@R0, A					; [R0] = ACC
0x209C: 0F		inc	R7					; ++R7
0x209D: BF 04 F6	cjne	R7, #0x04, Label_460			; If (R7 != 0x04) then jumps (backward) hither: 0x2096

0x20A0: E4		clr	A					; ACC = 0
0x20A1: F5 22		mov	0x22, A					; [0x22] = ACC
0x20A3: 75 21 20	mov	0x21, #0x20				; [0x21] = 0x20 {' '}
0x20A6: F5 24		mov	0x24, A					; [0x24] = ACC
0x20A8: 78 17		mov	R0, #0x17				; R0 = 0x17
0x20AA: F6		mov	@R0, A					; [R0] = ACC
0x20AB: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_102:

0x20AC: 30 03 2E	jnb	0x03, Label_467				; If ([0x03] == L) then jumps (forward) hither: 0x20DD

0x20AF: E4		clr	A					; ACC = 0
0x20B0: F5 3F		mov	0x3F, A					; [0x3F] = ACC
0x20B2: E5 E4		mov	A, TXFLG1				; ACC = TXFLG1
0x20B4: 30 E0 03	jnb	ACC_0, Label_462			; If (ACC_0 == L) then jumps (forward) hither: 0x20BA

Label_461:

0x20B7: 53 E4 FE	anl	TXFLG1, #0xFE				; TXFLG1 &= 0xFE

Label_462:

0x20BA: E5 E7		mov	A, TXFLG2				; ACC = TXFLG2
0x20BC: 30 E0 1E	jnb	ACC_0, Label_467			; If (ACC_0 == L) then jumps (forward) hither: 0x20DD

0x20BF: 53 E7 FE	anl	TXFLG2, #0xFE				; TXFLG2 &= 0xFE
0x20C2: E5 38		mov	A, 0x38					; ACC = [0x38]
0x20C4: 90 27 25	mov	DPTR, #0x2725				; DPTR = 0x2725
0x20C7: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x20C8: F5 E5		mov	TXDAT2, A				; TXDAT2 = ACC
0x20CA: E5 38		mov	A, 0x38					; ACC = [0x38]
0x20CC: 90 27 27	mov	DPTR, #0x2727				; DPTR = 0x2727
0x20CF: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x20D0: FF		mov	R7, A					; R7 = ACC

Label_463:

0x20D1: EF		mov	A, R7					; ACC = R7
0x20D2: 60 06		jz	Label_466				; If (ACC == 0) then jumps (forward) hither: 0x20DA

Label_464:

0x20D4: E4		clr	A					; ACC = 0

Label_465:

0x20D5: F5 E5		mov	TXDAT2, A				; TXDAT2 = ACC
0x20D7: 1F		dec	R7					; --R7
0x20D8: 80 F7		sjmp	Label_463				; Jumps (backward) hither: 0x20D1

Label_466:

0x20DA: 43 E7 01	orl	TXFLG2, #0x01				; TXFLG2 |= 0x01

Label_467:

0x20DD: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_103:

0x20DE: E5 96		mov	A, MODE_FG				; ACC = MODE_FG
0x20E0: 30 E1 04	jnb	ACC_1, Label_468			; If (ACC_1 == L) then jumps (forward) hither: 0x20E7

0x20E3: D2 1B		setb	0x1B					; [0x1B] = H
0x20E5: 80 1E		sjmp	Label_471				; Jumps (forward) hither: 0x2105

Label_468:

0x20E7: E5 96		mov	A, MODE_FG				; ACC = MODE_FG
0x20E9: 30 E2 05	jnb	ACC_2, Label_469			; If (ACC_2 == L) then jumps (forward) hither: 0x20F1

0x20EC: 12 26 D5	lcall	Function_129				; Calls (forward) this: 0x26D5 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x26D5)
0x20EF: 80 17		sjmp	Label_472				; Jumps (forward) hither: 0x2108

Label_469:

0x20F1: E5 96		mov	A, MODE_FG				; ACC = MODE_FG
0x20F3: 30 E3 05	jnb	ACC_3, Label_470			; If (ACC_3 == L) then jumps (forward) hither: 0x20FB

0x20F6: 12 22 50	lcall	Label_513				; Calls (forward) this: 0x2250 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2250)
0x20F9: 80 0D		sjmp	Label_472				; Jumps (forward) hither: 0x2108

Label_470:

0x20FB: E5 96		mov	A, MODE_FG				; ACC = MODE_FG
0x20FD: 30 E0 05	jnb	ACC_0, Label_471			; If (ACC_0 == L) then jumps (forward) hither: 0x2105

0x2100: 12 24 40	lcall	Function_116				; Calls (forward) this: 0x2440 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2440)
0x2103: 80 06		sjmp	Label_473				; Jumps (forward) hither: 0x210B

Label_471:

0x2105: 12 25 56	lcall	Label_563				; Calls (forward) this: 0x2556 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2556)

Label_472:

0x2108: E4		clr	A					; ACC = 0
0x2109: F5 96		mov	MODE_FG, A				; MODE_FG = ACC

Label_473:

0x210B: 02 27 A8	ljmp	set_wdt_scalar00			; Jumps (forward) hither: 0x27A8

;-------------------------------------------------------------------------------

Function_104:

0x210E: 43 C0 67	orl	P4, #0x67				; P4 |= 0x67 {'g'}
0x2111: E4		clr	A					; ACC = 0
0x2112: F5 A6		mov	P4WK, A					; P4WK = ACC
0x2114: F5 A3		mov	P1WK, A					; P1WK = ACC
0x2116: F5 A2		mov	P0WK, A					; P0WK = ACC
0x2118: F5 A5		mov	P3WK, A					; P3WK = ACC
0x211A: F5 3A		mov	0x3A, A					; [0x3A] = ACC
0x211C: F5 45		mov	0x45, A					; [0x45] = ACC
0x211E: 85 F3 28	mov	0x28, DFC				; [0x28] = DFC
0x2121: C2 AF		clr	EA					; EA = L
0x2123: 53 96 8E	anl	MODE_FG, #0x8E				; MODE_FG &= 0x8E
0x2126: 12 27 A8	lcall	set_wdt_scalar00			; Calls (forward) this: 0x27A8 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27A8)
0x2129: 43 87 02	orl	PCON, #0x02				; PCON |= 0x02
0x212C: 75 8E 55	mov	SUSLO, #0x55				; SUSLO = 0x55 {'U'}
0x212F: 00		nop
0x2130: 00		nop
0x2131: 00		nop
0x2132: 43 F3 20	orl	DFC, #0x20				; DFC |= 0x20 {' '}
0x2135: 7F 1A		mov	R7, #0x1A				; R7 = 0x1A
0x2137: 12 24 5E	lcall	Function_117				; Calls (forward) this: 0x245E (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x245E)
0x213A: 53 F3 CF	anl	DFC, #0xCF				; DFC &= 0xCF
0x213D: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_105:

0x213E: 12 26 2B	lcall	Function_124				; Calls (forward) this: 0x262B (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x262B)
0x2141: 40 27		jc	Label_478				; If (CY == H) then jumps (forward) hither: 0x216A

0x2143: 12 11 95	lcall	Function_045				; Calls (backward) this: 0x1195 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1195)
0x2146: 45 32		orl	A, 0x32					; ACC |= [0x32]
0x2148: 70 1E		jnz	Label_477				; If (ACC != 0) then jumps (forward) hither: 0x2168

0x214A: E5 33		mov	A, 0x33					; ACC = [0x33]
0x214C: 70 08		jnz	Label_474				; If (ACC != 0) then jumps (forward) hither: 0x2156

0x214E: 75 48 0E	mov	0x48, #0x0E				; [0x48] = 0x0E
0x2151: 75 49 01	mov	0x49, #0x01				; [0x49] = 0x01
0x2154: 80 0C		sjmp	Label_475				; Jumps (forward) hither: 0x2162

Label_474:

0x2156: E5 33		mov	A, 0x33					; ACC = [0x33]
0x2158: B4 01 0B	cjne	A, #0x01, Label_476			; If (ACC != 0x01) then jumps (forward) hither: 0x2166

0x215B: 75 48 10	mov	0x48, #0x10				; [0x48] = 0x10
0x215E: 75 49 01	mov	0x49, #0x01				; [0x49] = 0x01
0x2161: E4		clr	A					; ACC = 0

Label_475:

0x2162: 12 11 29	lcall	Function_034				; Calls (backward) this: 0x1129 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1129)
0x2165: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_476:

0x2166: 80 02		sjmp	Label_478				; Jumps (forward) hither: 0x216A

Label_477:

0x2168: 80 00		sjmp	Label_478				; Jumps (forward) hither: 0x216A

Label_478:

0x216A: 12 27 29	lcall	Label_589				; Calls (forward) this: 0x2729 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2729)
0x216D: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_106:

0x216E: 12 16 D0	lcall	Function_058				; Calls (backward) this: 0x16D0 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x16D0)
0x2171: 7A 23		mov	R2, #0x23				; R2 = 0x23 {'#'}
0x2173: 79 F5		mov	R1, #0xF5				; R1 = 0xF5
0x2175: 90 23 F4	mov	DPTR, #0x23F4				; DPTR = 0x23F4
0x2178: E4		clr	A					; ACC = 0
0x2179: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x217A: F5 69		mov	0x69, A					; [0x69] = ACC
0x217C: 12 1E 2C	lcall	Function_093				; Calls (backward) this: 0x1E2C (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1E2C)
0x217F: 78 D7		mov	R0, #0xD7				; R0 = 0xD7
0x2181: EF		mov	A, R7					; ACC = R7
0x2182: F6		mov	@R0, A					; [R0] = ACC
0x2183: BF FA 13	cjne	R7, #0xFA, Label_479			; If (R7 != 0xFA) then jumps (forward) hither: 0x2199

0x2186: 12 16 9B	lcall	Function_053				; Calls (backward) this: 0x169B (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x169B)
0x2189: 12 1A FA	lcall	Function_080				; Calls (backward) this: 0x1AFA (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1AFA)
0x218C: 78 D7		mov	R0, #0xD7				; R0 = 0xD7
0x218E: A6 07		mov	@R0, R7<#0>				; [R0] = R7<#0>
0x2190: 78 AB		mov	R0, #0xAB				; R0 = 0xAB
0x2192: E6		mov	A, @R0					; ACC = [R0]
0x2193: B4 55 03	cjne	A, #0x55, Label_479			; If (ACC != 0x55 {'U'}) then jumps (forward) hither: 0x2199

0x2196: 7F FA		mov	R7, #0xFA				; R7 = 0xFA
0x2198: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_479:

0x2199: 7F FB		mov	R7, #0xFB				; R7 = 0xFB
0x219B: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_107:

0x219C: 12 26 16	lcall	Function_123				; Calls (forward) this: 0x2616 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2616)
0x219F: 40 25		jc	Label_484				; If (CY == H) then jumps (forward) hither: 0x21C6

0x21A1: E5 36		mov	A, 0x36					; ACC = [0x36]
0x21A3: 45 34		orl	A, 0x34					; ACC |= [0x34]
0x21A5: 70 1D		jnz	Label_483				; If (ACC != 0) then jumps (forward) hither: 0x21C4

0x21A7: E5 35		mov	A, 0x35					; ACC = [0x35]
0x21A9: 64 01		xrl	A, #0x01				; ACC ^= 0x01
0x21AB: 70 17		jnz	Label_483				; If (ACC != 0) then jumps (forward) hither: 0x21C4

0x21AD: E5 33		mov	A, 0x33					; ACC = [0x33]
0x21AF: 70 05		jnz	Label_480				; If (ACC != 0) then jumps (forward) hither: 0x21B6

0x21B1: 85 3E EA	mov	TXDAT0, 0x3E				; TXDAT0 = [0x3E]
0x21B4: 80 08		sjmp	Label_481				; Jumps (forward) hither: 0x21BE

Label_480:

0x21B6: E5 33		mov	A, 0x33					; ACC = [0x33]
0x21B8: B4 01 07	cjne	A, #0x01, Label_482			; If (ACC != 0x01) then jumps (forward) hither: 0x21C2

0x21BB: 85 44 EA	mov	TXDAT0, 0x44				; TXDAT0 = [0x44]

Label_481:

0x21BE: 12 11 15	lcall	Function_031				; Calls (backward) this: 0x1115 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1115)
0x21C1: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_482:

0x21C2: 80 02		sjmp	Label_484				; Jumps (forward) hither: 0x21C6

Label_483:

0x21C4: 80 00		sjmp	Label_484				; Jumps (forward) hither: 0x21C6

Label_484:

0x21C6: 12 27 29	lcall	Label_589				; Calls (forward) this: 0x2729 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2729)
0x21C9: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_108:

0x21CA: 02 10 00	ljmp	Label_187				; Jumps (backward) hither: 0x1000

Label_485:

0x21CD: 00		nop
0x21CE: 01 12		ajmp	Label_448				; Jumps (backward) hither: 0x2012 (PC += 2, PC(10-0) = 0x0012)

Label_486:

0x21D0: 00		nop
0x21D1: 01 B8		ajmp	0x20B8					; Jumps (backward) hither: 0x20B8 (PC += 2, PC(10-0) = 0x00B8)

Label_487:

0x21D3: 00		nop
0x21D4: 01 B9		ajmp	0x20B9					; Jumps (backward) hither: 0x20B9 (PC += 2, PC(10-0) = 0x00B9)

Label_488:

0x21D6: 00		nop
0x21D7: 02 BB 00	ljmp	0xBB00					; Jumps (forward) hither: 0xBB00

Label_489:

0x21DA: 00		nop
0x21DB: 02 BD 00	ljmp	0xBD00					; Jumps (forward) hither: 0xBD00

Label_490:

0x21DE: 00		nop
0x21DF: 01 B7		ajmp	Label_461				; Jumps (backward) hither: 0x20B7 (PC += 2, PC(10-0) = 0x00B7)

Label_491:

0x21E1: 00		nop
0x21E2: 01 D5		ajmp	Label_465				; Jumps (backward) hither: 0x20D5 (PC += 2, PC(10-0) = 0x00D5)

Label_492:

0x21E4: 03		rr	A					; ACC[76543210] = ACC[07654321]
0x21E5: 01 D4		ajmp	Label_464				; Jumps (backward) hither: 0x20D4 (PC += 2, PC(10-0) = 0x00D4)

Label_493:

0x21E7: 00		nop
0x21E8: C1 28		ajmp	Label_576				; Jumps (forward) hither: 0x2628 (PC += 2, PC(10-0) = 0x0628)

Label_494:

0x21EA: 01 16		ajmp	0x2016					; Jumps (backward) hither: 0x2016 (PC += 2, PC(10-0) = 0x0016)

Label_495:

0x21EC: 00		nop
0x21ED: 01 13		ajmp	0x2013					; Jumps (backward) hither: 0x2013 (PC += 2, PC(10-0) = 0x0013)

Label_496:

0x21EF: 00		nop
0x21F0: 01 15		ajmp	0x2015					; Jumps (backward) hither: 0x2015 (PC += 2, PC(10-0) = 0x0015)

Label_497:

0x21F2: 00		nop
0x21F3: 01 14		ajmp	Label_449				; Jumps (backward) hither: 0x2014 (PC += 2, PC(10-0) = 0x0014)

Label_498:

0x21F5: 00		nop
0x21F6: 00		nop
0x21F7: 30 03 26	jnb	0x03, Label_503				; If ([0x03] == L) then jumps (forward) hither: 0x2220

Label_499:

0x21FA: E5 36		mov	A, 0x36					; ACC = [0x36]
0x21FC: 45 34		orl	A, 0x34					; ACC |= [0x34]
0x21FE: 70 20		jnz	Label_503				; If (ACC != 0) then jumps (forward) hither: 0x2220

0x2200: E5 35		mov	A, 0x35					; ACC = [0x35]
0x2202: 64 01		xrl	A, #0x01				; ACC ^= 0x01
0x2204: 70 1A		jnz	Label_503				; If (ACC != 0) then jumps (forward) hither: 0x2220

0x2206: E5 2F		mov	A, 0x2F					; ACC = [0x2F]
0x2208: 64 81		xrl	A, #0x81				; ACC ^= 0x81
0x220A: 70 14		jnz	Label_503				; If (ACC != 0) then jumps (forward) hither: 0x2220

0x220C: E5 33		mov	A, 0x33					; ACC = [0x33]
0x220E: 70 02		jnz	Label_500				; If (ACC != 0) then jumps (forward) hither: 0x2212

0x2210: 80 06		sjmp	Label_501				; Jumps (forward) hither: 0x2218

Label_500:

0x2212: E5 33		mov	A, 0x33					; ACC = [0x33]
0x2214: B4 01 07	cjne	A, #0x01, Label_502			; If (ACC != 0x01) then jumps (forward) hither: 0x221E

0x2217: E4		clr	A					; ACC = 0

Label_501:

0x2218: F5 EA		mov	TXDAT0, A				; TXDAT0 = ACC
0x221A: 12 11 15	lcall	Function_031				; Calls (backward) this: 0x1115 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1115)
0x221D: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_502:

0x221E: 80 00		sjmp	Label_503				; Jumps (forward) hither: 0x2220

Label_503:

0x2220: 12 27 29	lcall	Label_589				; Calls (forward) this: 0x2729 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2729)
0x2223: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_504:

0x2224: 01 02		ajmp	0x2002					; Jumps (backward) hither: 0x2002 (PC += 2, PC(10-0) = 0x0002)

Label_505:

0x2226: 04		inc	A					; ++ACC
0x2227: 08		inc	R0					; ++R0
0x2228: 10 20 40	jbc	0x20, 0x226B				; If ([0x20] == H) then [0x20] = L and jumps (forward) hither: 0x226B

Label_506:

0x222B: 80 FE		sjmp	Label_506				; Jumps hither: 0x222B (endless loop)

Label_507:

0x222D: FD		mov	R5, A					; R5 = ACC
0x222E: FB		mov	R3, A					; R3 = ACC
0x222F: F7		mov	@R1, A					; [R1] = ACC
0x2230: EF		mov	A, R7					; ACC = R7
0x2231: DF BF		djnz	R7, Label_497				; If (--R7 != 0) then jumps (backward) hither: 0x21F2

0x2233: 7F FE		mov	R7, #0xFE				; R7 = 0xFE
0x2235: FD		mov	R5, A					; R5 = ACC
0x2236: FB		mov	R3, A					; R3 = ACC
0x2237: F7		mov	@R1, A					; [R1] = ACC
0x2238: EF		mov	A, R7					; ACC = R7
0x2239: DF BF		djnz	R7, Label_499				; If (--R7 != 0) then jumps (backward) hither: 0x21FA

0x223B: 7F EF		mov	R7, #0xEF				; R7 = 0xEF
0x223D: DF 00		djnz	R7, Label_508				; If (--R7 != 0) then jumps (forward) hither: 0x223F

Label_508:

0x223F: 00		nop
0x2240: 00		nop
0x2241: 00		nop
0x2242: 00		nop
0x2243: 00		nop
0x2244: 00		nop
0x2245: 00		nop
0x2246: 01 01		ajmp	Label_445				; Jumps (backward) hither: 0x2001 (PC += 2, PC(10-0) = 0x0001)

Label_509:

0x2248: 01 01		ajmp	Label_445				; Jumps (backward) hither: 0x2001 (PC += 2, PC(10-0) = 0x0001)

Label_510:

0x224A: 01 01		ajmp	Label_445				; Jumps (backward) hither: 0x2001 (PC += 2, PC(10-0) = 0x0001)

Label_511:

0x224C: 01 01		ajmp	Label_445				; Jumps (backward) hither: 0x2001 (PC += 2, PC(10-0) = 0x0001)

Label_512:

0x224E: 03		rr	A					; ACC[76543210] = ACC[07654321]
0x224F: 03		rr	A					; ACC[76543210] = ACC[07654321]

Label_513:

0x2250: 12 27 A8	lcall	set_wdt_scalar00			; Calls (forward) this: 0x27A8 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27A8)
0x2253: 43 C0 67	orl	P4, #0x67				; P4 |= 0x67 {'g'}
0x2256: 75 9E 60	mov	P4CON, #0x60				; P4CON = 0x60 {'`'}
0x2259: 75 F3 81	mov	DFC, #0x81				; DFC = 0x81
0x225C: 12 00 36	lcall	WAIT12					; Calls (backward) this: 0x0036 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x0036)
0x225F: 12 26 8D	lcall	Label_582				; Calls (forward) this: 0x268D (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x268D)
0x2262: EF		mov	A, R7					; ACC = R7
0x2263: 20 E5 04	jb	ACC_5, Label_514			; If (ACC_5 == H) then jumps (forward) hither: 0x226A

0x2266: EF		mov	A, R7					; ACC = R7
0x2267: 30 E6 E6	jnb	ACC_6, Label_513			; If (ACC_6 == L) then jumps (backward) hither: 0x2250

Label_514:

0x226A: 75 F3 01	mov	DFC, #0x01				; DFC = 0x01
0x226D: 75 9E 60	mov	P4CON, #0x60				; P4CON = 0x60 {'`'}
0x2270: 7F 62		mov	R7, #0x62				; R7 = 0x62 {'b'}
0x2272: 12 24 5E	lcall	Function_117				; Calls (forward) this: 0x245E (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x245E)
0x2275: 12 27 A1	lcall	Function_141				; Calls (forward) this: 0x27A1 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27A1)
0x2278: 02 25 56	ljmp	Label_563				; Jumps (forward) hither: 0x2556

Label_515:

0x227B: E5 E7		mov	A, TXFLG2				; ACC = TXFLG2
0x227D: 30 E3 06	jnb	ACC_3, Label_516			; If (ACC_3 == L) then jumps (forward) hither: 0x2286

0x2280: E5 E7		mov	A, TXFLG2				; ACC = TXFLG2
0x2282: 54 03		anl	A, #0x03				; ACC &= 0x03
0x2284: 60 05		jz	Label_517				; If (ACC == 0) then jumps (forward) hither: 0x228B

Label_516:

0x2286: 12 27 A8	lcall	set_wdt_scalar00			; Calls (forward) this: 0x27A8 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27A8)
0x2289: 80 F0		sjmp	Label_515				; Jumps (backward) hither: 0x227B

Label_517:

0x228B: 20 24 15	jb	0x24, Label_518				; If ([0x24] == H) then jumps (forward) hither: 0x22A3

0x228E: C2 AF		clr	EA					; EA = L
0x2290: 75 E5 01	mov	TXDAT2, #0x01				; TXDAT2 = 0x01
0x2293: 12 16 D9	lcall	Function_059				; Calls (backward) this: 0x16D9 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x16D9)
0x2296: D2 AF		setb	EA					; EA = H
0x2298: 75 E6 04	mov	TXCNT2, #0x04				; TXCNT2 = 0x04
0x229B: 43 E7 01	orl	TXFLG2, #0x01				; TXFLG2 |= 0x01
0x229E: E4		clr	A					; ACC = 0
0x229F: F5 3A		mov	0x3A, A					; [0x3A] = ACC
0x22A1: F5 45		mov	0x45, A					; [0x45] = ACC

Label_518:

0x22A3: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_519:

0x22A4: E4		clr	A					; ACC = 0
0x22A5: F5 9A		mov	P0CON, A				; P0CON = ACC
0x22A7: F5 9B		mov	P1CON, A				; P1CON = ACC
0x22A9: F5 9C		mov	P2CON, A				; P2CON = ACC
0x22AB: 75 9D 0D	mov	P3CON, #0x0D				; P3CON = 0x0D {'\r'}
0x22AE: 75 9E 60	mov	P4CON, #0x60				; P4CON = 0x60 {'`'}
0x22B1: F5 A4		mov	P2WK, A					; P2WK = ACC
0x22B3: F5 A2		mov	P0WK, A					; P0WK = ACC
0x22B5: F5 A3		mov	P1WK, A					; P1WK = ACC
0x22B7: F5 A5		mov	P3WK, A					; P3WK = ACC
0x22B9: 53 A6 F8	anl	P4WK, #0xF8				; P4WK &= 0xF8
0x22BC: 75 80 FF	mov	P0, #0xFF				; P0 = 0xFF
0x22BF: 75 90 FF	mov	P1, #0xFF				; P1 = 0xFF
0x22C2: 75 B0 FF	mov	P3, #0xFF				; P3 = 0xFF
0x22C5: 75 A0 FF	mov	P2, #0xFF				; P2 = 0xFF
0x22C8: 43 C0 07	orl	P4, #0x07				; P4 |= 0x07 {'\a'}
0x22CB: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_109:

0x22CC: 53 9E F8	anl	P4CON, #0xF8				; P4CON &= 0xF8
0x22CF: E5 2B		mov	A, 0x2B					; ACC = [0x2B]
0x22D1: 30 E0 06	jnb	ACC_0, Label_520			; If (ACC_0 == L) then jumps (forward) hither: 0x22DA

0x22D4: C2 C1		clr	P4_1					; P4_1 = L
0x22D6: D2 1A		setb	0x1A					; [0x1A] = H
0x22D8: 80 04		sjmp	Label_521				; Jumps (forward) hither: 0x22DE

Label_520:

0x22DA: D2 C1		setb	P4_1					; P4_1 = H
0x22DC: C2 1A		clr	0x1A					; [0x1A] = L

Label_521:

0x22DE: E5 2B		mov	A, 0x2B					; ACC = [0x2B]
0x22E0: 30 E1 04	jnb	ACC_1, Label_522			; If (ACC_1 == L) then jumps (forward) hither: 0x22E7

0x22E3: C2 C0		clr	P4_0					; P4_0 = L
0x22E5: 80 02		sjmp	Label_523				; Jumps (forward) hither: 0x22E9

Label_522:

0x22E7: D2 C0		setb	P4_0					; P4_0 = H

Label_523:

0x22E9: E5 2B		mov	A, 0x2B					; ACC = [0x2B]
0x22EB: 30 E2 03	jnb	ACC_2, Label_524			; If (ACC_2 == L) then jumps (forward) hither: 0x22F1

0x22EE: C2 C2		clr	P4_2					; P4_2 = L
0x22F0: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_524:

0x22F1: D2 C2		setb	P4_2					; P4_2 = H
0x22F3: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_525:

0x22F4: E5 E7		mov	A, TXFLG2				; ACC = TXFLG2
0x22F6: 30 E3 06	jnb	ACC_3, Label_526			; If (ACC_3 == L) then jumps (forward) hither: 0x22FF

0x22F9: E5 E7		mov	A, TXFLG2				; ACC = TXFLG2
0x22FB: 54 03		anl	A, #0x03				; ACC &= 0x03
0x22FD: 60 05		jz	Label_527				; If (ACC == 0) then jumps (forward) hither: 0x2304

Label_526:

0x22FF: 12 27 A8	lcall	set_wdt_scalar00			; Calls (forward) this: 0x27A8 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27A8)
0x2302: 80 F0		sjmp	Label_525				; Jumps (backward) hither: 0x22F4

Label_527:

0x2304: 20 24 12	jb	0x24, Label_528				; If ([0x24] == H) then jumps (forward) hither: 0x2319

0x2307: C2 AF		clr	EA					; EA = L
0x2309: 12 16 D9	lcall	Function_059				; Calls (backward) this: 0x16D9 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x16D9)
0x230C: D2 AF		setb	EA					; EA = H
0x230E: 75 E6 03	mov	TXCNT2, #0x03				; TXCNT2 = 0x03
0x2311: 43 E7 01	orl	TXFLG2, #0x01				; TXFLG2 |= 0x01
0x2314: E4		clr	A					; ACC = 0
0x2315: F5 3A		mov	0x3A, A					; [0x3A] = ACC
0x2317: F5 45		mov	0x45, A					; [0x45] = ACC

Label_528:

0x2319: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_529:

0x231A: C2 AF		clr	EA					; EA = L
0x231C: 12 27 A8	lcall	set_wdt_scalar00			; Calls (forward) this: 0x27A8 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27A8)
0x231F: 43 9E 60	orl	P4CON, #0x60				; P4CON |= 0x60 {'`'}
0x2322: 75 F3 01	mov	DFC, #0x01				; DFC = 0x01
0x2325: 75 20 01	mov	0x20, #0x01				; [0x20] = 0x01
0x2328: 30 1B 13	jnb	0x1B, Label_530				; If ([0x1B] == L) then jumps (forward) hither: 0x233E

0x232B: 75 F3 41	mov	DFC, #0x41				; DFC = 0x41 {'A'}
0x232E: 12 23 61	lcall	Function_111				; Calls (forward) this: 0x2361 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2361)
0x2331: D2 07		setb	0x07					; [0x07] = H
0x2333: D2 1B		setb	0x1B					; [0x1B] = H
0x2335: D2 19		setb	0x19					; [0x19] = H
0x2337: C2 18		clr	0x18					; [0x18] = L
0x2339: 7F C2		mov	R7, #0xC2				; R7 = 0xC2
0x233B: 12 00 5E	lcall	Label_005				; Calls (backward) this: 0x005E (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x005E)

Label_530:

0x233E: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_110:

0x233F: E5 36		mov	A, 0x36					; ACC = [0x36]
0x2341: 45 35		orl	A, 0x35					; ACC |= [0x35]
0x2343: 45 32		orl	A, 0x32					; ACC |= [0x32]
0x2345: 45 2F		orl	A, 0x2F					; ACC |= [0x2F]
0x2347: 70 14		jnz	Label_532				; If (ACC != 0) then jumps (forward) hither: 0x235D

0x2349: E5 F2		mov	A, DADDR				; ACC = DADDR
0x234B: 60 10		jz	Label_532				; If (ACC == 0) then jumps (forward) hither: 0x235D

0x234D: E5 31		mov	A, 0x31					; ACC = [0x31]
0x234F: 60 05		jz	Label_531				; If (ACC == 0) then jumps (forward) hither: 0x2356

0x2351: E5 31		mov	A, 0x31					; ACC = [0x31]
0x2353: B4 01 07	cjne	A, #0x01, Label_532			; If (ACC != 0x01) then jumps (forward) hither: 0x235D

Label_531:

0x2356: 75 48 02	mov	0x48, #0x02				; [0x48] = 0x02
0x2359: 12 11 25	lcall	Function_033				; Calls (backward) this: 0x1125 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1125)
0x235C: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_532:

0x235D: 12 27 29	lcall	Label_589				; Calls (forward) this: 0x2729 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2729)
0x2360: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_111:

0x2361: E4		clr	A					; ACC = 0
0x2362: F5 F2		mov	DADDR, A				; DADDR = ACC
0x2364: 75 3C 7D	mov	0x3C, #0x7D				; [0x3C] = 0x7D {'}'}
0x2367: 75 3D 7D	mov	0x3D, #0x7D				; [0x3D] = 0x7D {'}'}
0x236A: 75 3E 01	mov	0x3E, #0x01				; [0x3E] = 0x01
0x236D: FF		mov	R7, A					; R7 = ACC

Label_533:

0x236E: 74 95		mov	A, #0x95				; ACC = 0x95
0x2370: 2F		add	A, R7					; ACC += R7
0x2371: F8		mov	R0, A					; R0 = ACC
0x2372: E4		clr	A					; ACC = 0
0x2373: F6		mov	@R0, A					; [R0] = ACC
0x2374: 74 97		mov	A, #0x97				; ACC = 0x97
0x2376: 2F		add	A, R7					; ACC += R7
0x2377: F8		mov	R0, A					; R0 = ACC
0x2378: E4		clr	A					; ACC = 0
0x2379: F6		mov	@R0, A					; [R0] = ACC
0x237A: 0F		inc	R7					; ++R7
0x237B: BF 02 F0	cjne	R7, #0x02, Label_533			; If (R7 != 0x02) then jumps (backward) hither: 0x236E

0x237E: 75 44 01	mov	0x44, #0x01				; [0x44] = 0x01
0x2381: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_112:

0x2382: 85 46 F2	mov	DADDR, 0x46				; DADDR = [0x46]
0x2385: E4		clr	A					; ACC = 0
0x2386: F5 3B		mov	0x3B, A					; [0x3B] = ACC
0x2388: 53 E4 F7	anl	TXFLG1, #0xF7				; TXFLG1 &= 0xF7
0x238B: 53 E7 F7	anl	TXFLG2, #0xF7				; TXFLG2 &= 0xF7
0x238E: E5 F2		mov	A, DADDR				; ACC = DADDR
0x2390: 60 08		jz	Label_534				; If (ACC == 0) then jumps (forward) hither: 0x239A

0x2392: 53 20 F0	anl	0x20, #0xF0				; [0x20] &= 0xF0
0x2395: 43 20 84	orl	0x20, #0x84				; [0x20] |= 0x84
0x2398: 80 06		sjmp	Label_535				; Jumps (forward) hither: 0x23A0

Label_534:

0x239A: 53 20 F0	anl	0x20, #0xF0				; [0x20] &= 0xF0
0x239D: 43 20 82	orl	0x20, #0x82				; [0x20] |= 0x82

Label_535:

0x23A0: 02 27 B6	ljmp	Label_597				; Jumps (forward) hither: 0x27B6

;-------------------------------------------------------------------------------

Function_113:

0x23A3: E5 37		mov	A, 0x37					; ACC = [0x37]
0x23A5: 30 E3 09	jnb	ACC_3, Label_536			; If (ACC_3 == L) then jumps (forward) hither: 0x23B1

0x23A8: 12 26 FC	lcall	Function_132				; Calls (forward) this: 0x26FC (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x26FC)
0x23AB: 78 81		mov	R0, #0x81				; R0 = 0x81
0x23AD: 56		anl	A, @R0					; ACC &= [R0]
0x23AE: FF		mov	R7, A					; R7 = ACC
0x23AF: 80 09		sjmp	Label_537				; Jumps (forward) hither: 0x23BA

Label_536:

0x23B1: E5 37		mov	A, 0x37					; ACC = [0x37]
0x23B3: 12 26 FC	lcall	Function_132				; Calls (forward) this: 0x26FC (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x26FC)
0x23B6: 78 80		mov	R0, #0x80				; R0 = 0x80
0x23B8: 56		anl	A, @R0					; ACC &= [R0]
0x23B9: FF		mov	R7, A					; R7 = ACC

Label_537:

0x23BA: EF		mov	A, R7					; ACC = R7
0x23BB: 70 03		jnz	Label_538				; If (ACC != 0) then jumps (forward) hither: 0x23C0

0x23BD: C3		clr	C					; CY = L
0x23BE: 80 01		sjmp	Label_539				; Jumps (forward) hither: 0x23C1

Label_538:

0x23C0: D3		setb	C					; CY = H

Label_539:

0x23C1: 92 0A		mov	0x0A, C					; [0x0A] = CY
0x23C3: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

process_tp_data?:

0x23C4: 78 B7		mov	R0, #0xB7				; R0 = 0xB7
0x23C6: E6		mov	A, @R0					; ACC = [R0]
0x23C7: B4 01 18	cjne	A, #0x01, Label_541			; If (ACC != 0x01) then jumps (forward) hither: 0x23E2

0x23CA: 78 BE		mov	R0, #0xBE				; R0 = 0xBE
0x23CC: 06		inc	@R0					; ++[R0]
0x23CD: E6		mov	A, @R0					; ACC = [R0]
0x23CE: 18		dec	R0					; --R0 (0xBD)
0x23CF: 70 01		jnz	Label_540				; If (ACC != 0) then jumps (forward) hither: 0x23D2

0x23D1: 06		inc	@R0					; ++[R0]

Label_540:

0x23D2: D3		setb	C					; CY = H
0x23D3: 78 BE		mov	R0, #0xBE				; R0 = 0xBE
0x23D5: E6		mov	A, @R0					; ACC = [R0]
0x23D6: 94 D0		subb	A, #0xD0				; ACC -= 0xD0 + CY
0x23D8: 18		dec	R0					; --R0 (0xBD)
0x23D9: E6		mov	A, @R0					; ACC = [R0]
0x23DA: 94 07		subb	A, #0x07				; ACC -= 0x07 + CY {'\a'}
0x23DC: 40 04		jc	Label_541				; If (CY == H) then jumps (forward) hither: 0x23E2

0x23DE: E4		clr	A					; ACC = 0
0x23DF: 78 B7		mov	R0, #0xB7				; R0 = 0xB7
0x23E1: F6		mov	@R0, A					; [R0] = ACC

Label_541:

0x23E2: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_542:

0x23E3: 02 A0 00	ljmp	0xA000					; Jumps (forward) hither: 0xA000

Label_543:

0x23E6: 03		rr	A					; ACC[76543210] = ACC[07654321]
0x23E7: A0 01		orl	C, /0x01				; CY = ~[0x01]
0x23E9: AA 02		mov	R2, R2<#0>				; R2 = R2<#0>
0x23EB: A0 02		orl	C, /0x02				; CY = ~[0x02]
0x23ED: 03		rr	A					; ACC[76543210] = ACC[07654321]
0x23EE: A0 02		orl	C, /0x02				; CY = ~[0x02]
0x23F0: 00		nop
0x23F1: 02 A0 03	ljmp	0xA003					; Jumps (forward) hither: 0xA003

Label_544:

0x23F4: 02 A0 05	ljmp	0xA005					; Jumps (forward) hither: 0xA005

Label_545:

0x23F7: 03		rr	A					; ACC[76543210] = ACC[07654321]
0x23F8: A0 03		orl	C, /0x03				; CY = ~[0x03]
0x23FA: 00		nop

Label_546:

0x23FB: 03		rr	A					; ACC[76543210] = ACC[07654321]
0x23FC: A0 06		orl	C, /0x06				; CY = ~[0x06]
0x23FE: EE		mov	A, R6					; ACC = R6
0x23FF: A0 08		orl	C, /0x08				; CY = ~[0x08]

Label_547:

0x2401: 1A		dec	R2					; --R2

;-------------------------------------------------------------------------------

Function_114:

0x2402: 8F 4A		mov	0x4A, R7				; [0x4A] = R7
0x2404: E4		clr	A					; ACC = 0
0x2405: FD		mov	R5, A					; R5 = ACC
0x2406: FC		mov	R4, A					; R4 = ACC

Label_548:

0x2407: EF		mov	A, R7					; ACC = R7
0x2408: FB		mov	R3, A					; R3 = ACC
0x2409: C3		clr	C					; CY = L
0x240A: ED		mov	A, R5					; ACC = R5
0x240B: 9B		subb	A, R3					; ACC -= R3 + CY
0x240C: 74 80		mov	A, #0x80				; ACC = 0x80
0x240E: F8		mov	R0, A					; R0 = ACC
0x240F: 6C		xrl	A, R4					; ACC ^= R4
0x2410: 98		subb	A, R0					; ACC -= R0 + CY
0x2411: 50 0D		jnc	Label_550				; If (CY == L) then jumps (forward) hither: 0x2420

0x2413: 74 2F		mov	A, #0x2F				; ACC = 0x2F {'/'}
0x2415: 2D		add	A, R5					; ACC += R5
0x2416: F8		mov	R0, A					; R0 = ACC
0x2417: A6 ED		mov	@R0, RXDAT0				; [R0] = RXDAT0
0x2419: 0D		inc	R5					; ++R5
0x241A: BD 00 01	cjne	R5, #0x00, Label_549			; If (R5 != 0x00 {'\0'}) then jumps (forward) hither: 0x241E

0x241D: 0C		inc	R4					; ++R4

Label_549:

0x241E: 80 E7		sjmp	Label_548				; Jumps (backward) hither: 0x2407

Label_550:

0x2420: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_115:

0x2421: E5 35		mov	A, 0x35					; ACC = [0x35]
0x2423: 45 36		orl	A, 0x36					; ACC |= [0x36]
0x2425: 45 32		orl	A, 0x32					; ACC |= [0x32]
0x2427: 45 2F		orl	A, 0x2F					; ACC |= [0x2F]
0x2429: 70 11		jnz	Label_551				; If (ACC != 0) then jumps (forward) hither: 0x243C

0x242B: E5 31		mov	A, 0x31					; ACC = [0x31]
0x242D: C3		clr	C					; CY = L
0x242E: 94 80		subb	A, #0x80				; ACC -= 0x80 + CY
0x2430: 50 0A		jnc	Label_551				; If (CY == L) then jumps (forward) hither: 0x243C

0x2432: 85 31 46	mov	0x46, 0x31				; [0x46] = [0x31]
0x2435: 75 48 01	mov	0x48, #0x01				; [0x48] = 0x01
0x2438: 12 11 25	lcall	Function_033				; Calls (backward) this: 0x1125 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1125)
0x243B: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_551:

0x243C: 12 27 29	lcall	Label_589				; Calls (forward) this: 0x2729 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2729)
0x243F: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_116:

0x2440: E5 96		mov	A, MODE_FG				; ACC = MODE_FG
0x2442: 30 E4 06	jnb	ACC_4, Label_552			; If (ACC_4 == L) then jumps (forward) hither: 0x244B

0x2445: 75 45 19	mov	0x45, #0x19				; [0x45] = 0x19
0x2448: 12 27 A1	lcall	Function_141				; Calls (forward) this: 0x27A1 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27A1)

Label_552:

0x244B: E5 F3		mov	A, DFC					; ACC = DFC
0x244D: 54 CA		anl	A, #0xCA				; ACC &= 0xCA
0x244F: 44 C2		orl	A, #0xC2				; ACC |= 0xC2
0x2451: FF		mov	R7, A					; R7 = ACC
0x2452: 12 00 5E	lcall	Label_005				; Calls (backward) this: 0x005E (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x005E)
0x2455: 12 20 AC	lcall	Function_102				; Calls (backward) this: 0x20AC (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x20AC)
0x2458: 53 96 8E	anl	MODE_FG, #0x8E				; MODE_FG &= 0x8E
0x245B: 02 25 BC	ljmp	Label_571				; Jumps (forward) hither: 0x25BC

;-------------------------------------------------------------------------------

Function_117:

0x245E: C2 AF		clr	EA					; EA = L
0x2460: 75 D3 FC	mov	BT1, #0xFC				; BT1 = 0xFC
0x2463: 75 D4 F0	mov	BTCON, #0xF0				; BTCON = 0xF0
0x2466: 53 DA F7	anl	IF, #0xF7				; IF &= 0xF7

Label_553:

0x2469: EF		mov	A, R7					; ACC = R7
0x246A: 60 0E		jz	Label_555				; If (ACC == 0) then jumps (forward) hither: 0x247A

Label_554:

0x246C: 12 27 A8	lcall	set_wdt_scalar00			; Calls (forward) this: 0x27A8 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27A8)
0x246F: E5 DA		mov	A, IF					; ACC = IF
0x2471: 30 E3 F8	jnb	ACC_3, Label_554			; If (ACC_3 == L) then jumps (backward) hither: 0x246C

0x2474: 53 DA F7	anl	IF, #0xF7				; IF &= 0xF7
0x2477: 1F		dec	R7					; --R7
0x2478: 80 EF		sjmp	Label_553				; Jumps (backward) hither: 0x2469

Label_555:

0x247A: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_118:

0x247B: C2 AF		clr	EA					; EA = L
0x247D: 43 EF 04	orl	RXFLG0, #0x04				; RXFLG0 |= 0x04
0x2480: 12 27 03	lcall	Function_133				; Calls (forward) this: 0x2703 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2703)
0x2483: EF		mov	A, R7					; ACC = R7
0x2484: 75 F0 03	mov	B, #0x03				; B = 0x03
0x2487: A4		mul	AB					; B:ACC = ACC * B
0x2488: 24 BE		add	A, #0xBE				; ACC += 0xBE
0x248A: F5 82		mov	DPL, A					; DPL = ACC
0x248C: E4		clr	A					; ACC = 0
0x248D: 34 04		addc	A, #0x04				; ACC += 0x04 + CY
0x248F: 12 11 75	lcall	Function_042				; Calls (backward) this: 0x1175 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1175)
0x2492: 53 EF FB	anl	RXFLG0, #0xFB				; RXFLG0 &= 0xFB
0x2495: D2 AF		setb	EA					; EA = H
0x2497: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_119:

0x2498: E5 51		mov	A, 0x51					; ACC = [0x51]
0x249A: B5 37 0B	cjne	A, 0x37, Label_556			; If (ACC != [0x37]) then jumps (forward) hither: 0x24A8

0x249D: E4		clr	A					; ACC = 0
0x249E: F5 37		mov	0x37, A					; [0x37] = ACC
0x24A0: F5 51		mov	0x51, A					; [0x51] = ACC
0x24A2: 30 09 0E	jnb	0x09, Label_557				; If ([0x09] == L) then jumps (forward) hither: 0x24B3

0x24A5: C2 09		clr	0x09					; [0x09] = L
0x24A7: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_556:

0x24A8: 05 37		inc	0x37					; ++[0x37]
0x24AA: E5 37		mov	A, 0x37					; ACC = [0x37]
0x24AC: 54 0F		anl	A, #0x0F				; ACC &= 0x0F
0x24AE: F5 37		mov	0x37, A					; [0x37] = ACC
0x24B0: 12 05 2A	lcall	Function_012				; Calls (backward) this: 0x052A (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x052A)

Label_557:

0x24B3: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Timer1_interrupt:

0x24B4: C0 E0		push	ACC					; ++SP, [SP] = ACC
0x24B6: C0 F0		push	B					; ++SP, [SP] = B
0x24B8: C0 83		push	DPH					; ++SP, [SP] = DPH
0x24BA: C0 82		push	DPL					; ++SP, [SP] = DPL
0x24BC: C0 D0		push	PSW					; ++SP, [SP] = PSW
0x24BE: 75 D0 08	mov	PSW, #0x08				; PSW = 0x08 (select bank #1)
0x24C1: 12 19 85	lcall	Function_077				; Calls (backward) this: 0x1985 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1985)
0x24C4: D0 D0		pop	PSW					; PSW = [SP], --SP
0x24C6: D0 82		pop	DPL					; DPL = [SP], --SP
0x24C8: D0 83		pop	DPH					; DPH = [SP], --SP
0x24CA: D0 F0		pop	B					; B = [SP], --SP
0x24CC: D0 E0		pop	ACC					; ACC = [SP], --SP
0x24CE: 32		reti						; PCH = [SP--], PCL = [SP--]

Label_558:

0x24CF: C0 E0		push	ACC					; ++SP, [SP] = ACC
0x24D1: C0 F0		push	B					; ++SP, [SP] = B
0x24D3: C0 83		push	DPH					; ++SP, [SP] = DPH
0x24D5: C0 82		push	DPL					; ++SP, [SP] = DPL
0x24D7: C0 D0		push	PSW					; ++SP, [SP] = PSW
0x24D9: 75 D0 18	mov	PSW, #0x18				; PSW = 0x18 (select bank #3)
0x24DC: 12 15 9F	lcall	Function_052				; Calls (backward) this: 0x159F (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x159F)
0x24DF: D0 D0		pop	PSW					; PSW = [SP], --SP
0x24E1: D0 82		pop	DPL					; DPL = [SP], --SP
0x24E3: D0 83		pop	DPH					; DPH = [SP], --SP
0x24E5: D0 F0		pop	B					; B = [SP], --SP
0x24E7: D0 E0		pop	ACC					; ACC = [SP], --SP
0x24E9: 32		reti						; PCH = [SP--], PCL = [SP--]

Label_559:

0x24EA: C0 E0		push	ACC					; ++SP, [SP] = ACC
0x24EC: C0 F0		push	B					; ++SP, [SP] = B
0x24EE: C0 83		push	DPH					; ++SP, [SP] = DPH
0x24F0: C0 82		push	DPL					; ++SP, [SP] = DPL
0x24F2: C0 D0		push	PSW					; ++SP, [SP] = PSW
0x24F4: 75 D0 18	mov	PSW, #0x18				; PSW = 0x18 (select bank #3)
0x24F7: 12 15 9F	lcall	Function_052				; Calls (backward) this: 0x159F (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x159F)
0x24FA: D0 D0		pop	PSW					; PSW = [SP], --SP
0x24FC: D0 82		pop	DPL					; DPL = [SP], --SP
0x24FE: D0 83		pop	DPH					; DPH = [SP], --SP
0x2500: D0 F0		pop	B					; B = [SP], --SP
0x2502: D0 E0		pop	ACC					; ACC = [SP], --SP
0x2504: 32		reti						; PCH = [SP--], PCL = [SP--]

Label_560:

0x2505: C0 E0		push	ACC					; ++SP, [SP] = ACC
0x2507: C0 F0		push	B					; ++SP, [SP] = B
0x2509: C0 83		push	DPH					; ++SP, [SP] = DPH
0x250B: C0 82		push	DPL					; ++SP, [SP] = DPL
0x250D: C0 D0		push	PSW					; ++SP, [SP] = PSW
0x250F: 75 D0 18	mov	PSW, #0x18				; PSW = 0x18 (select bank #3)
0x2512: 12 24 7B	lcall	Function_118				; Calls (backward) this: 0x247B (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x247B)
0x2515: D0 D0		pop	PSW					; PSW = [SP], --SP
0x2517: D0 82		pop	DPL					; DPL = [SP], --SP
0x2519: D0 83		pop	DPH					; DPH = [SP], --SP
0x251B: D0 F0		pop	B					; B = [SP], --SP
0x251D: D0 E0		pop	ACC					; ACC = [SP], --SP
0x251F: 32		reti						; PCH = [SP--], PCL = [SP--]

Label_561:

0x2520: C0 E0		push	ACC					; ++SP, [SP] = ACC
0x2522: C0 F0		push	B					; ++SP, [SP] = B
0x2524: C0 83		push	DPH					; ++SP, [SP] = DPH
0x2526: C0 82		push	DPL					; ++SP, [SP] = DPL
0x2528: C0 D0		push	PSW					; ++SP, [SP] = PSW
0x252A: 75 D0 18	mov	PSW, #0x18				; PSW = 0x18 (select bank #3)
0x252D: 12 19 E6	lcall	Function_078				; Calls (backward) this: 0x19E6 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x19E6)
0x2530: D0 D0		pop	PSW					; PSW = [SP], --SP
0x2532: D0 82		pop	DPL					; DPL = [SP], --SP
0x2534: D0 83		pop	DPH					; DPH = [SP], --SP
0x2536: D0 F0		pop	B					; B = [SP], --SP
0x2538: D0 E0		pop	ACC					; ACC = [SP], --SP
0x253A: 32		reti						; PCH = [SP--], PCL = [SP--]

Label_562:

0x253B: C0 E0		push	ACC					; ++SP, [SP] = ACC
0x253D: C0 F0		push	B					; ++SP, [SP] = B
0x253F: C0 83		push	DPH					; ++SP, [SP] = DPH
0x2541: C0 82		push	DPL					; ++SP, [SP] = DPL
0x2543: C0 D0		push	PSW					; ++SP, [SP] = PSW
0x2545: 75 D0 18	mov	PSW, #0x18				; PSW = 0x18 (select bank #3)
0x2548: 12 15 1D	lcall	Function_051				; Calls (backward) this: 0x151D (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x151D)
0x254B: D0 D0		pop	PSW					; PSW = [SP], --SP
0x254D: D0 82		pop	DPL					; DPL = [SP], --SP
0x254F: D0 83		pop	DPH					; DPH = [SP], --SP
0x2551: D0 F0		pop	B					; B = [SP], --SP
0x2553: D0 E0		pop	ACC					; ACC = [SP], --SP
0x2555: 32		reti						; PCH = [SP--], PCL = [SP--]

Label_563:

0x2556: 75 9D 0D	mov	P3CON, #0x0D				; P3CON = 0x0D {'\r'}
0x2559: E4		clr	A					; ACC = 0
0x255A: F5 2B		mov	0x2B, A					; [0x2B] = ACC
0x255C: 12 27 A8	lcall	set_wdt_scalar00			; Calls (forward) this: 0x27A8 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27A8)
0x255F: 12 26 E6	lcall	Function_130				; Calls (forward) this: 0x26E6 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x26E6)
0x2562: 12 27 A8	lcall	set_wdt_scalar00			; Calls (forward) this: 0x27A8 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27A8)
0x2565: 7F 6E		mov	R7, #0x6E				; R7 = 0x6E {'n'}
0x2567: 12 24 5E	lcall	Function_117				; Calls (backward) this: 0x245E (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x245E)
0x256A: 12 27 A1	lcall	Function_141				; Calls (forward) this: 0x27A1 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27A1)
0x256D: 02 23 1A	ljmp	Label_529				; Jumps (backward) hither: 0x231A

Label_564:

0x2570: EF		mov	A, R7					; ACC = R7
0x2571: 60 0A		jz	Label_565				; If (ACC == 0) then jumps (forward) hither: 0x257D

0x2573: 78 B3		mov	R0, #0xB3				; R0 = 0xB3
0x2575: E6		mov	A, @R0					; ACC = [R0]
0x2576: 5D		anl	A, R5					; ACC &= R5
0x2577: 70 10		jnz	Label_567				; If (ACC != 0) then jumps (forward) hither: 0x2589

0x2579: E6		mov	A, @R0					; ACC = [R0]
0x257A: 4D		orl	A, R5					; ACC |= R5
0x257B: 80 09		sjmp	Label_566				; Jumps (forward) hither: 0x2586

Label_565:

0x257D: 78 B3		mov	R0, #0xB3				; R0 = 0xB3
0x257F: E6		mov	A, @R0					; ACC = [R0]
0x2580: 5D		anl	A, R5					; ACC &= R5
0x2581: 60 06		jz	Label_567				; If (ACC == 0) then jumps (forward) hither: 0x2589

0x2583: ED		mov	A, R5					; ACC = R5
0x2584: F4		cpl	A					; ACC = ~ACC
0x2585: 56		anl	A, @R0					; ACC &= [R0]

Label_566:

0x2586: F6		mov	@R0, A					; [R0] = ACC
0x2587: D2 20		setb	0x20					; [0x20] = H

Label_567:

0x2589: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_120:

0x258A: E5 35		mov	A, 0x35					; ACC = [0x35]
0x258C: B4 01 10	cjne	A, #0x01, Label_568			; If (ACC != 0x01) then jumps (forward) hither: 0x259F

0x258F: E5 36		mov	A, 0x36					; ACC = [0x36]
0x2591: 70 0C		jnz	Label_568				; If (ACC != 0) then jumps (forward) hither: 0x259F

0x2593: E5 2F		mov	A, 0x2F					; ACC = [0x2F]
0x2595: B4 80 07	cjne	A, #0x80, Label_568			; If (ACC != 0x80) then jumps (forward) hither: 0x259F

0x2598: 85 3B EA	mov	TXDAT0, 0x3B				; TXDAT0 = [0x3B]
0x259B: 12 11 15	lcall	Function_031				; Calls (backward) this: 0x1115 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1115)
0x259E: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_568:

0x259F: 12 27 29	lcall	Label_589				; Calls (forward) this: 0x2729 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2729)
0x25A2: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_121:

0x25A3: E4		clr	A					; ACC = 0
0x25A4: FE		mov	R6, A					; R6 = ACC
0x25A5: FD		mov	R5, A					; R5 = ACC

Label_569:

0x25A6: EE		mov	A, R6					; ACC = R6
0x25A7: 25 E0		add	A, ACC					; ACC += ACC
0x25A9: FE		mov	R6, A					; R6 = ACC
0x25AA: ED		mov	A, R5					; ACC = R5
0x25AB: 90 22 24	mov	DPTR, #0x2224				; DPTR = 0x2224
0x25AE: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x25AF: 5F		anl	A, R7					; ACC &= R7
0x25B0: 60 03		jz	Label_570				; If (ACC == 0) then jumps (forward) hither: 0x25B5

0x25B2: 43 06 01	orl	R6<#0>, #0x01				; R6<#0> |= 0x01

Label_570:

0x25B5: 0D		inc	R5					; ++R5
0x25B6: BD 08 ED	cjne	R5, #0x08, Label_569			; If (R5 != 0x08 {'\b'}) then jumps (backward) hither: 0x25A6

0x25B9: AF 06		mov	R7, R6<#0>				; R7 = R6<#0>
0x25BB: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_571:

0x25BC: E4		clr	A					; ACC = 0
0x25BD: F5 9C		mov	P2CON, A				; P2CON = ACC
0x25BF: F5 9B		mov	P1CON, A				; P1CON = ACC
0x25C1: F5 9A		mov	P0CON, A				; P0CON = ACC
0x25C3: 53 9D 0D	anl	P3CON, #0x0D				; P3CON &= 0x0D {'\r'}
0x25C6: 75 80 FF	mov	P0, #0xFF				; P0 = 0xFF
0x25C9: 75 90 FF	mov	P1, #0xFF				; P1 = 0xFF
0x25CC: 75 A0 FF	mov	P2, #0xFF				; P2 = 0xFF
0x25CF: D2 B4		setb	P3_4					; P3_4 = H
0x25D1: D2 B5		setb	P3_5					; P3_5 = H
0x25D3: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_122:

0x25D4: E4		clr	A					; ACC = 0
0x25D5: F5 A8		mov	IE, A					; IE = ACC
0x25D7: F5 A9		mov	IE2, A					; IE2 = ACC
0x25D9: F5 DC		mov	IRQEN, A				; IRQEN = ACC
0x25DB: F5 DD		mov	IRQEN2, A				; IRQEN2 = ACC
0x25DD: F5 B8		mov	IP, A					; IP = ACC
0x25DF: F5 B9		mov	IP2, A					; IP2 = ACC
0x25E1: F5 DA		mov	IF, A					; IF = ACC
0x25E3: F5 DB		mov	IF2, A					; IF2 = ACC
0x25E5: F5 DE		mov	IRQFG, A				; IRQFG = ACC
0x25E7: F5 DF		mov	IRQFG2, A				; IRQFG2 = ACC
0x25E9: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_572:

0x25EA: 7F 12		mov	R7, #0x12				; R7 = 0x12
0x25EC: 78 6E		mov	R0, #0x6E				; R0 = 0x6E {'n'}
0x25EE: E4		clr	A					; ACC = 0

Label_573:

0x25EF: F6		mov	@R0, A					; [R0] = ACC
0x25F0: 08		inc	R0					; ++R0
0x25F1: DF FC		djnz	R7, Label_573				; If (--R7 != 0) then jumps (backward) hither: 0x25EF

0x25F3: 12 27 56	lcall	Function_137				; Calls (forward) this: 0x2756 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2756)
0x25F6: 7F 10		mov	R7, #0x10				; R7 = 0x10
0x25F8: 78 82		mov	R0, #0x82				; R0 = 0x82
0x25FA: E4		clr	A					; ACC = 0

Label_574:

0x25FB: F6		mov	@R0, A					; [R0] = ACC
0x25FC: 08		inc	R0					; ++R0
0x25FD: DF FC		djnz	R7, Label_574				; If (--R7 != 0) then jumps (backward) hither: 0x25FB

0x25FF: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

WAIT18:

0x2600: 12 00 36	lcall	WAIT12					; Calls (backward) this: 0x0036 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x0036)
0x2603: 00		nop
0x2604: 00		nop
0x2605: 00		nop
0x2606: 00		nop
0x2607: 00		nop
0x2608: 00		nop
0x2609: 00		nop
0x260A: 00		nop
0x260B: 00		nop
0x260C: 00		nop
0x260D: 00		nop
0x260E: 00		nop
0x260F: 00		nop
0x2610: 00		nop
0x2611: 00		nop
0x2612: 00		nop
0x2613: 00		nop
0x2614: 00		nop
0x2615: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_123:

0x2616: 20 03 02	jb	0x03, Label_575				; If ([0x03] == H) then jumps (forward) hither: 0x261B

0x2619: D3		setb	C					; CY = H
0x261A: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_575:

0x261B: E5 2F		mov	A, 0x2F					; ACC = [0x2F]
0x261D: 64 A1		xrl	A, #0xA1				; ACC ^= 0xA1
0x261F: 60 08		jz	Label_577				; If (ACC == 0) then jumps (forward) hither: 0x2629

0x2621: E5 2F		mov	A, 0x2F					; ACC = [0x2F]
0x2623: 64 A2		xrl	A, #0xA2				; ACC ^= 0xA2
0x2625: 60 02		jz	Label_577				; If (ACC == 0) then jumps (forward) hither: 0x2629

0x2627: D3		setb	C					; CY = H

Label_576:

0x2628: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_577:

0x2629: C3		clr	C					; CY = L
0x262A: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_124:

0x262B: 20 03 02	jb	0x03, Label_578				; If ([0x03] == H) then jumps (forward) hither: 0x2630

0x262E: D3		setb	C					; CY = H
0x262F: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_578:

0x2630: E5 2F		mov	A, 0x2F					; ACC = [0x2F]
0x2632: 64 21		xrl	A, #0x21				; ACC ^= 0x21 {'!'}
0x2634: 60 08		jz	Label_579				; If (ACC == 0) then jumps (forward) hither: 0x263E

0x2636: E5 2F		mov	A, 0x2F					; ACC = [0x2F]
0x2638: 64 22		xrl	A, #0x22				; ACC ^= 0x22 {'"'}
0x263A: 60 02		jz	Label_579				; If (ACC == 0) then jumps (forward) hither: 0x263E

0x263C: D3		setb	C					; CY = H
0x263D: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_579:

0x263E: C3		clr	C					; CY = L
0x263F: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_125:

0x2640: 12 27 A8	lcall	set_wdt_scalar00			; Calls (forward) this: 0x27A8 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27A8)
0x2643: 85 C0 64	mov	0x64, P4				; [0x64] = P4
0x2646: 12 27 AF	lcall	WAIT6					; Calls (forward) this: 0x27AF (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27AF)
0x2649: E5 64		mov	A, 0x64					; ACC = [0x64]
0x264B: B5 C0 F2	cjne	A, P4, Function_125			; If (ACC != P4) then jumps (backward) hither: 0x2640

0x264E: E5 64		mov	A, 0x64					; ACC = [0x64]
0x2650: 54 60		anl	A, #0x60				; ACC &= 0x60 {'`'}
0x2652: FF		mov	R7, A					; R7 = ACC
0x2653: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

i2c_start:

0x2654: 43 9D 05	orl	P3CON, #0x05				; P3CON |= 0x05
0x2657: 12 27 AF	lcall	WAIT6					; Calls (forward) this: 0x27AF (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27AF)
0x265A: 53 9D FE	anl	P3CON, #0xFE				; P3CON &= 0xFE
0x265D: C2 B0		clr	P3_0					; P3_0 = L
0x265F: 12 26 00	lcall	WAIT18					; Calls (backward) this: 0x2600 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2600)
0x2662: 53 9D FB	anl	P3CON, #0xFB				; P3CON &= 0xFB
0x2665: C2 B2		clr	P3_2					; P3_2 = L
0x2667: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_126:

0x2668: 75 2E 14	mov	0x2E, #0x14				; [0x2E] = 0x14
0x266B: 75 D3 CE	mov	BT1, #0xCE				; BT1 = 0xCE
0x266E: 53 DA F7	anl	IF, #0xF7				; IF &= 0xF7
0x2671: 53 DA FD	anl	IF, #0xFD				; IF &= 0xFD
0x2674: 75 D4 A0	mov	BTCON, #0xA0				; BTCON = 0xA0
0x2677: 75 A8 88	mov	IE, #0x88				; IE = 0x88
0x267A: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_580:

0x267B: C2 AF		clr	EA					; EA = L
0x267D: 53 D0 E7	anl	PSW, #0xE7				; PSW &= 0xE7
0x2680: 12 27 A8	lcall	set_wdt_scalar00			; Calls (forward) this: 0x27A8 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27A8)
0x2683: 12 20 DE	lcall	Function_103				; Calls (backward) this: 0x20DE (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x20DE)
0x2686: 30 07 03	jnb	0x07, Label_581				; If ([0x07] == L) then jumps (forward) hither: 0x268C

0x2689: 12 12 42	lcall	Function_047				; Calls (backward) this: 0x1242 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1242)

Label_581:

0x268C: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_582:

0x268D: 12 27 A8	lcall	set_wdt_scalar00			; Calls (forward) this: 0x27A8 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27A8)
0x2690: 12 26 40	lcall	Function_125				; Calls (backward) this: 0x2640 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2640)
0x2693: 8F 63		mov	0x63, R7				; [0x63] = R7
0x2695: 12 26 40	lcall	Function_125				; Calls (backward) this: 0x2640 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2640)
0x2698: E5 63		mov	A, 0x63					; ACC = [0x63]
0x269A: B5 07 F0	cjne	A, R7<#0>, Label_582			; If (ACC != R7<#0>) then jumps (backward) hither: 0x268D

0x269D: FF		mov	R7, A					; R7 = ACC
0x269E: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

i2c_stop:

0x269F: 53 9D FE	anl	P3CON, #0xFE				; P3CON &= 0xFE
0x26A2: C2 B0		clr	P3_0					; P3_0 = L
0x26A4: 12 27 AF	lcall	WAIT6					; Calls (forward) this: 0x27AF (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27AF)
0x26A7: 43 9D 04	orl	P3CON, #0x04				; P3CON |= 0x04
0x26AA: 12 26 00	lcall	WAIT18					; Calls (backward) this: 0x2600 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2600)
0x26AD: 43 9D 01	orl	P3CON, #0x01				; P3CON |= 0x01
0x26B0: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_127:

0x26B1: E5 49		mov	A, 0x49					; ACC = [0x49]
0x26B3: B4 04 0C	cjne	A, #0x04, Label_583			; If (ACC != 0x04) then jumps (forward) hither: 0x26C2

0x26B6: E5 2F		mov	A, 0x2F					; ACC = [0x2F]
0x26B8: 54 07		anl	A, #0x07				; ACC &= 0x07 {'\a'}
0x26BA: F5 2B		mov	0x2B, A					; [0x2B] = ACC
0x26BC: 30 13 03	jnb	0x13, Label_583				; If ([0x13] == L) then jumps (forward) hither: 0x26C2

0x26BF: 12 27 B6	lcall	Label_597				; Calls (forward) this: 0x27B6 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27B6)

Label_583:

0x26C2: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_128:

0x26C3: D2 22		setb	0x22					; [0x22] = H
0x26C5: EF		mov	A, R7					; ACC = R7
0x26C6: 60 06		jz	Label_584				; If (ACC == 0) then jumps (forward) hither: 0x26CE

0x26C8: 78 AC		mov	R0, #0xAC				; R0 = 0xAC
0x26CA: E6		mov	A, @R0					; ACC = [R0]
0x26CB: 4D		orl	A, R5					; ACC |= R5
0x26CC: F6		mov	@R0, A					; [R0] = ACC
0x26CD: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_584:

0x26CE: ED		mov	A, R5					; ACC = R5
0x26CF: F4		cpl	A					; ACC = ~ACC
0x26D0: 78 AC		mov	R0, #0xAC				; R0 = 0xAC
0x26D2: 56		anl	A, @R0					; ACC &= [R0]
0x26D3: F6		mov	@R0, A					; [R0] = ACC
0x26D4: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_129:

0x26D5: 12 27 A8	lcall	set_wdt_scalar00			; Calls (forward) this: 0x27A8 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27A8)
0x26D8: 12 26 E6	lcall	Function_130				; Calls (forward) this: 0x26E6 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x26E6)
0x26DB: 12 23 61	lcall	Function_111				; Calls (backward) this: 0x2361 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2361)
0x26DE: 75 20 82	mov	0x20, #0x82				; [0x20] = 0x82
0x26E1: 7F CA		mov	R7, #0xCA				; R7 = 0xCA
0x26E3: 02 00 5E	ljmp	Label_005				; Jumps (backward) hither: 0x005E

;-------------------------------------------------------------------------------

Function_130:

0x26E6: 12 25 D4	lcall	Function_122				; Calls (backward) this: 0x25D4 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x25D4)
0x26E9: 12 27 A8	lcall	set_wdt_scalar00			; Calls (forward) this: 0x27A8 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x27A8)
0x26EC: 12 27 74	lcall	Function_139				; Calls (forward) this: 0x2774 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2774)
0x26EF: E4		clr	A					; ACC = 0
0x26F0: F5 95		mov	WKT_CON, A				; WKT_CON = ACC
0x26F2: 02 22 A4	ljmp	Label_519				; Jumps (backward) hither: 0x22A4

;-------------------------------------------------------------------------------

Function_131:

0x26F5: E5 26		mov	A, 0x26					; ACC = [0x26]
0x26F7: 90 22 2C	mov	DPTR, #0x222C				; DPTR = 0x222C
0x26FA: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x26FB: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_132:

0x26FC: 54 07		anl	A, #0x07				; ACC &= 0x07 {'\a'}
0x26FE: 90 27 1D	mov	DPTR, #0x271D				; DPTR = 0x271D
0x2701: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x2702: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_133:

0x2703: E5 49		mov	A, 0x49					; ACC = [0x49]
0x2705: C3		clr	C					; CY = L
0x2706: 94 06		subb	A, #0x06				; ACC -= 0x06 + CY
0x2708: 40 03		jc	Label_585				; If (CY == H) then jumps (forward) hither: 0x270D

0x270A: E4		clr	A					; ACC = 0
0x270B: F5 49		mov	0x49, A					; [0x49] = ACC

Label_585:

0x270D: AF 49		mov	R7, 0x49				; R7 = [0x49]
0x270F: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_134:

0x2710: 43 DD 06	orl	IRQEN2, #0x06				; IRQEN2 |= 0x06
0x2713: 43 A9 5B	orl	IE2, #0x5B				; IE2 |= 0x5B {'['}
0x2716: 43 A8 80	orl	IE, #0x80				; IE |= 0x80
0x2719: 53 D0 E7	anl	PSW, #0xE7				; PSW &= 0xE7
0x271C: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_586:

0x271D: 01 02		ajmp	0x2002					; Jumps (backward) hither: 0x2002 (PC += 2, PC(10-0) = 0x0002)

Label_587:

0x271F: 04		inc	A					; ++ACC
0x2720: 08		inc	R0					; ++R0
0x2721: 10 20 40	jbc	0x20, 0x2764				; If ([0x20] == H) then [0x20] = L and jumps (forward) hither: 0x2764

0x2724: 80 03		sjmp	Label_589				; Jumps (forward) hither: 0x2729

Label_588:

0x2726: 02 03 01	ljmp	0x0301					; Jumps (backward) hither: 0x0301

Label_589:

0x2729: 43 EC 02	orl	TXFLG0, #0x02				; TXFLG0 |= 0x02
0x272C: 43 EF 02	orl	RXFLG0, #0x02				; RXFLG0 |= 0x02
0x272F: E4		clr	A					; ACC = 0
0x2730: F5 49		mov	0x49, A					; [0x49] = ACC
0x2732: F5 B9		mov	IP2, A					; IP2 = ACC
0x2734: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_135:

0x2735: 53 DB EF	anl	IF2, #0xEF				; IF2 &= 0xEF
0x2738: D2 13		setb	0x13					; [0x13] = H
0x273A: E4		clr	A					; ACC = 0
0x273B: F5 47		mov	0x47, A					; [0x47] = ACC
0x273D: 02 27 B6	ljmp	Label_597				; Jumps (forward) hither: 0x27B6

Label_590:

0x2740: 53 DB EF	anl	IF2, #0xEF				; IF2 &= 0xEF
0x2743: D2 13		setb	0x13					; [0x13] = H
0x2745: E4		clr	A					; ACC = 0
0x2746: F5 47		mov	0x47, A					; [0x47] = ACC
0x2748: 02 27 B6	ljmp	Label_597				; Jumps (forward) hither: 0x27B6

;-------------------------------------------------------------------------------

Function_136:

0x274B: E5 3C		mov	A, 0x3C					; ACC = [0x3C]
0x274D: 60 06		jz	Label_591				; If (ACC == 0) then jumps (forward) hither: 0x2755

0x274F: D5 3D 03	djnz	0x3D, Label_591				; If (--[0x3D] != 0) then jumps (forward) hither: 0x2755

0x2752: 85 3C 3D	mov	0x3D, 0x3C				; [0x3D] = [0x3C]

Label_591:

0x2755: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_137:

0x2756: 7F 12		mov	R7, #0x12				; R7 = 0x12
0x2758: 78 99		mov	R0, #0x99				; R0 = 0x99
0x275A: E4		clr	A					; ACC = 0

Label_592:

0x275B: F6		mov	@R0, A					; [R0] = ACC
0x275C: 08		inc	R0					; ++R0
0x275D: DF FC		djnz	R7, Label_592				; If (--R7 != 0) then jumps (backward) hither: 0x275B

0x275F: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_138:

0x2760: 85 31 3E	mov	0x3E, 0x31				; [0x3E] = [0x31]
0x2763: 78 B9		mov	R0, #0xB9				; R0 = 0xB9
0x2765: 76 01		mov	@R0, #0x01				; [R0] = 0x01
0x2767: 02 27 B6	ljmp	Label_597				; Jumps (forward) hither: 0x27B6

Label_593:

0x276A: 85 31 44	mov	0x44, 0x31				; [0x44] = [0x31]
0x276D: 78 B9		mov	R0, #0xB9				; R0 = 0xB9
0x276F: 76 01		mov	@R0, #0x01				; [R0] = 0x01
0x2771: 02 27 B6	ljmp	Label_597				; Jumps (forward) hither: 0x27B6

;-------------------------------------------------------------------------------

Function_139:

0x2774: 12 20 79	lcall	Function_101				; Calls (backward) this: 0x2079 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x2079)
0x2777: 12 1F A0	lcall	Function_098				; Calls (backward) this: 0x1FA0 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x1FA0)
0x277A: 02 25 EA	ljmp	Label_572				; Jumps (backward) hither: 0x25EA

Label_594:

0x277D: 43 EC 02	orl	TXFLG0, #0x02				; TXFLG0 |= 0x02
0x2780: 53 EF FB	anl	RXFLG0, #0xFB				; RXFLG0 &= 0xFB
0x2783: D2 AF		setb	EA					; EA = H
0x2785: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_140:

0x2786: 53 E4 FD	anl	TXFLG1, #0xFD				; TXFLG1 &= 0xFD
0x2789: 43 E4 0C	orl	TXFLG1, #0x0C				; TXFLG1 |= 0x0C {'\f'}
0x278C: 02 27 B6	ljmp	Label_597				; Jumps (forward) hither: 0x27B6

Label_595:

0x278F: 53 E7 FD	anl	TXFLG2, #0xFD				; TXFLG2 &= 0xFD
0x2792: 43 E7 0C	orl	TXFLG2, #0x0C				; TXFLG2 |= 0x0C {'\f'}
0x2795: 02 27 B6	ljmp	Label_597				; Jumps (forward) hither: 0x27B6

Label_596:

0x2798: 85 32 3C	mov	0x3C, 0x32				; [0x3C] = [0x32]
0x279B: 85 32 3D	mov	0x3D, 0x32				; [0x3D] = [0x32]
0x279E: 02 27 B6	ljmp	Label_597				; Jumps (forward) hither: 0x27B6

;-------------------------------------------------------------------------------

Function_141:

0x27A1: 75 D4 A0	mov	BTCON, #0xA0				; BTCON = 0xA0
0x27A4: 75 A8 88	mov	IE, #0x88				; IE = 0x88
0x27A7: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

set_wdt_scalar00:

0x27A8: E4		clr	A					; ACC = 0
0x27A9: F5 94		mov	PREWDT, A				; PREWDT = ACC
0x27AB: 75 93 55	mov	CLRWDT, #0x55				; CLRWDT = 0x55 {'U'}
0x27AE: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

WAIT6:

0x27AF: 00		nop
0x27B0: 00		nop
0x27B1: 00		nop
0x27B2: 00		nop
0x27B3: 00		nop
0x27B4: 00		nop
0x27B5: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_597:

0x27B6: E4		clr	A					; ACC = 0
0x27B7: F5 49		mov	0x49, A					; [0x49] = ACC
0x27B9: F5 B9		mov	IP2, A					; IP2 = ACC
0x27BB: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_142:

0x27BC: 53 EF FB	anl	RXFLG0, #0xFB				; RXFLG0 &= 0xFB
0x27BF: D2 AF		setb	EA					; EA = H
0x27C1: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_143:

0x27C2: 12 10 FC	lcall	Function_029				; Calls (backward) this: 0x10FC (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x10FC)
0x27C5: 02 17 E4	ljmp	?C?ICALL				; Jumps (backward) hither: 0x17E4

Label_598:

0x27C8: 12 10 F7	lcall	Function_028				; Calls (backward) this: 0x10F7 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x10F7)
0x27CB: 02 17 E4	ljmp	?C?ICALL				; Jumps (backward) hither: 0x17E4

Label_599:

0x27CE: 12 10 F7	lcall	Function_028				; Calls (backward) this: 0x10F7 (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x10F7)
0x27D1: 02 17 E4	ljmp	?C?ICALL				; Jumps (backward) hither: 0x17E4

Label_600:

0x27D4: 12 10 FC	lcall	Function_029				; Calls (backward) this: 0x10FC (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x10FC)
0x27D7: 02 17 E4	ljmp	?C?ICALL				; Jumps (backward) hither: 0x17E4

Label_601:

0x27DA: 12 10 FC	lcall	Function_029				; Calls (backward) this: 0x10FC (PC += 3, [++SP] = PCL, [++SP] = PCH, PC = 0x10FC)
0x27DD: 02 17 E4	ljmp	?C?ICALL				; Jumps (backward) hither: 0x17E4

Label_602:

0x27E0: E4		clr	A					; ACC = 0
0x27E1: F5 A4		mov	P2WK, A					; P2WK = ACC
0x27E3: 02 27 B6	ljmp	Label_597				; Jumps (backward) hither: 0x27B6

Label_603:

0x27E6: 53 EF FD	anl	RXFLG0, #0xFD				; RXFLG0 &= 0xFD
0x27E9: 02 27 B6	ljmp	Label_597				; Jumps (backward) hither: 0x27B6

Label_604:

0x27EC: 53 EC FD	anl	TXFLG0, #0xFD				; TXFLG0 &= 0xFD
0x27EF: 02 27 B6	ljmp	Label_597				; Jumps (backward) hither: 0x27B6

Label_605:

0x27F2: 75 A4 FF	mov	P2WK, #0xFF				; P2WK = 0xFF
0x27F5: 02 27 B6	ljmp	Label_597				; Jumps (backward) hither: 0x27B6

Label_606:

0x27F8: 43 E4 0E	orl	TXFLG1, #0x0E				; TXFLG1 |= 0x0E
0x27FB: 02 27 B6	ljmp	Label_597				; Jumps (backward) hither: 0x27B6

Label_607:

0x27FE: 43 E7 0E	orl	TXFLG2, #0x0E				; TXFLG2 |= 0x0E
0x2801: 02 27 B6	ljmp	Label_597				; Jumps (backward) hither: 0x27B6

;-------------------------------------------------------------------------------

Function_144:

0x2804: E4		clr	A					; ACC = 0
0x2805: F5 27		mov	0x27, A					; [0x27] = ACC
0x2807: F5 26		mov	0x26, A					; [0x26] = ACC
0x2809: 22		ret						; PCH = [SP--], PCL = [SP--]

0x280A: -- -- --
  ....  -- -- --
0x37FA: -- -- --

Label_608:

0x37FB: 02 11 A3	ljmp	Label_204				; Jumps (backward) hither: 0x11A3

Label_609:

0x37FE: 00		nop

Label_610:

0x37FF: 00		nop

;-------------------------------------------------------------------------------

System_init:

0x3800: 75 F0 A5	mov	B, #0xA5				; B = 0xA5
0x3803: C2 AF		clr	EA					; EA = L
0x3805: 75 93 55	mov	CLRWDT, #0x55				; CLRWDT = 0x55 {'U'}
0x3808: E5 96		mov	A, MODE_FG				; ACC = MODE_FG
0x380A: 20 E1 62	jb	ACC_1, Label_616			; If (ACC_1 == H) then jumps (forward) hither: 0x386F

0x380D: 30 E2 28	jnb	ACC_2, Label_613			; If (ACC_2 == L) then jumps (forward) hither: 0x3838

0x3810: E5 20		mov	A, 0x20					; ACC = [0x20]
0x3812: B4 41 23	cjne	A, #0x41, Label_613			; If (ACC != 0x41 {'A'}) then jumps (forward) hither: 0x3838

0x3815: B5 24 20	cjne	A, 0x24, Label_613			; If (ACC != [0x24]) then jumps (forward) hither: 0x3838

0x3818: E5 21		mov	A, 0x21					; ACC = [0x21]
0x381A: B4 4B 1B	cjne	A, #0x4B, Label_613			; If (ACC != 0x4B {'K'}) then jumps (forward) hither: 0x3838

0x381D: E5 22		mov	A, 0x22					; ACC = [0x22]
0x381F: B4 49 16	cjne	A, #0x49, Label_613			; If (ACC != 0x49 {'I'}) then jumps (forward) hither: 0x3838

0x3822: E5 23		mov	A, 0x23					; ACC = [0x23]
0x3824: B4 52 11	cjne	A, #0x52, Label_613			; If (ACC != 0x52 {'R'}) then jumps (forward) hither: 0x3838

Label_611:

0x3827: 01 D5		ajmp	Label_628				; Jumps (forward) hither: 0x38D5 (PC += 2, PC(10-0) = 0x00D5)

Label_612:

0x3829: 75 9E 60	mov	P4CON, #0x60				; P4CON = 0x60 {'`'}
0x382C: 75 C0 7F	mov	P4, #0x7F				; P4 = 0x7F {'^?'}
0x382F: 90 37 FE	mov	DPTR, #0x37FE				; DPTR = 0x37FE
0x3832: E4		clr	A					; ACC = 0
0x3833: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x3834: 64 5A		xrl	A, #0x5A				; ACC ^= 0x5A {'Z'}
0x3836: 60 EF		jz	Label_611				; If (ACC == 0) then jumps (backward) hither: 0x3827

Label_613:

0x3838: 90 37 FB	mov	DPTR, #0x37FB				; DPTR = 0x37FB
0x383B: E4		clr	A					; ACC = 0
0x383C: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x383D: B4 02 E7	cjne	A, #0x02, Label_611			; If (ACC != 0x02) then jumps (backward) hither: 0x3827

0x3840: E4		clr	A					; ACC = 0
0x3841: F5 F0		mov	B, A					; B = ACC
0x3843: 90 00 00	mov	DPTR, #0x0000				; DPTR = 0x0000
0x3846: 75 81 07	mov	SP, #0x07				; SP = 0x07 {'\a'}
0x3849: F5 D0		mov	PSW, A					; PSW = ACC
0x384B: 02 37 FB	ljmp	Label_608				; Jumps (backward) hither: 0x37FB

;-------------------------------------------------------------------------------

Function_145:

0x384E: 90 3F BA	mov	DPTR, #0x3FBA				; DPTR = 0x3FBA
0x3851: 78 20		mov	R0, #0x20				; R0 = 0x20 {' '}
0x3853: 79 06		mov	R1, #0x06				; R1 = 0x06
0x3855: E5 F0		mov	A, B					; ACC = B

Label_614:

0x3857: B4 A5 FD	cjne	A, #0xA5, Label_614			; If (ACC != 0xA5) then jumps hither: 0x3857

Label_615:

0x385A: E4		clr	A					; ACC = 0
0x385B: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x385C: F6		mov	@R0, A					; [R0] = ACC
0x385D: 08		inc	R0					; ++R0
0x385E: A3		inc	DPTR					; ++DPTR
0x385F: D9 F9		djnz	R1, Label_615				; If (--R1 != 0) then jumps (backward) hither: 0x385A

;-------------------------------------------------------------------------------

Function_146:

0x3861: E4		clr	A					; ACC = 0
0x3862: F5 1D		mov	R5<#3>, A				; R5<#3> = ACC
0x3864: F5 1E		mov	R6<#3>, A				; R6<#3> = ACC
0x3866: F5 1F		mov	R7<#3>, A				; R7<#3> = ACC
0x3868: 90 37 FF	mov	DPTR, #0x37FF				; DPTR = 0x37FF
0x386B: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x386C: F5 27		mov	0x27, A					; [0x27] = ACC
0x386E: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_616:

0x386F: 11 4E		acall	Function_145				; Calls (backward) this: 0x384E (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x004E)
0x3871: 74 14		mov	A, #0x14				; ACC = 0x14

Label_617:

0x3873: 20 C5 B3	jb	P4_5, Label_612				; If (P4_5 == H) then jumps (backward) hither: 0x3829

0x3876: 30 C6 B0	jnb	P4_6, Label_612				; If (P4_6 == L) then jumps (backward) hither: 0x3829

0x3879: 14		dec	A					; --ACC
0x387A: 70 F7		jnz	Label_617				; If (ACC != 0) then jumps (backward) hither: 0x3873

0x387C: F5 9E		mov	P4CON, A				; P4CON = ACC
0x387E: F8		mov	R0, A					; R0 = ACC
0x387F: 74 14		mov	A, #0x14				; ACC = 0x14

Label_618:

0x3881: 75 C0 DF	mov	P4, #0xDF				; P4 = 0xDF

Label_619:

0x3884: D8 FE		djnz	R0, Label_619				; If (--R0 != 0) then jumps hither: 0x3884 (waiting loop)

0x3886: 30 C6 A0	jnb	P4_6, Label_612				; If (P4_6 == L) then jumps (backward) hither: 0x3829

0x3889: 75 C0 BF	mov	P4, #0xBF				; P4 = 0xBF

Label_620:

0x388C: D8 FE		djnz	R0, Label_620				; If (--R0 != 0) then jumps hither: 0x388C (waiting loop)

0x388E: 20 C5 98	jb	P4_5, Label_612				; If (P4_5 == H) then jumps (backward) hither: 0x3829

0x3891: 75 C0 FF	mov	P4, #0xFF				; P4 = 0xFF

Label_621:

0x3894: D8 FE		djnz	R0, Label_621				; If (--R0 != 0) then jumps hither: 0x3894 (waiting loop)

0x3896: 30 C5 90	jnb	P4_5, Label_612				; If (P4_5 == L) then jumps (backward) hither: 0x3829

0x3899: B4 0A 02	cjne	A, #0x0A, Label_622			; If (ACC != 0x0A {'\n'}) then jumps (forward) hither: 0x389E

0x389C: F5 1D		mov	R5<#3>, A				; R5<#3> = ACC

Label_622:

0x389E: B4 11 03	cjne	A, #0x11, Label_623			; If (ACC != 0x11) then jumps (forward) hither: 0x38A4

0x38A1: 75 1E 09	mov	R6<#3>, #0x09				; R6<#3> = 0x09 {'\t'}

Label_623:

0x38A4: B4 06 02	cjne	A, #0x06, Label_624			; If (ACC != 0x06) then jumps (forward) hither: 0x38A9

0x38A7: F5 1F		mov	R7<#3>, A				; R7<#3> = ACC

Label_624:

0x38A9: 75 93 55	mov	CLRWDT, #0x55				; CLRWDT = 0x55 {'U'}
0x38AC: D5 E0 D2	djnz	ACC, Label_618				; If (--ACC != 0) then jumps (backward) hither: 0x3881

Label_625:

0x38AF: D8 FE		djnz	R0, Label_625				; If (--R0 != 0) then jumps hither: 0x38AF (waiting loop)

0x38B1: 20 C5 05	jb	P4_5, Label_626				; If (P4_5 == H) then jumps (forward) hither: 0x38B9

0x38B4: 20 C6 02	jb	P4_6, Label_626				; If (P4_6 == H) then jumps (forward) hither: 0x38B9

0x38B7: 21 A6		ajmp	Label_650				; Jumps (forward) hither: 0x39A6 (PC += 2, PC(10-0) = 0x01A6)

Label_626:

0x38B9: 75 81 27	mov	SP, #0x27				; SP = 0x27 {'''}
0x38BC: 75 C0 9F	mov	P4, #0x9F				; P4 = 0x9F
0x38BF: 75 12 05	mov	R2<#2>, #0x05				; R2<#2> = 0x05
0x38C2: 7D 37		mov	R5, #0x37				; R5 = 0x37 {'7'}
0x38C4: 7C FE		mov	R4, #0xFE				; R4 = 0xFE
0x38C6: 74 5A		mov	A, #0x5A				; ACC = 0x5A {'Z'}
0x38C8: B1 BE		acall	Function_166				; Calls (forward) this: 0x3DBE (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x05BE)

Label_627:

0x38CA: C2 C5		clr	P4_5					; P4_5 = L
0x38CC: D1 C5		acall	Function_169				; Calls (forward) this: 0x3EC5 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x06C5)
0x38CE: D2 C5		setb	P4_5					; P4_5 = H
0x38D0: D1 C5		acall	Function_169				; Calls (forward) this: 0x3EC5 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x06C5)
0x38D2: 30 C5 F5	jnb	P4_5, Label_627				; If (P4_5 == L) then jumps (backward) hither: 0x38CA

Label_628:

0x38D5: 75 93 55	mov	CLRWDT, #0x55				; CLRWDT = 0x55 {'U'}
0x38D8: 75 81 27	mov	SP, #0x27				; SP = 0x27 {'''}
0x38DB: E4		clr	A					; ACC = 0
0x38DC: F5 D0		mov	PSW, A					; PSW = ACC
0x38DE: 75 9E 60	mov	P4CON, #0x60				; P4CON = 0x60 {'`'}
0x38E1: 75 C0 7F	mov	P4, #0x7F				; P4 = 0x7F {'^?'}
0x38E4: E5 96		mov	A, MODE_FG				; ACC = MODE_FG
0x38E6: 54 0A		anl	A, #0x0A				; ACC &= 0x0A {'\n'}
0x38E8: 60 0A		jz	Label_630				; If (ACC == 0) then jumps (forward) hither: 0x38F4

Label_629:

0x38EA: 75 F3 01	mov	DFC, #0x01				; DFC = 0x01
0x38ED: 11 4E		acall	Function_145				; Calls (backward) this: 0x384E (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x004E)
0x38EF: D1 CF		acall	Label_786				; Calls (forward) this: 0x3ECF (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x06CF)
0x38F1: 75 F3 C2	mov	DFC, #0xC2				; DFC = 0xC2

Label_630:

0x38F4: 51 30		acall	Function_148				; Calls (forward) this: 0x3A30 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0230)
0x38F6: 75 F3 CA	mov	DFC, #0xCA				; DFC = 0xCA
0x38F9: 75 94 03	mov	PREWDT, #0x03				; PREWDT = 0x03

Label_631:

0x38FC: E5 20		mov	A, 0x20					; ACC = [0x20]

Label_632:

0x38FE: B4 41 FD	cjne	A, #0x41, Label_632			; If (ACC != 0x41 {'A'}) then jumps hither: 0x38FE

0x3901: 65 24		xrl	A, 0x24					; ACC |= [0x24]

Label_633:

0x3903: 70 FE		jnz	Label_633				; If (ACC != 0) then jumps hither: 0x3903

Label_634:

0x3905: 20 AF FD	jb	EA, Label_634				; If (EA == H) then jumps hither: 0x3905 (waiting loop)

0x3908: 75 93 55	mov	CLRWDT, #0x55				; CLRWDT = 0x55 {'U'}
0x390B: E5 DB		mov	A, IF2					; ACC = IF2
0x390D: 30 E0 3B	jnb	ACC_0, Label_639			; If (ACC_0 == L) then jumps (forward) hither: 0x394B

0x3910: 53 DB FE	anl	IF2, #0xFE				; IF2 &= 0xFE

Label_635:

0x3913: E5 EF		mov	A, RXFLG0				; ACC = RXFLG0
0x3915: 54 18		anl	A, #0x18				; ACC &= 0x18
0x3917: 70 1C		jnz	Label_636				; If (ACC != 0) then jumps (forward) hither: 0x3935

0x3919: 71 53		acall	Function_150				; Calls (forward) this: 0x3B53 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0353)
0x391B: BB 08 20	cjne	R3, #0x08, Label_637			; If (R3 != 0x08 {'\b'}) then jumps (forward) hither: 0x393E

0x391E: 43 EF 04	orl	RXFLG0, #0x04				; RXFLG0 |= 0x04
0x3921: 53 EF FE	anl	RXFLG0, #0xFE				; RXFLG0 &= 0xFE
0x3924: E5 EF		mov	A, RXFLG0				; ACC = RXFLG0
0x3926: 20 E4 15	jb	ACC_4, Label_637			; If (ACC_4 == H) then jumps (forward) hither: 0x393E

0x3929: 71 E5		acall	Function_154				; Calls (forward) this: 0x3BE5 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x03E5)
0x392B: 51 64		acall	Function_149				; Calls (forward) this: 0x3A64 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0264)
0x392D: 20 33 0E	jb	0x33, Label_637				; If ([0x33] == H) then jumps (forward) hither: 0x393E

0x3930: 53 EF FB	anl	RXFLG0, #0xFB				; RXFLG0 &= 0xFB
0x3933: 01 FC		ajmp	Label_631				; Jumps (backward) hither: 0x38FC (PC += 2, PC(10-0) = 0x00FC)

Label_636:

0x3935: 20 E4 0E	jb	ACC_4, Label_638			; If (ACC_4 == H) then jumps (forward) hither: 0x3946

0x3938: 43 EF 04	orl	RXFLG0, #0x04				; RXFLG0 |= 0x04
0x393B: 53 EF FE	anl	RXFLG0, #0xFE				; RXFLG0 &= 0xFE

Label_637:

0x393E: 43 EC 02	orl	TXFLG0, #0x02				; TXFLG0 |= 0x02
0x3941: 43 EF 02	orl	RXFLG0, #0x02				; RXFLG0 |= 0x02
0x3944: 71 F1		acall	Function_155				; Calls (forward) this: 0x3BF1 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x03F1)

Label_638:

0x3946: 53 EF FB	anl	RXFLG0, #0xFB				; RXFLG0 &= 0xFB
0x3949: 01 FC		ajmp	Label_631				; Jumps (backward) hither: 0x38FC (PC += 2, PC(10-0) = 0x00FC)

Label_639:

0x394B: 30 E1 05	jnb	ACC_1, Label_640			; If (ACC_1 == L) then jumps (forward) hither: 0x3953

0x394E: 53 DB FD	anl	IF2, #0xFD				; IF2 &= 0xFD
0x3951: 21 13		ajmp	Label_635				; Jumps (backward) hither: 0x3913 (PC += 2, PC(10-0) = 0x0113)

Label_640:

0x3953: 30 E3 1F	jnb	ACC_3, Label_644			; If (ACC_3 == L) then jumps (forward) hither: 0x3975

0x3956: 53 DB F7	anl	IF2, #0xF7				; IF2 &= 0xF7
0x3959: 53 EF FB	anl	RXFLG0, #0xFB				; RXFLG0 &= 0xFB
0x395C: 20 30 04	jb	0x30, Label_641				; If ([0x30] == H) then jumps (forward) hither: 0x3963

0x395F: 71 61		acall	Function_151				; Calls (forward) this: 0x3B61 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0361)
0x3961: 21 70		ajmp	Label_643				; Jumps (forward) hither: 0x3970 (PC += 2, PC(10-0) = 0x0170)

Label_641:

0x3963: E5 10		mov	A, R0<#2>				; ACC = R0<#2>
0x3965: B4 01 06	cjne	A, #0x01, Label_642			; If (ACC != 0x01) then jumps (forward) hither: 0x396E

0x3968: E5 0A		mov	A, R2<#1>				; ACC = R2<#1>
0x396A: F5 F2		mov	DADDR, A				; DADDR = ACC
0x396C: 60 00		jz	Label_642				; If (ACC == 0) then jumps (forward) hither: 0x396E

Label_642:

0x396E: 71 F1		acall	Function_155				; Calls (forward) this: 0x3BF1 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x03F1)

Label_643:

0x3970: 53 EF FB	anl	RXFLG0, #0xFB				; RXFLG0 &= 0xFB
0x3973: 01 FC		ajmp	Label_631				; Jumps (backward) hither: 0x38FC (PC += 2, PC(10-0) = 0x00FC)

Label_644:

0x3975: 30 E4 2C	jnb	ACC_4, Label_649			; If (ACC_4 == L) then jumps (forward) hither: 0x39A4

0x3978: 53 DB EF	anl	IF2, #0xEF				; IF2 &= 0xEF
0x397B: E5 EF		mov	A, RXFLG0				; ACC = RXFLG0
0x397D: 20 E4 14	jb	ACC_4, Label_647			; If (ACC_4 == H) then jumps (forward) hither: 0x3994

0x3980: 43 EF 04	orl	RXFLG0, #0x04				; RXFLG0 |= 0x04
0x3983: 20 31 04	jb	0x31, Label_645				; If ([0x31] == H) then jumps (forward) hither: 0x398A

0x3986: E5 EE		mov	A, RXCNT0				; ACC = RXCNT0
0x3988: 70 0E		jnz	Label_648				; If (ACC != 0) then jumps (forward) hither: 0x3998

Label_645:

0x398A: 53 EF FE	anl	RXFLG0, #0xFE				; RXFLG0 &= 0xFE
0x398D: 71 F1		acall	Function_155				; Calls (forward) this: 0x3BF1 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x03F1)

Label_646:

0x398F: 53 EF FB	anl	RXFLG0, #0xFB				; RXFLG0 &= 0xFB
0x3992: 01 FC		ajmp	Label_631				; Jumps (backward) hither: 0x38FC (PC += 2, PC(10-0) = 0x00FC)

Label_647:

0x3994: D2 33		setb	0x33					; [0x33] = H
0x3996: 21 3E		ajmp	Label_637				; Jumps (backward) hither: 0x393E (PC += 2, PC(10-0) = 0x013E)

Label_648:

0x3998: 71 53		acall	Function_150				; Calls (forward) this: 0x3B53 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0353)
0x399A: 43 EF 04	orl	RXFLG0, #0x04				; RXFLG0 |= 0x04
0x399D: 53 EF FE	anl	RXFLG0, #0xFE				; RXFLG0 &= 0xFE
0x39A0: 71 AD		acall	Function_153				; Calls (forward) this: 0x3BAD (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x03AD)
0x39A2: 21 8F		ajmp	Label_646				; Jumps (backward) hither: 0x398F (PC += 2, PC(10-0) = 0x018F)

Label_649:

0x39A4: 01 FC		ajmp	Label_631				; Jumps (backward) hither: 0x38FC (PC += 2, PC(10-0) = 0x00FC)

Label_650:

0x39A6: C2 C6		clr	P4_6					; P4_6 = L
0x39A8: 75 94 03	mov	PREWDT, #0x03				; PREWDT = 0x03
0x39AB: 75 81 27	mov	SP, #0x27				; SP = 0x27 {'''}
0x39AE: 51 30		acall	Function_148				; Calls (forward) this: 0x3A30 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0230)
0x39B0: 75 12 05	mov	R2<#2>, #0x05				; R2<#2> = 0x05

Label_651:

0x39B3: 75 C0 FF	mov	P4, #0xFF				; P4 = 0xFF

Label_652:

0x39B6: 75 93 55	mov	CLRWDT, #0x55				; CLRWDT = 0x55 {'U'}
0x39B9: 20 C5 FA	jb	P4_5, Label_652				; If (P4_5 == H) then jumps (backward) hither: 0x39B6

0x39BC: 30 C6 07	jnb	P4_6, Label_654				; If (P4_6 == L) then jumps (forward) hither: 0x39C6

0x39BF: C2 C6		clr	P4_6					; P4_6 = L

Label_653:

0x39C1: 20 C5 EF	jb	P4_5, Label_651				; If (P4_5 == H) then jumps (backward) hither: 0x39B3

0x39C4: 21 C1		ajmp	Label_653				; Jumps (backward) hither: 0x39C1 (PC += 2, PC(10-0) = 0x01C1)

Label_654:

0x39C6: 74 02		mov	A, #0x02				; ACC = 0x02
0x39C8: 51 22		acall	Label_664				; Calls (forward) this: 0x3A22 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0222)
0x39CA: B4 33 10	cjne	A, #0x33, Label_655			; If (ACC != 0x33 {'3'}) then jumps (forward) hither: 0x39DD

0x39CD: 51 1D		acall	Function_147				; Calls (forward) this: 0x3A1D (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x021D)
0x39CF: FC		mov	R4, A					; R4 = ACC
0x39D0: 51 1D		acall	Function_147				; Calls (forward) this: 0x3A1D (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x021D)
0x39D2: FD		mov	R5, A					; R5 = ACC
0x39D3: BD 5A DD	cjne	R5, #0x5A, Label_651			; If (R5 != 0x5A {'Z'}) then jumps (backward) hither: 0x39B3

0x39D6: EC		mov	A, R4					; ACC = R4
0x39D7: 70 DA		jnz	Label_651				; If (ACC != 0) then jumps (backward) hither: 0x39B3

0x39D9: F1 1B		acall	Label_794				; Calls (forward) this: 0x3F1B (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x071B)
0x39DB: 21 B3		ajmp	Label_651				; Jumps (backward) hither: 0x39B3 (PC += 2, PC(10-0) = 0x01B3)

Label_655:

0x39DD: B4 55 16	cjne	A, #0x55, Label_658			; If (ACC != 0x55 {'U'}) then jumps (forward) hither: 0x39F6

0x39E0: 79 08		mov	R1, #0x08				; R1 = 0x08 {'\b'}
0x39E2: 7A 08		mov	R2, #0x08				; R2 = 0x08 {'\b'}

Label_656:

0x39E4: 51 1D		acall	Function_147				; Calls (forward) this: 0x3A1D (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x021D)
0x39E6: F7		mov	@R1, A					; [R1] = ACC
0x39E7: 09		inc	R1					; ++R1
0x39E8: DA FA		djnz	R2, Label_656				; If (--R2 != 0) then jumps (backward) hither: 0x39E4

0x39EA: 79 08		mov	R1, #0x08				; R1 = 0x08 {'\b'}
0x39EC: 7A 08		mov	R2, #0x08				; R2 = 0x08 {'\b'}

Label_657:

0x39EE: E7		mov	A, @R1					; ACC = [R1]
0x39EF: B1 C4		acall	Function_167				; Calls (forward) this: 0x3DC4 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x05C4)
0x39F1: 09		inc	R1					; ++R1
0x39F2: DA FA		djnz	R2, Label_657				; If (--R2 != 0) then jumps (backward) hither: 0x39EE

0x39F4: 21 B3		ajmp	Label_651				; Jumps (backward) hither: 0x39B3 (PC += 2, PC(10-0) = 0x01B3)

Label_658:

0x39F6: B4 66 FD	cjne	A, #0x66, Label_658			; If (ACC != 0x66 {'f'}) then jumps hither: 0x39F6

0x39F9: 91 37		acall	Function_160				; Calls (forward) this: 0x3C37 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0437)

Label_659:

0x39FB: 70 FE		jnz	Label_659				; If (ACC != 0) then jumps hither: 0x39FB

0x39FD: 7A 08		mov	R2, #0x08				; R2 = 0x08 {'\b'}

Label_660:

0x39FF: D1 8D		acall	Function_168				; Calls (forward) this: 0x3E8D (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x068D)
0x3A01: 75 93 55	mov	CLRWDT, #0x55				; CLRWDT = 0x55 {'U'}
0x3A04: D3		setb	C					; CY = H
0x3A05: 75 C0 FF	mov	P4, #0xFF				; P4 = 0xFF

Label_661:

0x3A08: 30 C5 FD	jnb	P4_5, Label_661				; If (P4_5 == L) then jumps hither: 0x3A08 (waiting loop)

Label_662:

0x3A0B: 20 C5 FD	jb	P4_5, Label_662				; If (P4_5 == H) then jumps hither: 0x3A0B (waiting loop)

0x3A0E: 33		rlc	A					; ACC[76543210] = ACC[6543210C], CY = ACC[7]
0x3A0F: 92 C6		mov	P4_6, C					; P4_6 = CY
0x3A11: C3		clr	C					; CY = L
0x3A12: 70 F4		jnz	Label_661				; If (ACC != 0) then jumps (backward) hither: 0x3A08

Label_663:

0x3A14: 30 C5 FD	jnb	P4_5, Label_663				; If (P4_5 == L) then jumps hither: 0x3A14 (waiting loop)

0x3A17: C2 C6		clr	P4_6					; P4_6 = L
0x3A19: DA E4		djnz	R2, Label_660				; If (--R2 != 0) then jumps (backward) hither: 0x39FF

0x3A1B: 21 B3		ajmp	Label_651				; Jumps (backward) hither: 0x39B3 (PC += 2, PC(10-0) = 0x01B3)

;-------------------------------------------------------------------------------

Function_147:

0x3A1D: 75 C0 FF	mov	P4, #0xFF				; P4 = 0xFF
0x3A20: 74 01		mov	A, #0x01				; ACC = 0x01

Label_664:

0x3A22: 30 C5 FD	jnb	P4_5, Label_664				; If (P4_5 == L) then jumps hither: 0x3A22 (waiting loop)

Label_665:

0x3A25: 20 C5 FD	jb	P4_5, Label_665				; If (P4_5 == H) then jumps hither: 0x3A25 (waiting loop)

0x3A28: A2 C6		mov	C, P4_6					; CY = P4_6
0x3A2A: 33		rlc	A					; ACC[76543210] = ACC[6543210C], CY = ACC[7]
0x3A2B: 50 F5		jnc	Label_664				; If (CY == L) then jumps (backward) hither: 0x3A22

0x3A2D: C2 C6		clr	P4_6					; P4_6 = L
0x3A2F: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_148:

0x3A30: E4		clr	A					; ACC = 0
0x3A31: F5 96		mov	MODE_FG, A				; MODE_FG = ACC
0x3A33: F5 F2		mov	DADDR, A				; DADDR = ACC
0x3A35: F5 26		mov	0x26, A					; [0x26] = ACC
0x3A37: 78 18		mov	R0, #0x18				; R0 = 0x18

Label_666:

0x3A39: F6		mov	@R0, A					; [R0] = ACC
0x3A3A: D8 FD		djnz	R0, Label_666				; If (--R0 != 0) then jumps (backward) hither: 0x3A39

0x3A3C: F5 A8		mov	IE, A					; IE = ACC
0x3A3E: F5 A9		mov	IE2, A					; IE2 = ACC
0x3A40: F5 DC		mov	IRQEN, A				; IRQEN = ACC
0x3A42: F5 DD		mov	IRQEN2, A				; IRQEN2 = ACC
0x3A44: F5 B8		mov	IP, A					; IP = ACC
0x3A46: F5 B9		mov	IP2, A					; IP2 = ACC
0x3A48: F5 DA		mov	IF, A					; IF = ACC
0x3A4A: F5 DB		mov	IF2, A					; IF2 = ACC
0x3A4C: F5 DE		mov	IRQFG, A				; IRQFG = ACC
0x3A4E: F5 DF		mov	IRQFG2, A				; IRQFG2 = ACC
0x3A50: F5 95		mov	WKT_CON, A				; WKT_CON = ACC
0x3A52: F5 9A		mov	P0CON, A				; P0CON = ACC
0x3A54: F5 9B		mov	P1CON, A				; P1CON = ACC
0x3A56: F5 9C		mov	P2CON, A				; P2CON = ACC
0x3A58: F5 9D		mov	P3CON, A				; P3CON = ACC
0x3A5A: 14		dec	A					; --ACC
0x3A5B: F5 80		mov	P0, A					; P0 = ACC
0x3A5D: F5 90		mov	P1, A					; P1 = ACC
0x3A5F: F5 A0		mov	P2, A					; P2 = ACC
0x3A61: F5 B0		mov	P3, A					; P3 = ACC
0x3A63: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_149:

0x3A64: 7B 00		mov	R3, #0x00				; R3 = 0x00 {'\0'}
0x3A66: E5 08		mov	A, R0<#1>				; ACC = R0<#1>
0x3A68: 70 12		jnz	Label_668				; If (ACC != 0) then jumps (forward) hither: 0x3A7C

0x3A6A: D2 30		setb	0x30					; [0x30] = H
0x3A6C: E5 09		mov	A, R1<#1>				; ACC = R1<#1>
0x3A6E: B4 05 04	cjne	A, #0x05, Label_667			; If (ACC != 0x05) then jumps (forward) hither: 0x3A75

0x3A71: 74 01		mov	A, #0x01				; ACC = 0x01
0x3A73: 41 87		ajmp	Label_670				; Jumps (forward) hither: 0x3A87 (PC += 2, PC(10-0) = 0x0287)

Label_667:

0x3A75: B4 09 5D	cjne	A, #0x09, Label_676			; If (ACC != 0x09 {'\t'}) then jumps (forward) hither: 0x3AD5

0x3A78: F5 22		mov	0x22, A					; [0x22] = ACC
0x3A7A: 41 86		ajmp	Label_669				; Jumps (forward) hither: 0x3A86 (PC += 2, PC(10-0) = 0x0286)

Label_668:

0x3A7C: 20 E7 59	jb	ACC_7, Label_677			; If (ACC_7 == H) then jumps (forward) hither: 0x3AD8

0x3A7F: D2 30		setb	0x30					; [0x30] = H
0x3A81: E5 09		mov	A, R1<#1>				; ACC = R1<#1>
0x3A83: B4 0A 09	cjne	A, #0x0A, Label_671			; If (ACC != 0x0A {'\n'}) then jumps (forward) hither: 0x3A8F

Label_669:

0x3A86: E4		clr	A					; ACC = 0

Label_670:

0x3A87: 8B EB		mov	TXCNT0, R3				; TXCNT0 = R3
0x3A89: F5 10		mov	R0<#2>, A				; R0<#2> = ACC
0x3A8B: 43 EC 01	orl	TXFLG0, #0x01				; TXFLG0 |= 0x01
0x3A8E: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_671:

0x3A8F: B4 09 43	cjne	A, #0x09, Label_676			; If (ACC != 0x09 {'\t'}) then jumps (forward) hither: 0x3AD5

0x3A92: E5 08		mov	A, R0<#1>				; ACC = R0<#1>
0x3A94: B4 21 3E	cjne	A, #0x21, Label_676			; If (ACC != 0x21 {'!'}) then jumps (forward) hither: 0x3AD5

0x3A97: E5 0B		mov	A, R3<#1>				; ACC = R3<#1>
0x3A99: B4 02 04	cjne	A, #0x02, Label_672			; If (ACC != 0x02) then jumps (forward) hither: 0x3AA0

0x3A9C: 74 02		mov	A, #0x02				; ACC = 0x02
0x3A9E: 41 87		ajmp	Label_670				; Jumps (backward) hither: 0x3A87 (PC += 2, PC(10-0) = 0x0287)

Label_672:

0x3AA0: B4 03 32	cjne	A, #0x03, Label_676			; If (ACC != 0x03) then jumps (forward) hither: 0x3AD5

0x3AA3: 91 00		acall	Function_157				; Calls (forward) this: 0x3C00 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0400)
0x3AA5: B4 05 0C	cjne	A, #0x05, Label_673			; If (ACC != 0x05) then jumps (forward) hither: 0x3AB4

0x3AA8: BE 06 2A	cjne	R6, #0x06, Label_676			; If (R6 != 0x06) then jumps (forward) hither: 0x3AD5

0x3AAB: BF 00 27	cjne	R7, #0x00, Label_676			; If (R7 != 0x00 {'\0'}) then jumps (forward) hither: 0x3AD5

0x3AAE: 74 04		mov	A, #0x04				; ACC = 0x04
0x3AB0: 7E 04		mov	R6, #0x04				; R6 = 0x04
0x3AB2: 41 87		ajmp	Label_670				; Jumps (backward) hither: 0x3A87 (PC += 2, PC(10-0) = 0x0287)

Label_673:

0x3AB4: B4 06 0C	cjne	A, #0x06, Label_674			; If (ACC != 0x06) then jumps (forward) hither: 0x3AC3

0x3AB7: BE 02 1B	cjne	R6, #0x02, Label_676			; If (R6 != 0x02) then jumps (forward) hither: 0x3AD5

0x3ABA: BF 08 18	cjne	R7, #0x08, Label_676			; If (R7 != 0x08 {'\b'}) then jumps (forward) hither: 0x3AD5

0x3ABD: 74 06		mov	A, #0x06				; ACC = 0x06
0x3ABF: 7E 00		mov	R6, #0x00				; R6 = 0x00 {'\0'}
0x3AC1: 41 87		ajmp	Label_670				; Jumps (backward) hither: 0x3A87 (PC += 2, PC(10-0) = 0x0287)

Label_674:

0x3AC3: B4 41 0F	cjne	A, #0x41, Label_676			; If (ACC != 0x41 {'A'}) then jumps (forward) hither: 0x3AD5

0x3AC6: B5 25 0C	cjne	A, 0x25, Label_676			; If (ACC != [0x25]) then jumps (forward) hither: 0x3AD5

0x3AC9: 91 37		acall	Function_160				; Calls (forward) this: 0x3C37 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0437)
0x3ACB: 60 02		jz	Label_675				; If (ACC == 0) then jumps (forward) hither: 0x3ACF

0x3ACD: 11 61		acall	Function_146				; Calls (backward) this: 0x3861 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0061)

Label_675:

0x3ACF: B1 19		acall	Function_162				; Calls (forward) this: 0x3D19 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0519)
0x3AD1: 74 08		mov	A, #0x08				; ACC = 0x08 {'\b'}
0x3AD3: 41 87		ajmp	Label_670				; Jumps (backward) hither: 0x3A87 (PC += 2, PC(10-0) = 0x0287)

Label_676:

0x3AD5: D2 33		setb	0x33					; [0x33] = H
0x3AD7: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_677:

0x3AD8: D2 31		setb	0x31					; [0x31] = H
0x3ADA: 20 E5 34	jb	ACC_5, Label_681			; If (ACC_5 == H) then jumps (forward) hither: 0x3B11

0x3ADD: E5 09		mov	A, R1<#1>				; ACC = R1<#1>
0x3ADF: B4 06 F3	cjne	A, #0x06, Label_676			; If (ACC != 0x06) then jumps (backward) hither: 0x3AD5

0x3AE2: E5 0B		mov	A, R3<#1>				; ACC = R3<#1>
0x3AE4: 30 E5 02	jnb	ACC_5, Label_678			; If (ACC_5 == L) then jumps (forward) hither: 0x3AE9

0x3AE7: 94 1B		subb	A, #0x1B				; ACC -= 0x1B + CY {'\e'}

Label_678:

0x3AE9: 60 EA		jz	Label_676				; If (ACC == 0) then jumps (backward) hither: 0x3AD5

0x3AEB: B4 08 00	cjne	A, #0x08, Label_679			; If (ACC != 0x08 {'\b'}) then jumps (forward) hither: 0x3AEE

Label_679:

0x3AEE: 50 E5		jnc	Label_676				; If (CY == L) then jumps (backward) hither: 0x3AD5

0x3AF0: 23		rl	A					; ACC[76543210] = ACC[65432107]
0x3AF1: F8		mov	R0, A					; R0 = ACC
0x3AF2: 90 3F AA	mov	DPTR, #0x3FAA				; DPTR = 0x3FAA
0x3AF5: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x3AF6: FC		mov	R4, A					; R4 = ACC
0x3AF7: 7D 3F		mov	R5, #0x3F				; R5 = 0x3F {'?'}
0x3AF9: E8		mov	A, R0					; ACC = R0
0x3AFA: 04		inc	A					; ++ACC
0x3AFB: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x3AFC: FE		mov	R6, A					; R6 = ACC
0x3AFD: 7F 00		mov	R7, #0x00				; R7 = 0x00 {'\0'}
0x3AFF: E5 0F		mov	A, R7<#1>				; ACC = R7<#1>
0x3B01: 70 09		jnz	Label_680				; If (ACC != 0) then jumps (forward) hither: 0x3B0C

0x3B03: C3		clr	C					; CY = L
0x3B04: EE		mov	A, R6					; ACC = R6
0x3B05: 95 0E		subb	A, R6<#1>				; ACC -= R6<#1> + CY
0x3B07: 40 03		jc	Label_680				; If (CY == H) then jumps (forward) hither: 0x3B0C

0x3B09: E5 0E		mov	A, R6<#1>				; ACC = R6<#1>
0x3B0B: FE		mov	R6, A					; R6 = ACC

Label_680:

0x3B0C: 75 12 41	mov	R2<#2>, #0x41				; R2<#2> = 0x41 {'A'}
0x3B0F: 61 92		ajmp	Label_694				; Jumps (forward) hither: 0x3B92 (PC += 2, PC(10-0) = 0x0392)

Label_681:

0x3B11: B4 A1 C1	cjne	A, #0xA1, Label_676			; If (ACC != 0xA1) then jumps (backward) hither: 0x3AD5

0x3B14: D5 09 BE	djnz	R1<#1>, Label_676			; If (--R1<#1> != 0) then jumps (backward) hither: 0x3AD5

0x3B17: E5 0B		mov	A, R3<#1>				; ACC = R3<#1>
0x3B19: B4 03 B9	cjne	A, #0x03, Label_676			; If (ACC != 0x03) then jumps (backward) hither: 0x3AD5

0x3B1C: 91 00		acall	Function_157				; Calls (forward) this: 0x3C00 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0400)
0x3B1E: B4 05 19	cjne	A, #0x05, Label_683			; If (ACC != 0x05) then jumps (forward) hither: 0x3B3A

0x3B21: BE 06 B1	cjne	R6, #0x06, Label_676			; If (R6 != 0x06) then jumps (backward) hither: 0x3AD5

0x3B24: BF 00 AE	cjne	R7, #0x00, Label_676			; If (R7 != 0x00 {'\0'}) then jumps (backward) hither: 0x3AD5

0x3B27: 7A 04		mov	R2, #0x04				; R2 = 0x04

Label_682:

0x3B29: E5 13		mov	A, R3<#2>				; ACC = R3<#2>
0x3B2B: B4 52 A7	cjne	A, #0x52, Label_676			; If (ACC != 0x52 {'R'}) then jumps (backward) hither: 0x3AD5

0x3B2E: 7B 02		mov	R3, #0x02				; R3 = 0x02
0x3B30: 85 12 EA	mov	TXDAT0, R2<#2>				; TXDAT0 = R2<#2>
0x3B33: 75 EA 72	mov	TXDAT0, #0x72				; TXDAT0 = 0x72 {'r'}
0x3B36: 1E		dec	R6					; --R6
0x3B37: 1E		dec	R6					; --R6
0x3B38: 61 85		ajmp	Label_692				; Jumps (forward) hither: 0x3B85 (PC += 2, PC(10-0) = 0x0385)

Label_683:

0x3B3A: B4 06 0A	cjne	A, #0x06, Label_684			; If (ACC != 0x06) then jumps (forward) hither: 0x3B47

0x3B3D: BE 02 95	cjne	R6, #0x02, Label_676			; If (R6 != 0x02) then jumps (backward) hither: 0x3AD5

0x3B40: BF 08 92	cjne	R7, #0x08, Label_676			; If (R7 != 0x08 {'\b'}) then jumps (backward) hither: 0x3AD5

0x3B43: 7A 06		mov	R2, #0x06				; R2 = 0x06
0x3B45: 61 29		ajmp	Label_682				; Jumps (backward) hither: 0x3B29 (PC += 2, PC(10-0) = 0x0329)

Label_684:

0x3B47: B4 41 8B	cjne	A, #0x41, Label_676			; If (ACC != 0x41 {'A'}) then jumps (backward) hither: 0x3AD5

0x3B4A: B5 25 88	cjne	A, 0x25, Label_676			; If (ACC != [0x25]) then jumps (backward) hither: 0x3AD5

0x3B4D: 91 37		acall	Function_160				; Calls (forward) this: 0x3C37 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0437)
0x3B4F: 70 84		jnz	Label_676				; If (ACC != 0) then jumps (backward) hither: 0x3AD5

0x3B51: 61 92		ajmp	Label_694				; Jumps (forward) hither: 0x3B92 (PC += 2, PC(10-0) = 0x0392)

;-------------------------------------------------------------------------------

Function_150:

0x3B53: 78 08		mov	R0, #0x08				; R0 = 0x08 {'\b'}
0x3B55: E5 EE		mov	A, RXCNT0				; ACC = RXCNT0
0x3B57: F9		mov	R1, A					; R1 = ACC
0x3B58: FB		mov	R3, A					; R3 = ACC
0x3B59: 60 05		jz	Label_686				; If (ACC == 0) then jumps (forward) hither: 0x3B60

Label_685:

0x3B5B: A6 ED		mov	@R0, RXDAT0				; [R0] = RXDAT0
0x3B5D: 08		inc	R0					; ++R0
0x3B5E: D9 FB		djnz	R1, Label_685				; If (--R1 != 0) then jumps (backward) hither: 0x3B5B

Label_686:

0x3B60: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_151:

0x3B61: E5 10		mov	A, R0<#2>				; ACC = R0<#2>
0x3B63: 60 10		jz	Label_688				; If (ACC == 0) then jumps (forward) hither: 0x3B75

0x3B65: EF		mov	A, R7					; ACC = R7
0x3B66: 70 08		jnz	Label_687				; If (ACC != 0) then jumps (forward) hither: 0x3B70

0x3B68: EE		mov	A, R6					; ACC = R6
0x3B69: 60 0B		jz	Label_689				; If (ACC == 0) then jumps (forward) hither: 0x3B76

0x3B6B: B4 08 02	cjne	A, #0x08, Label_687			; If (ACC != 0x08 {'\b'}) then jumps (forward) hither: 0x3B70

0x3B6E: D2 34		setb	0x34					; [0x34] = H

Label_687:

0x3B70: E5 10		mov	A, R0<#2>				; ACC = R0<#2>
0x3B72: B4 05 09	cjne	A, #0x05, Label_691			; If (ACC != 0x05) then jumps (forward) hither: 0x3B7E

Label_688:

0x3B75: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_689:

0x3B76: 10 34 01	jbc	0x34, Label_690				; If ([0x34] == H) then [0x34] = L and jumps (forward) hither: 0x3B7A

0x3B79: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_690:

0x3B7A: 7B 00		mov	R3, #0x00				; R3 = 0x00 {'\0'}
0x3B7C: 41 86		ajmp	Label_669				; Jumps (backward) hither: 0x3A86 (PC += 2, PC(10-0) = 0x0286)

Label_691:

0x3B7E: B4 07 0E	cjne	A, #0x07, Label_693			; If (ACC != 0x07 {'\a'}) then jumps (forward) hither: 0x3B8F

0x3B81: 7A 08		mov	R2, #0x08				; R2 = 0x08 {'\b'}
0x3B83: 7B 00		mov	R3, #0x00				; R3 = 0x00 {'\0'}

Label_692:

0x3B85: 71 FB		acall	Function_156				; Calls (forward) this: 0x3BFB (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x03FB)
0x3B87: 71 9E		acall	Label_695				; Calls (forward) this: 0x3B9E (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x039E)
0x3B89: 91 2E		acall	Label_705				; Calls (forward) this: 0x3C2E (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x042E)
0x3B8B: 74 07		mov	A, #0x07				; ACC = 0x07 {'\a'}
0x3B8D: 41 87		ajmp	Label_670				; Jumps (backward) hither: 0x3A87 (PC += 2, PC(10-0) = 0x0287)

Label_693:

0x3B8F: B4 09 E3	cjne	A, #0x09, Label_688			; If (ACC != 0x09 {'\t'}) then jumps (backward) hither: 0x3B75

Label_694:

0x3B92: 71 98		acall	Function_152				; Calls (forward) this: 0x3B98 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0398)
0x3B94: 74 09		mov	A, #0x09				; ACC = 0x09 {'\t'}
0x3B96: 41 87		ajmp	Label_670				; Jumps (backward) hither: 0x3A87 (PC += 2, PC(10-0) = 0x0287)

;-------------------------------------------------------------------------------

Function_152:

0x3B98: B1 18		acall	Label_731				; Calls (forward) this: 0x3D18 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0518)
0x3B9A: 7A 08		mov	R2, #0x08				; R2 = 0x08 {'\b'}
0x3B9C: 7B 00		mov	R3, #0x00				; R3 = 0x00 {'\0'}

Label_695:

0x3B9E: EE		mov	A, R6					; ACC = R6
0x3B9F: 4F		orl	A, R7					; ACC |= R7
0x3BA0: 60 0A		jz	Label_696				; If (ACC == 0) then jumps (forward) hither: 0x3BAC

0x3BA2: EA		mov	A, R2					; ACC = R2
0x3BA3: 60 07		jz	Label_696				; If (ACC == 0) then jumps (forward) hither: 0x3BAC

0x3BA5: D1 8D		acall	Function_168				; Calls (forward) this: 0x3E8D (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x068D)
0x3BA7: F5 EA		mov	TXDAT0, A				; TXDAT0 = ACC
0x3BA9: 0B		inc	R3					; ++R3
0x3BAA: DA F2		djnz	R2, Label_695				; If (--R2 != 0) then jumps (backward) hither: 0x3B9E

Label_696:

0x3BAC: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_153:

0x3BAD: E5 10		mov	A, R0<#2>				; ACC = R0<#2>
0x3BAF: B4 02 20	cjne	A, #0x02, Label_699			; If (ACC != 0x02) then jumps (forward) hither: 0x3BD2

0x3BB2: E5 09		mov	A, R1<#1>				; ACC = R1<#1>
0x3BB4: F4		cpl	A					; ACC = ~ACC
0x3BB5: 55 11		anl	A, R1<#2>				; ACC &= R1<#2>
0x3BB7: 30 E2 14	jnb	ACC_2, Label_697			; If (ACC_2 == L) then jumps (forward) hither: 0x3BCE

0x3BBA: 53 F3 F7	anl	DFC, #0xF7				; DFC &= 0xF7
0x3BBD: 75 9E 60	mov	P4CON, #0x60				; P4CON = 0x60 {'`'}
0x3BC0: 75 C0 7F	mov	P4, #0x7F				; P4 = 0x7F {'^?'}
0x3BC3: 11 61		acall	Function_146				; Calls (backward) this: 0x3861 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0061)
0x3BC5: 51 30		acall	Function_148				; Calls (backward) this: 0x3A30 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0230)
0x3BC7: 75 F3 01	mov	DFC, #0x01				; DFC = 0x01
0x3BCA: D1 C5		acall	Function_169				; Calls (forward) this: 0x3EC5 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x06C5)
0x3BCC: 01 38		ajmp	Label_613				; Jumps (backward) hither: 0x3838 (PC += 2, PC(10-0) = 0x0038)

Label_697:

0x3BCE: 85 09 11	mov	R1<#2>, R1<#1>				; R1<#2> = R1<#1>

Label_698:

0x3BD1: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_699:

0x3BD2: B4 04 06	cjne	A, #0x04, Label_700			; If (ACC != 0x04) then jumps (forward) hither: 0x3BDB

0x3BD5: 91 0D		acall	Function_158				; Calls (forward) this: 0x3C0D (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x040D)
0x3BD7: 7B 00		mov	R3, #0x00				; R3 = 0x00 {'\0'}
0x3BD9: 41 86		ajmp	Label_669				; Jumps (backward) hither: 0x3A86 (PC += 2, PC(10-0) = 0x0286)

Label_700:

0x3BDB: B4 06 02	cjne	A, #0x06, Label_701			; If (ACC != 0x06) then jumps (forward) hither: 0x3BE0

0x3BDE: 81 D7		ajmp	Label_723				; Jumps (forward) hither: 0x3CD7 (PC += 2, PC(10-0) = 0x04D7)

Label_701:

0x3BE0: B4 08 EE	cjne	A, #0x08, Label_698			; If (ACC != 0x08 {'\b'}) then jumps (backward) hither: 0x3BD1

0x3BE3: A1 01		ajmp	Label_727				; Jumps (forward) hither: 0x3D01 (PC += 2, PC(10-0) = 0x0501)

;-------------------------------------------------------------------------------

Function_154:

0x3BE5: E4		clr	A					; ACC = 0
0x3BE6: 53 DB 67	anl	IF2, #0x67				; IF2 &= 0x67 {'g'}
0x3BE9: F5 E9		mov	CRWCON, A				; CRWCON = ACC
0x3BEB: 53 EC FD	anl	TXFLG0, #0xFD				; TXFLG0 &= 0xFD
0x3BEE: 53 EF FD	anl	RXFLG0, #0xFD				; RXFLG0 &= 0xFD

;-------------------------------------------------------------------------------

Function_155:

0x3BF1: E4		clr	A					; ACC = 0
0x3BF2: F5 10		mov	R0<#2>, A				; R0<#2> = ACC
0x3BF4: F5 12		mov	R2<#2>, A				; R2<#2> = ACC
0x3BF6: F5 26		mov	0x26, A					; [0x26] = ACC
0x3BF8: D2 37		setb	0x37					; [0x37] = H
0x3BFA: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_156:

0x3BFB: AC 14		mov	R4, R4<#2>				; R4 = R4<#2>
0x3BFD: AD 15		mov	R5, R5<#2>				; R5 = R5<#2>
0x3BFF: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_157:

0x3C00: AC 0C		mov	R4, R4<#1>				; R4 = R4<#1>
0x3C02: AD 0D		mov	R5, R5<#1>				; R5 = R5<#1>
0x3C04: AE 0E		mov	R6, R6<#1>				; R6 = R6<#1>
0x3C06: AF 0F		mov	R7, R7<#1>				; R7 = R7<#1>
0x3C08: E5 0A		mov	A, R2<#1>				; ACC = R2<#1>
0x3C0A: F5 12		mov	R2<#2>, A				; R2<#2> = ACC

Label_702:

0x3C0C: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_158:

0x3C0D: E5 08		mov	A, R0<#1>				; ACC = R0<#1>
0x3C0F: B4 05 FA	cjne	A, #0x05, Label_702			; If (ACC != 0x05) then jumps (backward) hither: 0x3C0C

0x3C12: E5 09		mov	A, R1<#1>				; ACC = R1<#1>
0x3C14: B4 77 02	cjne	A, #0x77, Label_703			; If (ACC != 0x77 {'w'}) then jumps (forward) hither: 0x3C19

0x3C17: 81 1B		ajmp	Label_704				; Jumps (forward) hither: 0x3C1B (PC += 2, PC(10-0) = 0x041B)

Label_703:

0x3C19: F5 13		mov	R3<#2>, A				; R3<#2> = ACC

Label_704:

0x3C1B: B4 52 1E	cjne	A, #0x52, Label_707			; If (ACC != 0x52 {'R'}) then jumps (forward) hither: 0x3C3C

0x3C1E: 91 37		acall	Function_160				; Calls (forward) this: 0x3C37 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0437)
0x3C20: 60 08		jz	Function_159				; If (ACC == 0) then jumps (forward) hither: 0x3C2A

0x3C22: E5 0B		mov	A, R3<#1>				; ACC = R3<#1>
0x3C24: B4 FC 0C	cjne	A, #0xFC, Label_706			; If (ACC != 0xFC) then jumps (forward) hither: 0x3C33

0x3C27: 75 0A 00	mov	R2<#1>, #0x00				; R2<#1> = 0x00 {'\0'}

;-------------------------------------------------------------------------------

Function_159:

0x3C2A: AC 0A		mov	R4, R2<#1>				; R4 = R2<#1>
0x3C2C: AD 0B		mov	R5, R3<#1>				; R5 = R3<#1>

Label_705:

0x3C2E: 8C 14		mov	R4<#2>, R4				; R4<#2> = R4
0x3C30: 8D 15		mov	R5<#2>, R5				; R5<#2> = R5
0x3C32: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_706:

0x3C33: E4		clr	A					; ACC = 0
0x3C34: F5 13		mov	R3<#2>, A				; R3<#2> = ACC
0x3C36: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_160:

0x3C37: E5 27		mov	A, 0x27					; ACC = [0x27]
0x3C39: 64 A5		xrl	A, #0xA5				; ACC ^= 0xA5
0x3C3B: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_707:

0x3C3C: B4 57 06	cjne	A, #0x57, Label_708			; If (ACC != 0x57 {'W'}) then jumps (forward) hither: 0x3C45

0x3C3F: 91 37		acall	Function_160				; Calls (backward) this: 0x3C37 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0437)
0x3C41: 70 F0		jnz	Label_706				; If (ACC != 0) then jumps (backward) hither: 0x3C33

0x3C43: 81 2A		ajmp	Function_159				; Jumps (backward) hither: 0x3C2A (PC += 2, PC(10-0) = 0x042A)

Label_708:

0x3C45: B4 56 09	cjne	A, #0x56, Label_709			; If (ACC != 0x56 {'V'}) then jumps (forward) hither: 0x3C51

0x3C48: 91 2A		acall	Function_159				; Calls (backward) this: 0x3C2A (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x042A)
0x3C4A: EC		mov	A, R4					; ACC = R4
0x3C4B: 4D		orl	A, R5					; ACC |= R5
0x3C4C: 70 E5		jnz	Label_706				; If (ACC != 0) then jumps (backward) hither: 0x3C33

0x3C4E: F5 18		mov	R0<#3>, A				; R0<#3> = ACC
0x3C50: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_709:

0x3C51: B4 77 27	cjne	A, #0x77, Label_715			; If (ACC != 0x77 {'w'}) then jumps (forward) hither: 0x3C7B

0x3C54: E5 13		mov	A, R3<#2>				; ACC = R3<#2>
0x3C56: B4 57 B3	cjne	A, #0x57, Label_702			; If (ACC != 0x57 {'W'}) then jumps (backward) hither: 0x3C0C

0x3C59: 71 FB		acall	Function_156				; Calls (backward) this: 0x3BFB (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x03FB)
0x3C5B: 7A 04		mov	R2, #0x04				; R2 = 0x04
0x3C5D: 79 0A		mov	R1, #0x0A				; R1 = 0x0A {'\n'}

Label_710:

0x3C5F: EE		mov	A, R6					; ACC = R6
0x3C60: 4F		orl	A, R7					; ACC |= R7
0x3C61: 60 0B		jz	Label_712				; If (ACC == 0) then jumps (forward) hither: 0x3C6E

0x3C63: E5 13		mov	A, R3<#2>				; ACC = R3<#2>
0x3C65: B4 57 08	cjne	A, #0x57, Label_713			; If (ACC != 0x57 {'W'}) then jumps (forward) hither: 0x3C70

0x3C68: E7		mov	A, @R1					; ACC = [R1]
0x3C69: B1 C4		acall	Function_167				; Calls (forward) this: 0x3DC4 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x05C4)

Label_711:

0x3C6B: 09		inc	R1					; ++R1
0x3C6C: DA F1		djnz	R2, Label_710				; If (--R2 != 0) then jumps (backward) hither: 0x3C5F

Label_712:

0x3C6E: 81 2E		ajmp	Label_705				; Jumps (backward) hither: 0x3C2E (PC += 2, PC(10-0) = 0x042E)

Label_713:

0x3C70: D1 8D		acall	Function_168				; Calls (forward) this: 0x3E8D (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x068D)
0x3C72: 67		xrl	A, @R1					; ACC ^= [R1]
0x3C73: 60 04		jz	Label_714				; If (ACC == 0) then jumps (forward) hither: 0x3C79

0x3C75: 74 EE		mov	A, #0xEE				; ACC = 0xEE
0x3C77: 42 18		orl	R0<#3>, A				; R0<#3> |= ACC

Label_714:

0x3C79: 80 F0		sjmp	Label_711				; Jumps (backward) hither: 0x3C6B

Label_715:

0x3C7B: B4 41 16	cjne	A, #0x41, Label_716			; If (ACC != 0x41 {'A'}) then jumps (forward) hither: 0x3C94

0x3C7E: E5 0A		mov	A, R2<#1>				; ACC = R2<#1>
0x3C80: B4 4B 11	cjne	A, #0x4B, Label_716			; If (ACC != 0x4B {'K'}) then jumps (forward) hither: 0x3C94

0x3C83: E5 0B		mov	A, R3<#1>				; ACC = R3<#1>
0x3C85: B4 49 0C	cjne	A, #0x49, Label_716			; If (ACC != 0x49 {'I'}) then jumps (forward) hither: 0x3C94

0x3C88: E5 0C		mov	A, R4<#1>				; ACC = R4<#1>
0x3C8A: B4 52 07	cjne	A, #0x52, Label_716			; If (ACC != 0x52 {'R'}) then jumps (forward) hither: 0x3C94

0x3C8D: E5 0D		mov	A, R5<#1>				; ACC = R5<#1>
0x3C8F: B4 41 02	cjne	A, #0x41, Label_716			; If (ACC != 0x41 {'A'}) then jumps (forward) hither: 0x3C94

0x3C92: F5 25		mov	0x25, A					; [0x25] = ACC

Label_716:

0x3C94: 54 DF		anl	A, #0xDF				; ACC &= 0xDF
0x3C96: B4 45 3D	cjne	A, #0x45, Label_722			; If (ACC != 0x45 {'E'}) then jumps (forward) hither: 0x3CD6

0x3C99: E5 0A		mov	A, R2<#1>				; ACC = R2<#1>
0x3C9B: B4 45 0D	cjne	A, #0x45, Label_717			; If (ACC != 0x45 {'E'}) then jumps (forward) hither: 0x3CAB

0x3C9E: 63 0B 4F	xrl	R3<#1>, #0x4F				; R3<#1> |= 0x4F {'O'}
0x3CA1: 63 0C 4C	xrl	R4<#1>, #0x4C				; R4<#1> |= 0x4C {'L'}
0x3CA4: 63 0D 43	xrl	R5<#1>, #0x43				; R5<#1> |= 0x43 {'C'}
0x3CA7: 91 CC		acall	Function_161				; Calls (forward) this: 0x3CCC (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x04CC)
0x3CA9: E1 1B		ajmp	Label_794				; Jumps (forward) hither: 0x3F1B (PC += 2, PC(10-0) = 0x071B)

Label_717:

0x3CAB: B4 5A 08	cjne	A, #0x5A, Label_719			; If (ACC != 0x5A {'Z'}) then jumps (forward) hither: 0x3CB6

0x3CAE: 7C FE		mov	R4, #0xFE				; R4 = 0xFE

Label_718:

0x3CB0: 7D 37		mov	R5, #0x37				; R5 = 0x37 {'7'}
0x3CB2: E5 0B		mov	A, R3<#1>				; ACC = R3<#1>
0x3CB4: A1 BE		ajmp	Function_166				; Jumps (forward) hither: 0x3DBE (PC += 2, PC(10-0) = 0x05BE)

Label_719:

0x3CB6: B4 A5 07	cjne	A, #0xA5, Label_720			; If (ACC != 0xA5) then jumps (forward) hither: 0x3CC0

0x3CB9: B5 27 1A	cjne	A, 0x27, Label_722			; If (ACC != [0x27]) then jumps (forward) hither: 0x3CD6

0x3CBC: 7C FF		mov	R4, #0xFF				; R4 = 0xFF
0x3CBE: 81 B0		ajmp	Label_718				; Jumps (backward) hither: 0x3CB0 (PC += 2, PC(10-0) = 0x04B0)

Label_720:

0x3CC0: B4 FF 06	cjne	A, #0xFF, Label_721			; If (ACC != 0xFF) then jumps (forward) hither: 0x3CC9

0x3CC3: 91 37		acall	Function_160				; Calls (backward) this: 0x3C37 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0437)
0x3CC5: 70 0F		jnz	Label_722				; If (ACC != 0) then jumps (forward) hither: 0x3CD6

0x3CC7: A1 2C		ajmp	Label_733				; Jumps (forward) hither: 0x3D2C (PC += 2, PC(10-0) = 0x052C)

Label_721:

0x3CC9: B4 05 0A	cjne	A, #0x05, Label_722			; If (ACC != 0x05) then jumps (forward) hither: 0x3CD6

;-------------------------------------------------------------------------------

Function_161:

0x3CCC: 85 0B 1D	mov	R5<#3>, R3<#1>				; R5<#3> = R3<#1>
0x3CCF: 85 0C 1E	mov	R6<#3>, R4<#1>				; R6<#3> = R4<#1>
0x3CD2: 85 0D 1F	mov	R7<#3>, R5<#1>				; R7<#3> = R5<#1>
0x3CD5: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_722:

0x3CD6: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_723:

0x3CD7: E5 13		mov	A, R3<#2>				; ACC = R3<#2>
0x3CD9: 54 FE		anl	A, #0xFE				; ACC &= 0xFE
0x3CDB: B4 56 1F	cjne	A, #0x56, Label_726			; If (ACC != 0x56 {'V'}) then jumps (forward) hither: 0x3CFD

0x3CDE: 10 37 08	jbc	0x37, Label_725				; If ([0x37] == H) then [0x37] = L and jumps (forward) hither: 0x3CE9

0x3CE1: EB		mov	A, R3					; ACC = R3
0x3CE2: 79 08		mov	R1, #0x08				; R1 = 0x08 {'\b'}

Label_724:

0x3CE4: FA		mov	R2, A					; R2 = ACC
0x3CE5: 71 FB		acall	Function_156				; Calls (backward) this: 0x3BFB (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x03FB)
0x3CE7: 81 5F		ajmp	Label_710				; Jumps (backward) hither: 0x3C5F (PC += 2, PC(10-0) = 0x045F)

Label_725:

0x3CE9: E5 09		mov	A, R1<#1>				; ACC = R1<#1>
0x3CEB: 64 20		xrl	A, #0x20				; ACC ^= 0x20 {' '}
0x3CED: B5 13 0D	cjne	A, R3<#2>, Label_726			; If (ACC != R3<#2>) then jumps (forward) hither: 0x3CFD

0x3CF0: E5 08		mov	A, R0<#1>				; ACC = R0<#1>
0x3CF2: B4 06 08	cjne	A, #0x06, Label_726			; If (ACC != 0x06) then jumps (forward) hither: 0x3CFD

0x3CF5: 79 0A		mov	R1, #0x0A				; R1 = 0x0A {'\n'}
0x3CF7: EB		mov	A, R3					; ACC = R3
0x3CF8: C3		clr	C					; CY = L
0x3CF9: 94 02		subb	A, #0x02				; ACC -= 0x02 + CY
0x3CFB: 50 E7		jnc	Label_724				; If (CY == L) then jumps (backward) hither: 0x3CE4

Label_726:

0x3CFD: 75 13 00	mov	R3<#2>, #0x00				; R3<#2> = 0x00 {'\0'}
0x3D00: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_727:

0x3D01: EB		mov	A, R3					; ACC = R3
0x3D02: 60 14		jz	Label_731				; If (ACC == 0) then jumps (forward) hither: 0x3D18

0x3D04: B4 08 00	cjne	A, #0x08, Label_728			; If (ACC != 0x08 {'\b'}) then jumps (forward) hither: 0x3D07

Label_728:

0x3D07: 40 02		jc	Label_729				; If (CY == H) then jumps (forward) hither: 0x3D0B

0x3D09: 74 08		mov	A, #0x08				; ACC = 0x08 {'\b'}

Label_729:

0x3D0B: FA		mov	R2, A					; R2 = ACC
0x3D0C: 79 08		mov	R1, #0x08				; R1 = 0x08 {'\b'}

Label_730:

0x3D0E: EE		mov	A, R6					; ACC = R6
0x3D0F: 4F		orl	A, R7					; ACC |= R7
0x3D10: 60 06		jz	Label_731				; If (ACC == 0) then jumps (forward) hither: 0x3D18

0x3D12: E7		mov	A, @R1					; ACC = [R1]
0x3D13: B1 C4		acall	Function_167				; Calls (forward) this: 0x3DC4 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x05C4)
0x3D15: 09		inc	R1					; ++R1
0x3D16: DA F6		djnz	R2, Label_730				; If (--R2 != 0) then jumps (backward) hither: 0x3D0E

Label_731:

0x3D18: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_162:

0x3D19: 91 37		acall	Function_160				; Calls (backward) this: 0x3C37 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0437)
0x3D1B: 70 FB		jnz	Label_731				; If (ACC != 0) then jumps (backward) hither: 0x3D18

0x3D1D: ED		mov	A, R5					; ACC = R5
0x3D1E: B4 5A F7	cjne	A, #0x5A, Label_731			; If (ACC != 0x5A {'Z'}) then jumps (backward) hither: 0x3D18

0x3D21: EC		mov	A, R4					; ACC = R4
0x3D22: B4 FE 04	cjne	A, #0xFE, Label_732			; If (ACC != 0xFE) then jumps (forward) hither: 0x3D29

0x3D25: 74 55		mov	A, #0x55				; ACC = 0x55 {'U'}
0x3D27: A1 3C		ajmp	SSP_start				; Jumps (forward) hither: 0x3D3C (PC += 2, PC(10-0) = 0x053C)

Label_732:

0x3D29: B4 FF 04	cjne	A, #0xFF, Function_163			; If (ACC != 0xFF) then jumps (forward) hither: 0x3D30

Label_733:

0x3D2C: 74 AA		mov	A, #0xAA				; ACC = 0xAA
0x3D2E: A1 3C		ajmp	SSP_start				; Jumps (forward) hither: 0x3D3C (PC += 2, PC(10-0) = 0x053C)

;-------------------------------------------------------------------------------

Function_163:

0x3D30: 54 3C		anl	A, #0x3C				; ACC &= 0x3C {'<'}
0x3D32: F5 F7		mov	XPAGE, A				; XPAGE = ACC
0x3D34: 75 BE 00	mov	IB_OFFSET, #0x00			; IB_OFFSET = 0x00 {'\0'}
0x3D37: 75 BF 00	mov	IB_DATA, #0x00				; IB_DATA = 0x00 {'\0'}
0x3D3A: 74 E6		mov	A, #0xE6				; ACC = 0xE6

;-------------------------------------------------------------------------------

SSP_start:

0x3D3C: F5 B3		mov	IB_CON1, A				; IB_CON1 = ACC
0x3D3E: 75 93 55	mov	CLRWDT, #0x55				; CLRWDT = 0x55 {'U'}
0x3D41: 75 1C 05	mov	R4<#3>, #0x05				; R4<#3> = 0x05
0x3D44: E5 12		mov	A, R2<#2>				; ACC = R2<#2>
0x3D46: B4 05 55	cjne	A, #0x05, Label_743			; If (ACC != 0x05) then jumps (forward) hither: 0x3D9E

Label_734:

0x3D49: 85 1C B4	mov	IB_CON2, R4<#3>				; IB_CON2 = R4<#3>
0x3D4C: 75 1C 0A	mov	R4<#3>, #0x0A				; R4<#3> = 0x0A {'\n'}
0x3D4F: 85 1D B5	mov	IB_CON3, R5<#3>				; IB_CON3 = R5<#3>
0x3D52: 85 1E B6	mov	IB_CON4, R6<#3>				; IB_CON4 = R6<#3>
0x3D55: E5 B3		mov	A, IB_CON1				; ACC = IB_CON1
0x3D57: B4 E6 1A	cjne	A, #0xE6, Label_739			; If (ACC != 0xE6) then jumps (forward) hither: 0x3D74

0x3D5A: E5 F7		mov	A, XPAGE				; ACC = XPAGE
0x3D5C: 24 C8		add	A, #0xC8				; ACC += 0xC8
0x3D5E: 50 2B		jnc	Label_740				; If (CY == L) then jumps (forward) hither: 0x3D8B

0x3D60: 80 30		sjmp	Label_741				; Jumps (forward) hither: 0x3D92

Label_735:

0x3D62: E5 BE		mov	A, IB_OFFSET				; ACC = IB_OFFSET
0x3D64: B4 03 00	cjne	A, #0x03, Label_736			; If (ACC != 0x03) then jumps (forward) hither: 0x3D67

Label_736:

0x3D67: 50 22		jnc	Label_740				; If (CY == L) then jumps (forward) hither: 0x3D8B

0x3D69: 04		inc	A					; ++ACC
0x3D6A: 83		movc	A, @A+PC				; ACC = ROM[PC + 1 + ACC]
0x3D6B: 80 02		sjmp	Label_738				; Jumps (forward) hither: 0x3D6F

Label_737:

0x3D6D: 38		addc	A, R0					; ACC += R0 + CY
0x3D6E: 00		nop

Label_738:

0x3D6F: B5 BF 20	cjne	A, IB_DATA, Label_741			; If (ACC != IB_DATA) then jumps (forward) hither: 0x3D92

0x3D72: A1 8B		ajmp	Label_740				; Jumps (forward) hither: 0x3D8B (PC += 2, PC(10-0) = 0x058B)

Label_739:

0x3D74: B4 6E 14	cjne	A, #0x6E, Label_740			; If (ACC != 0x6E {'n'}) then jumps (forward) hither: 0x3D8B

0x3D77: E5 F7		mov	A, XPAGE				; ACC = XPAGE
0x3D79: 60 E7		jz	Label_735				; If (ACC == 0) then jumps (backward) hither: 0x3D62

0x3D7B: 24 C8		add	A, #0xC8				; ACC += 0xC8
0x3D7D: 50 0C		jnc	Label_740				; If (CY == L) then jumps (forward) hither: 0x3D8B

0x3D7F: 24 F9		add	A, #0xF9				; ACC += 0xF9
0x3D81: 50 0F		jnc	Label_741				; If (CY == L) then jumps (forward) hither: 0x3D92

0x3D83: 70 0D		jnz	Label_741				; If (ACC != 0) then jumps (forward) hither: 0x3D92

0x3D85: E5 BE		mov	A, IB_OFFSET				; ACC = IB_OFFSET
0x3D87: 24 41		add	A, #0x41				; ACC += 0x41 {'A'}
0x3D89: 50 07		jnc	Label_741				; If (CY == L) then jumps (forward) hither: 0x3D92

Label_740:

0x3D8B: 85 1F B7	mov	IB_CON5, R7<#3>				; IB_CON5 = R7<#3>
0x3D8E: 00		nop
0x3D8F: 00		nop
0x3D90: 00		nop
0x3D91: 00		nop

Label_741:

0x3D92: E4		clr	A					; ACC = 0
0x3D93: F5 B3		mov	IB_CON1, A				; IB_CON1 = ACC
0x3D95: F5 B4		mov	IB_CON2, A				; IB_CON2 = ACC
0x3D97: F5 B5		mov	IB_CON3, A				; IB_CON3 = ACC
0x3D99: F5 B6		mov	IB_CON4, A				; IB_CON4 = ACC
0x3D9B: F5 B7		mov	IB_CON5, A				; IB_CON5 = ACC

Label_742:

0x3D9D: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_743:

0x3D9E: B4 06 02	cjne	A, #0x06, Label_744			; If (ACC != 0x06) then jumps (forward) hither: 0x3DA3

0x3DA1: A1 49		ajmp	Label_734				; Jumps (backward) hither: 0x3D49 (PC += 2, PC(10-0) = 0x0549)

Label_744:

0x3DA3: B4 41 F7	cjne	A, #0x41, Label_742			; If (ACC != 0x41 {'A'}) then jumps (backward) hither: 0x3D9D

0x3DA6: A1 49		ajmp	Label_734				; Jumps (backward) hither: 0x3D49 (PC += 2, PC(10-0) = 0x0549)

;-------------------------------------------------------------------------------

Function_164:

0x3DA8: EE		mov	A, R6					; ACC = R6
0x3DA9: 70 01		jnz	Label_745				; If (ACC != 0) then jumps (forward) hither: 0x3DAC

0x3DAB: 1F		dec	R7					; --R7

Label_745:

0x3DAC: 1E		dec	R6					; --R6
0x3DAD: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_165:

0x3DAE: 7D 00		mov	R5, #0x00				; R5 = 0x00 {'\0'}
0x3DB0: 7C 01		mov	R4, #0x01				; R4 = 0x01
0x3DB2: 74 38		mov	A, #0x38				; ACC = 0x38 {'8'}
0x3DB4: B1 BE		acall	Function_166				; Calls (forward) this: 0x3DBE (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x05BE)
0x3DB6: 74 00		mov	A, #0x00				; ACC = 0x00 {'\0'}
0x3DB8: B1 BE		acall	Function_166				; Calls (forward) this: 0x3DBE (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x05BE)
0x3DBA: 7C 00		mov	R4, #0x00				; R4 = 0x00 {'\0'}
0x3DBC: 74 02		mov	A, #0x02				; ACC = 0x02

;-------------------------------------------------------------------------------

Function_166:

0x3DBE: F5 BF		mov	IB_DATA, A				; IB_DATA = ACC
0x3DC0: 8D F7		mov	XPAGE, R5				; XPAGE = R5
0x3DC2: C1 10		ajmp	Label_755				; Jumps (forward) hither: 0x3E10 (PC += 2, PC(10-0) = 0x0610)

;-------------------------------------------------------------------------------

Function_167:

0x3DC4: F5 BF		mov	IB_DATA, A				; IB_DATA = ACC
0x3DC6: E5 12		mov	A, R2<#2>				; ACC = R2<#2>
0x3DC8: B4 41 02	cjne	A, #0x41, Label_746			; If (ACC != 0x41 {'A'}) then jumps (forward) hither: 0x3DCD

0x3DCB: C1 08		ajmp	Label_753				; Jumps (forward) hither: 0x3E08 (PC += 2, PC(10-0) = 0x0608)

Label_746:

0x3DCD: BD FC 0A	cjne	R5, #0xFC, Label_747			; If (R5 != 0xFC) then jumps (forward) hither: 0x3DDA

0x3DD0: 75 F7 3F	mov	XPAGE, #0x3F				; XPAGE = 0x3F {'?'}
0x3DD3: EC		mov	A, R4					; ACC = R4
0x3DD4: 44 C0		orl	A, #0xC0				; ACC |= 0xC0
0x3DD6: F5 BE		mov	IB_OFFSET, A				; IB_OFFSET = ACC
0x3DD8: C1 12		ajmp	Label_756				; Jumps (forward) hither: 0x3E12 (PC += 2, PC(10-0) = 0x0612)

Label_747:

0x3DDA: ED		mov	A, R5					; ACC = R5
0x3DDB: 70 0F		jnz	Label_749				; If (ACC != 0) then jumps (forward) hither: 0x3DEC

0x3DDD: EC		mov	A, R4					; ACC = R4
0x3DDE: B4 03 00	cjne	A, #0x03, Label_748			; If (ACC != 0x03) then jumps (forward) hither: 0x3DE1

Label_748:

0x3DE1: 50 25		jnc	Label_753				; If (CY == L) then jumps (forward) hither: 0x3E08

0x3DE3: 75 F7 37	mov	XPAGE, #0x37				; XPAGE = 0x37 {'7'}
0x3DE6: 24 FB		add	A, #0xFB				; ACC += 0xFB
0x3DE8: F5 BE		mov	IB_OFFSET, A				; IB_OFFSET = ACC
0x3DEA: C1 12		ajmp	Label_756				; Jumps (forward) hither: 0x3E12 (PC += 2, PC(10-0) = 0x0612)

Label_749:

0x3DEC: B4 FF 09	cjne	A, #0xFF, Label_750			; If (ACC != 0xFF) then jumps (forward) hither: 0x3DF8

0x3DEF: 30 30 16	jnb	0x30, Label_753				; If ([0x30] == L) then jumps (forward) hither: 0x3E08

0x3DF2: EC		mov	A, R4					; ACC = R4
0x3DF3: 20 E7 12	jb	ACC_7, Label_753			; If (ACC_7 == H) then jumps (forward) hither: 0x3E08

0x3DF6: C1 19		ajmp	Label_758				; Jumps (forward) hither: 0x3E19 (PC += 2, PC(10-0) = 0x0619)

Label_750:

0x3DF8: B4 38 00	cjne	A, #0x38, Label_751			; If (ACC != 0x38 {'8'}) then jumps (forward) hither: 0x3DFB

Label_751:

0x3DFB: 50 1C		jnc	Label_758				; If (CY == L) then jumps (forward) hither: 0x3E19

0x3DFD: B4 37 08	cjne	A, #0x37, Label_753			; If (ACC != 0x37 {'7'}) then jumps (forward) hither: 0x3E08

0x3E00: BC FA 00	cjne	R4, #0xFA, Label_752			; If (R4 != 0xFA) then jumps (forward) hither: 0x3E03

Label_752:

0x3E03: 40 03		jc	Label_753				; If (CY == H) then jumps (forward) hither: 0x3E08

0x3E05: BC FA 11	cjne	R4, #0xFA, Label_758			; If (R4 != 0xFA) then jumps (forward) hither: 0x3E19

Label_753:

0x3E08: ED		mov	A, R5					; ACC = R5
0x3E09: B4 40 00	cjne	A, #0x40, Label_754			; If (ACC != 0x40 {'@'}) then jumps (forward) hither: 0x3E0C

Label_754:

0x3E0C: 50 26		jnc	Label_762				; If (CY == L) then jumps (forward) hither: 0x3E34

0x3E0E: F5 F7		mov	XPAGE, A				; XPAGE = ACC

Label_755:

0x3E10: 8C BE		mov	IB_OFFSET, R4				; IB_OFFSET = R4

Label_756:

0x3E12: 74 6E		mov	A, #0x6E				; ACC = 0x6E {'n'}

Label_757:

0x3E14: B1 3C		acall	SSP_start				; Calls (backward) this: 0x3D3C (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x053C)
0x3E16: 75 F7 00	mov	XPAGE, #0x00				; XPAGE = 0x00 {'\0'}

Label_758:

0x3E19: B1 A8		acall	Function_164				; Calls (backward) this: 0x3DA8 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x05A8)
0x3E1B: C1 B7		ajmp	Label_782				; Jumps (forward) hither: 0x3EB7 (PC += 2, PC(10-0) = 0x06B7)

Label_759:

0x3E1D: B4 FE 07	cjne	A, #0xFE, Label_760			; If (ACC != 0xFE) then jumps (forward) hither: 0x3E27

0x3E20: EC		mov	A, R4					; ACC = R4
0x3E21: F8		mov	R0, A					; R0 = ACC
0x3E22: E5 BF		mov	A, IB_DATA				; ACC = IB_DATA
0x3E24: F6		mov	@R0, A					; [R0] = ACC
0x3E25: C1 19		ajmp	Label_758				; Jumps (backward) hither: 0x3E19 (PC += 2, PC(10-0) = 0x0619)

Label_760:

0x3E27: B4 FD 08	cjne	A, #0xFD, Label_761			; If (ACC != 0xFD) then jumps (forward) hither: 0x3E32

0x3E2A: EC		mov	A, R4					; ACC = R4
0x3E2B: F8		mov	R0, A					; R0 = ACC
0x3E2C: 75 F7 00	mov	XPAGE, #0x00				; XPAGE = 0x00 {'\0'}
0x3E2F: E5 BF		mov	A, IB_DATA				; ACC = IB_DATA
0x3E31: F2		movx	@R0, A					; XRAM[R0] = ACC

Label_761:

0x3E32: C1 19		ajmp	Label_758				; Jumps (backward) hither: 0x3E19 (PC += 2, PC(10-0) = 0x0619)

Label_762:

0x3E34: B4 FF E6	cjne	A, #0xFF, Label_759			; If (ACC != 0xFF) then jumps (backward) hither: 0x3E1D

0x3E37: EC		mov	A, R4					; ACC = R4
0x3E38: 33		rlc	A					; ACC[76543210] = ACC[6543210C], CY = ACC[7]
0x3E39: 74 5A		mov	A, #0x5A				; ACC = 0x5A {'Z'}
0x3E3B: 40 01		jc	Label_763				; If (CY == H) then jumps (forward) hither: 0x3E3E

0x3E3D: C4		swap	A					; ACC[76543210] = ACC[32107654]

Label_763:

0x3E3E: 8C BE		mov	IB_OFFSET, R4				; IB_OFFSET = R4
0x3E40: C1 14		ajmp	Label_757				; Jumps (backward) hither: 0x3E14 (PC += 2, PC(10-0) = 0x0614)

Label_764:

0x3E42: E5 83		mov	A, DPH					; ACC = DPH
0x3E44: 70 0C		jnz	Label_766				; If (ACC != 0) then jumps (forward) hither: 0x3E52

0x3E46: E5 82		mov	A, DPL					; ACC = DPL
0x3E48: B4 03 00	cjne	A, #0x03, Label_765			; If (ACC != 0x03) then jumps (forward) hither: 0x3E4B

Label_765:

0x3E4B: 50 4B		jnc	Label_775				; If (CY == L) then jumps (forward) hither: 0x3E98

0x3E4D: 90 37 FB	mov	DPTR, #0x37FB				; DPTR = 0x37FB
0x3E50: C1 8A		ajmp	Label_774				; Jumps (forward) hither: 0x3E8A (PC += 2, PC(10-0) = 0x068A)

Label_766:

0x3E52: B4 FF 0A	cjne	A, #0xFF, Label_767			; If (ACC != 0xFF) then jumps (forward) hither: 0x3E5F

0x3E55: 30 31 40	jnb	0x31, Label_775				; If ([0x31] == L) then jumps (forward) hither: 0x3E98

0x3E58: E5 82		mov	A, DPL					; ACC = DPL
0x3E5A: 20 E7 3B	jb	ACC_7, Label_775			; If (ACC_7 == H) then jumps (forward) hither: 0x3E98

0x3E5D: C1 86		ajmp	Label_772				; Jumps (forward) hither: 0x3E86 (PC += 2, PC(10-0) = 0x0686)

Label_767:

0x3E5F: B4 FC 15	cjne	A, #0xFC, Label_769			; If (ACC != 0xFC) then jumps (forward) hither: 0x3E77

0x3E62: 75 83 3F	mov	DPH, #0x3F				; DPH = 0x3F {'?'}
0x3E65: EC		mov	A, R4					; ACC = R4
0x3E66: 30 E7 06	jnb	ACC_7, Label_768			; If (ACC_7 == L) then jumps (forward) hither: 0x3E6F

0x3E69: 44 C0		orl	A, #0xC0				; ACC |= 0xC0
0x3E6B: F5 82		mov	DPL, A					; DPL = ACC
0x3E6D: C1 89		ajmp	Label_773				; Jumps (forward) hither: 0x3E89 (PC += 2, PC(10-0) = 0x0689)

Label_768:

0x3E6F: 54 03		anl	A, #0x03				; ACC &= 0x03
0x3E71: FC		mov	R4, A					; R4 = ACC
0x3E72: 24 18		add	A, #0x18				; ACC += 0x18
0x3E74: F8		mov	R0, A					; R0 = ACC
0x3E75: C1 AD		ajmp	Label_779				; Jumps (forward) hither: 0x3EAD (PC += 2, PC(10-0) = 0x06AD)

Label_769:

0x3E77: B4 38 00	cjne	A, #0x38, Label_770			; If (ACC != 0x38 {'8'}) then jumps (forward) hither: 0x3E7A

Label_770:

0x3E7A: 50 0A		jnc	Label_772				; If (CY == L) then jumps (forward) hither: 0x3E86

0x3E7C: B4 37 19	cjne	A, #0x37, Label_775			; If (ACC != 0x37 {'7'}) then jumps (forward) hither: 0x3E98

0x3E7F: E5 82		mov	A, DPL					; ACC = DPL
0x3E81: B4 FA 00	cjne	A, #0xFA, Label_771			; If (ACC != 0xFA) then jumps (forward) hither: 0x3E84

Label_771:

0x3E84: 40 12		jc	Label_775				; If (CY == H) then jumps (forward) hither: 0x3E98

Label_772:

0x3E86: 90 37 FA	mov	DPTR, #0x37FA				; DPTR = 0x37FA

Label_773:

0x3E89: E4		clr	A					; ACC = 0

Label_774:

0x3E8A: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x3E8B: C1 B7		ajmp	Label_782				; Jumps (forward) hither: 0x3EB7 (PC += 2, PC(10-0) = 0x06B7)

;-------------------------------------------------------------------------------

Function_168:

0x3E8D: B1 A8		acall	Function_164				; Calls (backward) this: 0x3DA8 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x05A8)
0x3E8F: 8C 82		mov	DPL, R4					; DPL = R4
0x3E91: 8D 83		mov	DPH, R5					; DPH = R5
0x3E93: E5 12		mov	A, R2<#2>				; ACC = R2<#2>
0x3E95: B4 41 AA	cjne	A, #0x41, Label_764			; If (ACC != 0x41 {'A'}) then jumps (backward) hither: 0x3E42

Label_775:

0x3E98: E5 83		mov	A, DPH					; ACC = DPH
0x3E9A: B4 40 00	cjne	A, #0x40, Label_776			; If (ACC != 0x40 {'@'}) then jumps (forward) hither: 0x3E9D

Label_776:

0x3E9D: 50 04		jnc	Label_777				; If (CY == L) then jumps (forward) hither: 0x3EA3

0x3E9F: E4		clr	A					; ACC = 0
0x3EA0: 93		movc	A, @A+DPTR				; ACC = ROM[DPTR + ACC]
0x3EA1: C1 B7		ajmp	Label_782				; Jumps (forward) hither: 0x3EB7 (PC += 2, PC(10-0) = 0x06B7)

Label_777:

0x3EA3: B4 FF 02	cjne	A, #0xFF, Label_778			; If (ACC != 0xFF) then jumps (forward) hither: 0x3EA8

0x3EA6: C1 B6		ajmp	Label_781				; Jumps (forward) hither: 0x3EB6 (PC += 2, PC(10-0) = 0x06B6)

Label_778:

0x3EA8: B4 FE 05	cjne	A, #0xFE, Label_780			; If (ACC != 0xFE) then jumps (forward) hither: 0x3EB0

0x3EAB: A8 82		mov	R0, DPL					; R0 = DPL

Label_779:

0x3EAD: E6		mov	A, @R0					; ACC = [R0]
0x3EAE: C1 B7		ajmp	Label_782				; Jumps (forward) hither: 0x3EB7 (PC += 2, PC(10-0) = 0x06B7)

Label_780:

0x3EB0: B4 FD 04	cjne	A, #0xFD, Label_782			; If (ACC != 0xFD) then jumps (forward) hither: 0x3EB7

0x3EB3: 75 83 00	mov	DPH, #0x00				; DPH = 0x00 {'\0'}

Label_781:

0x3EB6: E0		movx	A, @DPTR				; ACC = XRAM[DPTR]

Label_782:

0x3EB7: 0C		inc	R4					; ++R4
0x3EB8: BC 00 09	cjne	R4, #0x00, Label_784			; If (R4 != 0x00 {'\0'}) then jumps (forward) hither: 0x3EC4

0x3EBB: 0D		inc	R5					; ++R5
0x3EBC: BD FD 01	cjne	R5, #0xFD, Label_783			; If (R5 != 0xFD) then jumps (forward) hither: 0x3EC0

0x3EBF: 1D		dec	R5					; --R5

Label_783:

0x3EC0: BD 00 01	cjne	R5, #0x00, Label_784			; If (R5 != 0x00 {'\0'}) then jumps (forward) hither: 0x3EC4

0x3EC3: 1D		dec	R5					; --R5

Label_784:

0x3EC4: 22		ret						; PCH = [SP--], PCL = [SP--]

;-------------------------------------------------------------------------------

Function_169:

0x3EC5: D1 C7		acall	Label_785				; Calls (forward) this: 0x3EC7 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x06C7)

Label_785:

0x3EC7: D8 FE		djnz	R0, Label_785				; If (--R0 != 0) then jumps hither: 0x3EC7 (waiting loop)

0x3EC9: 75 93 55	mov	CLRWDT, #0x55				; CLRWDT = 0x55 {'U'}
0x3ECC: D9 F9		djnz	R1, Label_785				; If (--R1 != 0) then jumps (backward) hither: 0x3EC7

0x3ECE: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_786:

0x3ECF: 78 06		mov	R0, #0x06				; R0 = 0x06
0x3ED1: E4		clr	A					; ACC = 0

Label_787:

0x3ED2: F6		mov	@R0, A					; [R0] = ACC
0x3ED3: D8 FD		djnz	R0, Label_787				; If (--R0 != 0) then jumps (backward) hither: 0x3ED2

0x3ED5: 7F 40		mov	R7, #0x40				; R7 = 0x40 {'@'}
0x3ED7: 75 12 05	mov	R2<#2>, #0x05				; R2<#2> = 0x05

Label_788:

0x3EDA: D1 8D		acall	Function_168				; Calls (backward) this: 0x3E8D (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x068D)
0x3EDC: 29		add	A, R1					; ACC += R1
0x3EDD: F9		mov	R1, A					; R1 = ACC
0x3EDE: 50 05		jnc	Label_789				; If (CY == L) then jumps (forward) hither: 0x3EE5

0x3EE0: 0A		inc	R2					; ++R2
0x3EE1: BA 00 01	cjne	R2, #0x00, Label_789			; If (R2 != 0x00 {'\0'}) then jumps (forward) hither: 0x3EE5

0x3EE4: 0B		inc	R3					; ++R3

Label_789:

0x3EE5: 75 93 55	mov	CLRWDT, #0x55				; CLRWDT = 0x55 {'U'}
0x3EE8: BD 40 EF	cjne	R5, #0x40, Label_788			; If (R5 != 0x40 {'@'}) then jumps (backward) hither: 0x3EDA

0x3EEB: 89 1B		mov	R3<#3>, R1				; R3<#3> = R1
0x3EED: 8A 1A		mov	R2<#3>, R2				; R2<#3> = R2
0x3EEF: 8B 19		mov	R1<#3>, R3				; R1<#3> = R3
0x3EF1: E9		mov	A, R1					; ACC = R1
0x3EF2: 4A		orl	A, R2					; ACC |= R2
0x3EF3: 4B		orl	A, R3					; ACC |= R3
0x3EF4: 60 06		jz	Label_790				; If (ACC == 0) then jumps (forward) hither: 0x3EFC

0x3EF6: BB 3F 06	cjne	R3, #0x3F, Label_791			; If (R3 != 0x3F {'?'}) then jumps (forward) hither: 0x3EFF

0x3EF9: BA C0 03	cjne	R2, #0xC0, Label_791			; If (R2 != 0xC0) then jumps (forward) hither: 0x3EFF

Label_790:

0x3EFC: 75 27 A5	mov	0x27, #0xA5				; [0x27] = 0xA5

Label_791:

0x3EFF: 22		ret						; PCH = [SP--], PCL = [SP--]

Label_792:

0x3F00: C2 AF		clr	EA					; EA = L
0x3F02: 53 F3 F7	anl	DFC, #0xF7				; DFC &= 0xF7
0x3F05: 75 93 55	mov	CLRWDT, #0x55				; CLRWDT = 0x55 {'U'}
0x3F08: 75 81 27	mov	SP, #0x27				; SP = 0x27 {'''}

Label_793:

0x3F0B: B4 5A FD	cjne	A, #0x5A, Label_793			; If (ACC != 0x5A {'Z'}) then jumps hither: 0x3F0B

0x3F0E: E4		clr	A					; ACC = 0
0x3F0F: F5 D0		mov	PSW, A					; PSW = ACC
0x3F11: F5 F3		mov	DFC, A					; DFC = ACC
0x3F13: 75 9E 60	mov	P4CON, #0x60				; P4CON = 0x60 {'`'}
0x3F16: 75 C0 7F	mov	P4, #0x7F				; P4 = 0x7F {'^?'}
0x3F19: 01 EA		ajmp	Label_629				; Jumps (backward) hither: 0x38EA (PC += 2, PC(10-0) = 0x00EA)

Label_794:

0x3F1B: 74 38		mov	A, #0x38				; ACC = 0x38 {'8'}

Label_795:

0x3F1D: 14		dec	A					; --ACC
0x3F1E: 54 FC		anl	A, #0xFC				; ACC &= 0xFC
0x3F20: FA		mov	R2, A					; R2 = ACC
0x3F21: B1 30		acall	Function_163				; Calls (backward) this: 0x3D30 (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x0530)
0x3F23: EA		mov	A, R2					; ACC = R2
0x3F24: 70 F7		jnz	Label_795				; If (ACC != 0) then jumps (backward) hither: 0x3F1D

0x3F26: B1 AE		acall	Function_165				; Calls (backward) this: 0x3DAE (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x05AE)
0x3F28: B1 AE		acall	Function_165				; Calls (backward) this: 0x3DAE (PC += 2, [++SP] = PCL, [++SP] = PCH, PC(10-0) = 0x05AE)
0x3F2A: C1 CF		ajmp	Label_786				; Jumps (backward) hither: 0x3ECF (PC += 2, PC(10-0) = 0x06CF)

+----------+----------------------------------+----------------------------------+
|          |  00  01  02  03  04  05  06  07  |  00  01  02  03  04  05  06  07  |
+----------+----------------------------------+----------------------------------+
|  0x3F2C  |                  12  01  10  01  |                  12  01  10  01  |
|  0x3F30  |  00  00  00  08  03  06  20  10  |  00  00  00  08  03  06  ' ' 10  |
|  0x3F38  |  01  03  00  00  00  01  04  03  |  01  03  00  00  00  01  04  03  |
|  0x3F40  |  09  04  09  02  22  00  01  01  |  09  04  09  02  '"' 00  01  01  |
|  0x3F48  |  00  A0  32  09  04  00  00  01  |  00  A0  '2' 09  04  00  00  01  |
|  0x3F50  |  03  01  01  00  09  21  10  01  |  03  01  01  00  09  '!' 10  01  |
|  0x3F58  |  00  01  22  48  00  07  05  81  |  00  01  '"' 'H' 00  07  05  81  |
|  0x3F60  |  03  08  00  0A  05  01  09  06  |  03  08  00  0A  05  01  09  06  |
|  0x3F68  |  A1  01  85  07  05  08  95  08  |  A1  01  85  07  05  08  95  08  |
|  0x3F70  |  75  01  19  01  29  08  91  02  |  'u' 01  19  01  ')' 08  91  02  |
|  0x3F78  |  C0  06  00  FF  09  01  A1  01  |  C0  06  00  FF  09  01  A1  01  |
|  0x3F80  |  85  05  15  00  25  FF  19  01  |  85  05  15  00  '%' FF  19  01  |
|  0x3F88  |  29  05  75  08  95  05  B1  02  |  ')' 05  'u' 08  95  05  B1  02  |
|  0x3F90  |  C0  06  00  FF  09  01  A1  01  |  C0  06  00  FF  09  01  A1  01  |
|  0x3F98  |  85  06  15  00  25  FF  1A  01  |  85  06  15  00  '%' FF  1A  01  |
|  0x3FA0  |  00  2A  01  08  75  08  96  01  |  00  '*' 01  08  'u' 08  96  01  |
|  0x3FA8  |  08  B1  02  C0  2C  12  42  22  |  08  B1  02  C0  ',' 12  'B' '"' |
|  0x3FB0  |  3E  04  4B  09  5D  07  54  09  |  '>' 04  'K' 09  ']' 07  'T' 09  |
|  0x3FB8  |  64  48  41  4B  49  52  41  00  |  'd' 'H' 'A' 'K' 'I' 'R' 'A' 00  |
|  0x3FC0  |  00  00  00  00  00  00  00  00  |  00  00  00  00  00  00  00  00  |
|  0x3FC8  |  00  00  00  00  00  00  00  00  |  00  00  00  00  00  00  00  00  |
|  0x3FD0  |  00  00  00  00  00  00  00  00  |  00  00  00  00  00  00  00  00  |
|  0x3FD8  |  00  00  00  00  00  00  00  00  |  00  00  00  00  00  00  00  00  |
|  0x3FE0  |  00  00  00  00  00  00  00  00  |  00  00  00  00  00  00  00  00  |
|  0x3FE8  |  00  00  00  00  00  00  00  00  |  00  00  00  00  00  00  00  00  |
|  0x3FF0  |  00  00  00  00  00  00  00  00  |  00  00  00  00  00  00  00  00  |
|  0x3FF8  |  00  00  00  00  00  00  00  00  |  00  00  00  00  00  00  00  00  |
+----------+----------------------------------+----------------------------------+

0x4000: -- -- --
  ....  -- -- --
0xFFFF: -- -- --
